{
  "HypertyConnector": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8NCg0KLy8gRGlzdHJpYnV0aW9uIGZpbGUgZm9yIEh5cGVydHlEaXNjb3ZlcnkuanMgDQovLyB2ZXJzaW9uOiAwLjIuMA0KDQohZnVuY3Rpb24odCl7aWYoIm9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KCk7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNle3ZhciBlO2U9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLGUuSHlwZXJ0eURpc2NvdmVyeT10KCl9fShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiB0KGUscixuKXtmdW5jdGlvbiBvKGMscyl7aWYoIXJbY10pe2lmKCFlW2NdKXt2YXIgdT0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighcyYmdSlyZXR1cm4gdShjLCEwKTtpZihpKXJldHVybiBpKGMsITApO3ZhciBhPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK2MrIiciKTt0aHJvdyBhLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGF9dmFyIGY9cltjXT17ZXhwb3J0czp7fX07ZVtjXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgcj1lW2NdWzFdW3RdO3JldHVybiBvKHI/cjp0KX0sZixmLmV4cG9ydHMsdCxlLHIsbil9cmV0dXJuIHJbY10uZXhwb3J0c31mb3IodmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsYz0wO2M8bi5sZW5ndGg7YysrKW8obltjXSk7cmV0dXJuIG99KHsxOltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPXsiZGVmYXVsdCI6dCgiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5IiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5Ijo2fV0sMjpbZnVuY3Rpb24odCxlLHIpe2UuZXhwb3J0cz17ImRlZmF1bHQiOnQoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjd9XSwzOltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPXsiZGVmYXVsdCI6dCgiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZSI6OH1dLDQ6W2Z1bmN0aW9uKHQsZSxyKXsidXNlIHN0cmljdCI7ci5fX2VzTW9kdWxlPSEwLHJbImRlZmF1bHQiXT1mdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfX0se31dLDU6W2Z1bmN0aW9uKHQsZSxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6eyJkZWZhdWx0Ijp0fX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89dCgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiKSxpPW4obyk7clsiZGVmYXVsdCJdPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lW3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBuJiYobi53cml0YWJsZT0hMCksKDAsaVsiZGVmYXVsdCJdKSh0LG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSxyLG4pe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLG4mJnQoZSxuKSxlfX0oKX0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6Mn1dLDY6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuLi8uLi9tb2R1bGVzL19jb3JlIiksbz1uLkpTT058fChuLkpTT049e3N0cmluZ2lmeTpKU09OLnN0cmluZ2lmeX0pO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gby5zdHJpbmdpZnkuYXBwbHkobyxhcmd1bWVudHMpfX0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjoxNn1dLDc6W2Z1bmN0aW9uKHQsZSxyKXt0KCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Iik7dmFyIG49dCgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBuLmRlZmluZVByb3BlcnR5KHQsZSxyKX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MTYsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOjcxfV0sODpbZnVuY3Rpb24odCxlLHIpe3QoIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciKSx0KCIuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiKSx0KCIuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiKSx0KCIuLi9tb2R1bGVzL2VzNi5wcm9taXNlIiksZS5leHBvcnRzPXQoIi4uL21vZHVsZXMvX2NvcmUiKS5Qcm9taXNlfSx7Ii4uL21vZHVsZXMvX2NvcmUiOjE2LCIuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjo3MiwiLi4vbW9kdWxlcy9lczYucHJvbWlzZSI6NzMsIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciI6NzQsIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI6NzV9XSw5OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0KXRocm93IFR5cGVFcnJvcih0KyIgaXMgbm90IGEgZnVuY3Rpb24hIik7cmV0dXJuIHR9fSx7fV0sMTA6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSx7fV0sMTE6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsbil7aWYoISh0IGluc3RhbmNlb2YgZSl8fHZvaWQgMCE9PW4mJm4gaW4gdCl0aHJvdyBUeXBlRXJyb3IocisiOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEiKTtyZXR1cm4gdH19LHt9XSwxMjpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2lzLW9iamVjdCIpO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtpZighbih0KSl0aHJvdyBUeXBlRXJyb3IodCsiIGlzIG5vdCBhbiBvYmplY3QhIik7cmV0dXJuIHR9fSx7Ii4vX2lzLW9iamVjdCI6MzN9XSwxMzpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX3RvLWlvYmplY3QiKSxvPXQoIi4vX3RvLWxlbmd0aCIpLGk9dCgiLi9fdG8taW5kZXgiKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscixjKXt2YXIgcyx1PW4oZSksYT1vKHUubGVuZ3RoKSxmPWkoYyxhKTtpZih0JiZyIT1yKXtmb3IoO2E+ZjspaWYocz11W2YrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7YT5mO2YrKylpZigodHx8ZiBpbiB1KSYmdVtmXT09PXIpcmV0dXJuIHR8fGZ8fDA7cmV0dXJuIXQmJi0xfX19LHsiLi9fdG8taW5kZXgiOjYxLCIuL190by1pb2JqZWN0Ijo2MywiLi9fdG8tbGVuZ3RoIjo2NH1dLDE0OltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fY29mIiksbz10KCIuL193a3MiKSgidG9TdHJpbmdUYWciKSxpPSJBcmd1bWVudHMiPT1uKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSksYz1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaChyKXt9fTtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGUscixzO3JldHVybiB2b2lkIDA9PT10PyJVbmRlZmluZWQiOm51bGw9PT10PyJOdWxsIjoic3RyaW5nIj09dHlwZW9mKHI9YyhlPU9iamVjdCh0KSxvKSk/cjppP24oZSk6Ik9iamVjdCI9PShzPW4oZSkpJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5jYWxsZWU/IkFyZ3VtZW50cyI6c319LHsiLi9fY29mIjoxNSwiLi9fd2tzIjo2OH1dLDE1OltmdW5jdGlvbih0LGUscil7dmFyIG49e30udG9TdHJpbmc7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuLmNhbGwodCkuc2xpY2UoOCwtMSl9fSx7fV0sMTY6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj1lLmV4cG9ydHM9e3ZlcnNpb246IjIuMy4wIn07Im51bWJlciI9PXR5cGVvZiBfX2UmJihfX2U9bil9LHt9XSwxNzpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2EtZnVuY3Rpb24iKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIpe2lmKG4odCksdm9pZCAwPT09ZSlyZXR1cm4gdDtzd2l0Y2gocil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gdC5jYWxsKGUscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gdC5jYWxsKGUscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4sbyl7cmV0dXJuIHQuY2FsbChlLHIsbixvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX19LHsiLi9fYS1mdW5jdGlvbiI6OX1dLDE4OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09dCl0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICAiK3QpO3JldHVybiB0fX0se31dLDE5OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPSF0KCIuL19mYWlscyIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0seyIuL19mYWlscyI6MjN9XSwyMDpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2lzLW9iamVjdCIpLG89dCgiLi9fZ2xvYmFsIikuZG9jdW1lbnQsaT1uKG8pJiZuKG8uY3JlYXRlRWxlbWVudCk7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudCh0KTp7fX19LHsiLi9fZ2xvYmFsIjoyNSwiLi9faXMtb2JqZWN0IjozM31dLDIxOltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPSJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YiLnNwbGl0KCIsIil9LHt9XSwyMjpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2dsb2JhbCIpLG89dCgiLi9fY29yZSIpLGk9dCgiLi9fY3R4IiksYz10KCIuL19oaWRlIikscz0icHJvdG90eXBlIix1PWZ1bmN0aW9uKHQsZSxyKXt2YXIgYSxmLF8sbD10JnUuRixkPXQmdS5HLHA9dCZ1LlMsdj10JnUuUCxoPXQmdS5CLHk9dCZ1LlcsYj1kP286b1tlXXx8KG9bZV09e30pLG09YltzXSxnPWQ/bjpwP25bZV06KG5bZV18fHt9KVtzXTtkJiYocj1lKTtmb3IoYSBpbiByKWY9IWwmJmcmJnZvaWQgMCE9PWdbYV0sZiYmYSBpbiBifHwoXz1mP2dbYV06clthXSxiW2FdPWQmJiJmdW5jdGlvbiIhPXR5cGVvZiBnW2FdP3JbYV06aCYmZj9pKF8sbik6eSYmZ1thXT09Xz9mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbihlLHIsbil7aWYodGhpcyBpbnN0YW5jZW9mIHQpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyB0O2Nhc2UgMTpyZXR1cm4gbmV3IHQoZSk7Y2FzZSAyOnJldHVybiBuZXcgdChlLHIpfXJldHVybiBuZXcgdChlLHIsbil9cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gZVtzXT10W3NdLGV9KF8pOnYmJiJmdW5jdGlvbiI9PXR5cGVvZiBfP2koRnVuY3Rpb24uY2FsbCxfKTpfLHYmJigoYi52aXJ0dWFsfHwoYi52aXJ0dWFsPXt9KSlbYV09Xyx0JnUuUiYmbSYmIW1bYV0mJmMobSxhLF8pKSl9O3UuRj0xLHUuRz0yLHUuUz00LHUuUD04LHUuQj0xNix1Llc9MzIsdS5VPTY0LHUuUj0xMjgsZS5leHBvcnRzPXV9LHsiLi9fY29yZSI6MTYsIi4vX2N0eCI6MTcsIi4vX2dsb2JhbCI6MjUsIi4vX2hpZGUiOjI3fV0sMjM6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiEhdCgpfWNhdGNoKGUpe3JldHVybiEwfX19LHt9XSwyNDpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2N0eCIpLG89dCgiLi9faXRlci1jYWxsIiksaT10KCIuL19pcy1hcnJheS1pdGVyIiksYz10KCIuL19hbi1vYmplY3QiKSxzPXQoIi4vX3RvLWxlbmd0aCIpLHU9dCgiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsYSxmKXt2YXIgXyxsLGQscD1mP2Z1bmN0aW9uKCl7cmV0dXJuIHR9OnUodCksdj1uKHIsYSxlPzI6MSksaD0wO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBwKXRocm93IFR5cGVFcnJvcih0KyIgaXMgbm90IGl0ZXJhYmxlISIpO2lmKGkocCkpZm9yKF89cyh0Lmxlbmd0aCk7Xz5oO2grKyllP3YoYyhsPXRbaF0pWzBdLGxbMV0pOnYodFtoXSk7ZWxzZSBmb3IoZD1wLmNhbGwodCk7IShsPWQubmV4dCgpKS5kb25lOylvKGQsdixsLnZhbHVlLGUpfX0seyIuL19hbi1vYmplY3QiOjEyLCIuL19jdHgiOjE3LCIuL19pcy1hcnJheS1pdGVyIjozMiwiLi9faXRlci1jYWxsIjozNCwiLi9fdG8tbGVuZ3RoIjo2NCwiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjY5fV0sMjU6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj1lLmV4cG9ydHM9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCk7Im51bWJlciI9PXR5cGVvZiBfX2cmJihfX2c9bil9LHt9XSwyNjpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXt9Lmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiBuLmNhbGwodCxlKX19LHt9XSwyNzpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX29iamVjdC1kcCIpLG89dCgiLi9fcHJvcGVydHktZGVzYyIpO2UuZXhwb3J0cz10KCIuL19kZXNjcmlwdG9ycyIpP2Z1bmN0aW9uKHQsZSxyKXtyZXR1cm4gbi5mKHQsZSxvKDEscikpfTpmdW5jdGlvbih0LGUscil7cmV0dXJuIHRbZV09cix0fX0seyIuL19kZXNjcmlwdG9ycyI6MTksIi4vX29iamVjdC1kcCI6NDMsIi4vX3Byb3BlcnR5LWRlc2MiOjUwfV0sMjg6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9dCgiLi9fZ2xvYmFsIikuZG9jdW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudH0seyIuL19nbG9iYWwiOjI1fV0sMjk6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9IXQoIi4vX2Rlc2NyaXB0b3JzIikmJiF0KCIuL19mYWlscyIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0KCIuL19kb20tY3JlYXRlIikoImRpdiIpLCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxOSwiLi9fZG9tLWNyZWF0ZSI6MjAsIi4vX2ZhaWxzIjoyM31dLDMwOltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj12b2lkIDA9PT1yO3N3aXRjaChlLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuP3QoKTp0LmNhbGwocik7Y2FzZSAxOnJldHVybiBuP3QoZVswXSk6dC5jYWxsKHIsZVswXSk7Y2FzZSAyOnJldHVybiBuP3QoZVswXSxlWzFdKTp0LmNhbGwocixlWzBdLGVbMV0pO2Nhc2UgMzpyZXR1cm4gbj90KGVbMF0sZVsxXSxlWzJdKTp0LmNhbGwocixlWzBdLGVbMV0sZVsyXSk7Y2FzZSA0OnJldHVybiBuP3QoZVswXSxlWzFdLGVbMl0sZVszXSk6dC5jYWxsKHIsZVswXSxlWzFdLGVbMl0sZVszXSl9cmV0dXJuIHQuYXBwbHkocixlKX19LHt9XSwzMTpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2NvZiIpO2UuZXhwb3J0cz1PYmplY3QoInoiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24odCl7cmV0dXJuIlN0cmluZyI9PW4odCk/dC5zcGxpdCgiIik6T2JqZWN0KHQpfX0seyIuL19jb2YiOjE1fV0sMzI6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19pdGVyYXRvcnMiKSxvPXQoIi4vX3drcyIpKCJpdGVyYXRvciIpLGk9QXJyYXkucHJvdG90eXBlO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmKG4uQXJyYXk9PT10fHxpW29dPT09dCl9fSx7Ii4vX2l0ZXJhdG9ycyI6MzksIi4vX3drcyI6Njh9XSwzMzpbZnVuY3Rpb24odCxlLHIpe2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIHQ/bnVsbCE9PXQ6ImZ1bmN0aW9uIj09dHlwZW9mIHR9fSx7fV0sMzQ6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19hbi1vYmplY3QiKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsbyl7dHJ5e3JldHVybiBvP2UobihyKVswXSxyWzFdKTplKHIpfWNhdGNoKGkpe3ZhciBjPXRbInJldHVybiJdO3Rocm93IHZvaWQgMCE9PWMmJm4oYy5jYWxsKHQpKSxpfX19LHsiLi9fYW4tb2JqZWN0IjoxMn1dLDM1OltmdW5jdGlvbih0LGUscil7InVzZSBzdHJpY3QiO3ZhciBuPXQoIi4vX29iamVjdC1jcmVhdGUiKSxvPXQoIi4vX3Byb3BlcnR5LWRlc2MiKSxpPXQoIi4vX3NldC10by1zdHJpbmctdGFnIiksYz17fTt0KCIuL19oaWRlIikoYyx0KCIuL193a3MiKSgiaXRlcmF0b3IiKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXt0LnByb3RvdHlwZT1uKGMse25leHQ6bygxLHIpfSksaSh0LGUrIiBJdGVyYXRvciIpfX0seyIuL19oaWRlIjoyNywiLi9fb2JqZWN0LWNyZWF0ZSI6NDIsIi4vX3Byb3BlcnR5LWRlc2MiOjUwLCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6NTUsIi4vX3drcyI6Njh9XSwzNjpbZnVuY3Rpb24odCxlLHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj10KCIuL19saWJyYXJ5Iiksbz10KCIuL19leHBvcnQiKSxpPXQoIi4vX3JlZGVmaW5lIiksYz10KCIuL19oaWRlIikscz10KCIuL19oYXMiKSx1PXQoIi4vX2l0ZXJhdG9ycyIpLGE9dCgiLi9faXRlci1jcmVhdGUiKSxmPXQoIi4vX3NldC10by1zdHJpbmctdGFnIiksXz10KCIuL19vYmplY3QtZ3BvIiksbD10KCIuL193a3MiKSgiaXRlcmF0b3IiKSxkPSEoW10ua2V5cyYmIm5leHQiaW5bXS5rZXlzKCkpLHA9IkBAaXRlcmF0b3IiLHY9ImtleXMiLGg9InZhbHVlcyIseT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsYixtLGcsail7YShyLGUsYik7dmFyIHgsdyxrLE89ZnVuY3Rpb24odCl7aWYoIWQmJnQgaW4gRSlyZXR1cm4gRVt0XTtzd2l0Y2godCl7Y2FzZSB2OnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLHQpfTtjYXNlIGg6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsdCl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLHQpfX0sTT1lKyIgSXRlcmF0b3IiLFA9bT09aCxTPSExLEU9dC5wcm90b3R5cGUsVD1FW2xdfHxFW3BdfHxtJiZFW21dLEE9VHx8TyhtKSxDPW0/UD9PKCJlbnRyaWVzIik6QTp2b2lkIDAsTD0iQXJyYXkiPT1lP0UuZW50cmllc3x8VDpUO2lmKEwmJihrPV8oTC5jYWxsKG5ldyB0KSksayE9PU9iamVjdC5wcm90b3R5cGUmJihmKGssTSwhMCksbnx8cyhrLGwpfHxjKGssbCx5KSkpLFAmJlQmJlQubmFtZSE9PWgmJihTPSEwLEE9ZnVuY3Rpb24oKXtyZXR1cm4gVC5jYWxsKHRoaXMpfSksbiYmIWp8fCFkJiYhUyYmRVtsXXx8YyhFLGwsQSksdVtlXT1BLHVbTV09eSxtKWlmKHg9e3ZhbHVlczpQP0E6TyhoKSxrZXlzOmc/QTpPKHYpLGVudHJpZXM6Q30sailmb3IodyBpbiB4KXcgaW4gRXx8aShFLHcseFt3XSk7ZWxzZSBvKG8uUCtvLkYqKGR8fFMpLGUseCk7cmV0dXJuIHh9fSx7Ii4vX2V4cG9ydCI6MjIsIi4vX2hhcyI6MjYsIi4vX2hpZGUiOjI3LCIuL19pdGVyLWNyZWF0ZSI6MzUsIi4vX2l0ZXJhdG9ycyI6MzksIi4vX2xpYnJhcnkiOjQwLCIuL19vYmplY3QtZ3BvIjo0NiwiLi9fcmVkZWZpbmUiOjUyLCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6NTUsIi4vX3drcyI6Njh9XSwzNzpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX3drcyIpKCJpdGVyYXRvciIpLG89ITE7dHJ5e3ZhciBpPVs3XVtuXSgpO2lbInJldHVybiJdPWZ1bmN0aW9uKCl7bz0hMH0sQXJyYXkuZnJvbShpLGZ1bmN0aW9uKCl7dGhyb3cgMn0pfWNhdGNoKGMpe31lLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighZSYmIW8pcmV0dXJuITE7dmFyIHI9ITE7dHJ5e3ZhciBpPVs3XSxjPWlbbl0oKTtjLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpyPSEwfX0saVtuXT1mdW5jdGlvbigpe3JldHVybiBjfSx0KGkpfWNhdGNoKHMpe31yZXR1cm4gcn19LHsiLi9fd2tzIjo2OH1dLDM4OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJue3ZhbHVlOmUsZG9uZTohIXR9fX0se31dLDM5OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPXt9fSx7fV0sNDA6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9ITB9LHt9XSw0MTpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2dsb2JhbCIpLG89dCgiLi9fdGFzayIpLnNldCxpPW4uTXV0YXRpb25PYnNlcnZlcnx8bi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLGM9bi5wcm9jZXNzLHM9bi5Qcm9taXNlLHU9InByb2Nlc3MiPT10KCIuL19jb2YiKShjKTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsYT1mdW5jdGlvbigpe3ZhciBuLG87Zm9yKHUmJihuPWMuZG9tYWluKSYmbi5leGl0KCk7dDspe289dC5mbix0PXQubmV4dDt0cnl7bygpfWNhdGNoKGkpe3Rocm93IHQ/cigpOmU9dm9pZCAwLGl9fWU9dm9pZCAwLG4mJm4uZW50ZXIoKX07aWYodSlyPWZ1bmN0aW9uKCl7Yy5uZXh0VGljayhhKX07ZWxzZSBpZihpKXt2YXIgZj0hMCxfPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCIiKTtuZXcgaShhKS5vYnNlcnZlKF8se2NoYXJhY3RlckRhdGE6ITB9KSxyPWZ1bmN0aW9uKCl7Xy5kYXRhPWY9IWZ9fWVsc2UgaWYocyYmcy5yZXNvbHZlKXt2YXIgbD1zLnJlc29sdmUoKTtyPWZ1bmN0aW9uKCl7bC50aGVuKGEpfX1lbHNlIHI9ZnVuY3Rpb24oKXtvLmNhbGwobixhKX07cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciBvPXtmbjpuLG5leHQ6dm9pZCAwfTtlJiYoZS5uZXh0PW8pLHR8fCh0PW8scigpKSxlPW99fX0seyIuL19jb2YiOjE1LCIuL19nbG9iYWwiOjI1LCIuL190YXNrIjo2MH1dLDQyOltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fYW4tb2JqZWN0Iiksbz10KCIuL19vYmplY3QtZHBzIiksaT10KCIuL19lbnVtLWJ1Zy1rZXlzIiksYz10KCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIikscz1mdW5jdGlvbigpe30sdT0icHJvdG90eXBlIixhPWZ1bmN0aW9uKCl7dmFyIGUscj10KCIuL19kb20tY3JlYXRlIikoImlmcmFtZSIpLG49aS5sZW5ndGgsbz0iPiI7Zm9yKHIuc3R5bGUuZGlzcGxheT0ibm9uZSIsdCgiLi9faHRtbCIpLmFwcGVuZENoaWxkKHIpLHIuc3JjPSJqYXZhc2NyaXB0OiIsZT1yLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsZS5vcGVuKCksZS53cml0ZSgiPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDwvc2NyaXB0IitvKSxlLmNsb3NlKCksYT1lLkY7bi0tOylkZWxldGUgYVt1XVtpW25dXTtyZXR1cm4gYSgpfTtlLmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24odCxlKXt2YXIgcjtyZXR1cm4gbnVsbCE9PXQ/KHNbdV09bih0KSxyPW5ldyBzLHNbdV09bnVsbCxyW2NdPXQpOnI9YSgpLHZvaWQgMD09PWU/cjpvKHIsZSl9fSx7Ii4vX2FuLW9iamVjdCI6MTIsIi4vX2RvbS1jcmVhdGUiOjIwLCIuL19lbnVtLWJ1Zy1rZXlzIjoyMSwiLi9faHRtbCI6MjgsIi4vX29iamVjdC1kcHMiOjQ0LCIuL19zaGFyZWQta2V5Ijo1Nn1dLDQzOltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fYW4tb2JqZWN0Iiksbz10KCIuL19pZTgtZG9tLWRlZmluZSIpLGk9dCgiLi9fdG8tcHJpbWl0aXZlIiksYz1PYmplY3QuZGVmaW5lUHJvcGVydHk7ci5mPXQoIi4vX2Rlc2NyaXB0b3JzIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSxyKXtpZihuKHQpLGU9aShlLCEwKSxuKHIpLG8pdHJ5e3JldHVybiBjKHQsZSxyKX1jYXRjaChzKXt9aWYoImdldCJpbiByfHwic2V0ImluIHIpdGhyb3cgVHlwZUVycm9yKCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEiKTtyZXR1cm4idmFsdWUiaW4gciYmKHRbZV09ci52YWx1ZSksdH19LHsiLi9fYW4tb2JqZWN0IjoxMiwiLi9fZGVzY3JpcHRvcnMiOjE5LCIuL19pZTgtZG9tLWRlZmluZSI6MjksIi4vX3RvLXByaW1pdGl2ZSI6NjZ9XSw0NDpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX29iamVjdC1kcCIpLG89dCgiLi9fYW4tb2JqZWN0IiksaT10KCIuL19vYmplY3Qta2V5cyIpO2UuZXhwb3J0cz10KCIuL19kZXNjcmlwdG9ycyIpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKHQsZSl7byh0KTtmb3IodmFyIHIsYz1pKGUpLHM9Yy5sZW5ndGgsdT0wO3M+dTspbi5mKHQscj1jW3UrK10sZVtyXSk7cmV0dXJuIHR9fSx7Ii4vX2FuLW9iamVjdCI6MTIsIi4vX2Rlc2NyaXB0b3JzIjoxOSwiLi9fb2JqZWN0LWRwIjo0MywiLi9fb2JqZWN0LWtleXMiOjQ4fV0sNDU6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19vYmplY3QtcGllIiksbz10KCIuL19wcm9wZXJ0eS1kZXNjIiksaT10KCIuL190by1pb2JqZWN0IiksYz10KCIuL190by1wcmltaXRpdmUiKSxzPXQoIi4vX2hhcyIpLHU9dCgiLi9faWU4LWRvbS1kZWZpbmUiKSxhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7ci5mPXQoIi4vX2Rlc2NyaXB0b3JzIik/YTpmdW5jdGlvbih0LGUpe2lmKHQ9aSh0KSxlPWMoZSwhMCksdSl0cnl7cmV0dXJuIGEodCxlKX1jYXRjaChyKXt9cmV0dXJuIHModCxlKT9vKCFuLmYuY2FsbCh0LGUpLHRbZV0pOnZvaWQgMH19LHsiLi9fZGVzY3JpcHRvcnMiOjE5LCIuL19oYXMiOjI2LCIuL19pZTgtZG9tLWRlZmluZSI6MjksIi4vX29iamVjdC1waWUiOjQ5LCIuL19wcm9wZXJ0eS1kZXNjIjo1MCwiLi9fdG8taW9iamVjdCI6NjMsIi4vX3RvLXByaW1pdGl2ZSI6NjZ9XSw0NjpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2hhcyIpLG89dCgiLi9fdG8tb2JqZWN0IiksaT10KCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIiksYz1PYmplY3QucHJvdG90eXBlO2UuZXhwb3J0cz1PYmplY3QuZ2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQpe3JldHVybiB0PW8odCksbih0LGkpP3RbaV06ImZ1bmN0aW9uIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/YzpudWxsfX0seyIuL19oYXMiOjI2LCIuL19zaGFyZWQta2V5Ijo1NiwiLi9fdG8tb2JqZWN0Ijo2NX1dLDQ3OltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9faGFzIiksbz10KCIuL190by1pb2JqZWN0IiksaT10KCIuL19hcnJheS1pbmNsdWRlcyIpKCExKSxjPXQoIi4vX3NoYXJlZC1rZXkiKSgiSUVfUFJPVE8iKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcixzPW8odCksdT0wLGE9W107Zm9yKHIgaW4gcylyIT1jJiZuKHMscikmJmEucHVzaChyKTtmb3IoO2UubGVuZ3RoPnU7KW4ocyxyPWVbdSsrXSkmJih+aShhLHIpfHxhLnB1c2gocikpO3JldHVybiBhfX0seyIuL19hcnJheS1pbmNsdWRlcyI6MTMsIi4vX2hhcyI6MjYsIi4vX3NoYXJlZC1rZXkiOjU2LCIuL190by1pb2JqZWN0Ijo2M31dLDQ4OltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiKSxvPXQoIi4vX2VudW0tYnVnLWtleXMiKTtlLmV4cG9ydHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsbyl9fSx7Ii4vX2VudW0tYnVnLWtleXMiOjIxLCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NDd9XSw0OTpbZnVuY3Rpb24odCxlLHIpe3IuZj17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZX0se31dLDUwOltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJue2VudW1lcmFibGU6ISgxJnQpLGNvbmZpZ3VyYWJsZTohKDImdCksd3JpdGFibGU6ISg0JnQpLHZhbHVlOmV9fX0se31dLDUxOltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9faGlkZSIpO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUscil7Zm9yKHZhciBvIGluIGUpciYmdFtvXT90W29dPWVbb106bih0LG8sZVtvXSk7cmV0dXJuIHR9fSx7Ii4vX2hpZGUiOjI3fV0sNTI6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9dCgiLi9faGlkZSIpfSx7Ii4vX2hpZGUiOjI3fV0sNTM6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19pcy1vYmplY3QiKSxvPXQoIi4vX2FuLW9iamVjdCIpLGk9ZnVuY3Rpb24odCxlKXtpZihvKHQpLCFuKGUpJiZudWxsIT09ZSl0aHJvdyBUeXBlRXJyb3IoZSsiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpfTtlLmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fCgiX19wcm90b19fImlue30/ZnVuY3Rpb24oZSxyLG4pe3RyeXtuPXQoIi4vX2N0eCIpKEZ1bmN0aW9uLmNhbGwsdCgiLi9fb2JqZWN0LWdvcGQiKS5mKE9iamVjdC5wcm90b3R5cGUsIl9fcHJvdG9fXyIpLnNldCwyKSxuKGUsW10pLHI9IShlIGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKG8pe3I9ITB9cmV0dXJuIGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGkodCxlKSxyP3QuX19wcm90b19fPWU6bih0LGUpLHR9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazppfX0seyIuL19hbi1vYmplY3QiOjEyLCIuL19jdHgiOjE3LCIuL19pcy1vYmplY3QiOjMzLCIuL19vYmplY3QtZ29wZCI6NDV9XSw1NDpbZnVuY3Rpb24odCxlLHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj10KCIuL19nbG9iYWwiKSxvPXQoIi4vX2NvcmUiKSxpPXQoIi4vX29iamVjdC1kcCIpLGM9dCgiLi9fZGVzY3JpcHRvcnMiKSxzPXQoIi4vX3drcyIpKCJzcGVjaWVzIik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPSJmdW5jdGlvbiI9PXR5cGVvZiBvW3RdP29bdF06blt0XTtjJiZlJiYhZVtzXSYmaS5mKGUscyx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfX0seyIuL19jb3JlIjoxNiwiLi9fZGVzY3JpcHRvcnMiOjE5LCIuL19nbG9iYWwiOjI1LCIuL19vYmplY3QtZHAiOjQzLCIuL193a3MiOjY4fV0sNTU6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19vYmplY3QtZHAiKS5mLG89dCgiLi9faGFzIiksaT10KCIuL193a3MiKSgidG9TdHJpbmdUYWciKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIpe3QmJiFvKHQ9cj90OnQucHJvdG90eXBlLGkpJiZuKHQsaSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOmV9KX19LHsiLi9faGFzIjoyNiwiLi9fb2JqZWN0LWRwIjo0MywiLi9fd2tzIjo2OH1dLDU2OltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fc2hhcmVkIikoImtleXMiKSxvPXQoIi4vX3VpZCIpO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gblt0XXx8KG5bdF09byh0KSl9fSx7Ii4vX3NoYXJlZCI6NTcsIi4vX3VpZCI6Njd9XSw1NzpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2dsb2JhbCIpLG89Il9fY29yZS1qc19zaGFyZWRfXyIsaT1uW29dfHwobltvXT17fSk7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpW3RdfHwoaVt0XT17fSl9fSx7Ii4vX2dsb2JhbCI6MjV9XSw1ODpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX2FuLW9iamVjdCIpLG89dCgiLi9fYS1mdW5jdGlvbiIpLGk9dCgiLi9fd2tzIikoInNwZWNpZXMiKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcixjPW4odCkuY29uc3RydWN0b3I7cmV0dXJuIHZvaWQgMD09PWN8fHZvaWQgMD09KHI9bihjKVtpXSk/ZTpvKHIpfX0seyIuL19hLWZ1bmN0aW9uIjo5LCIuL19hbi1vYmplY3QiOjEyLCIuL193a3MiOjY4fV0sNTk6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL190by1pbnRlZ2VyIiksbz10KCIuL19kZWZpbmVkIik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHIpe3ZhciBpLGMscz1TdHJpbmcobyhlKSksdT1uKHIpLGE9cy5sZW5ndGg7cmV0dXJuIDA+dXx8dT49YT90PyIiOnZvaWQgMDooaT1zLmNoYXJDb2RlQXQodSksNTUyOTY+aXx8aT41NjMxOXx8dSsxPT09YXx8KGM9cy5jaGFyQ29kZUF0KHUrMSkpPDU2MzIwfHxjPjU3MzQzP3Q/cy5jaGFyQXQodSk6aTp0P3Muc2xpY2UodSx1KzIpOihpLTU1Mjk2PDwxMCkrKGMtNTYzMjApKzY1NTM2KX19fSx7Ii4vX2RlZmluZWQiOjE4LCIuL190by1pbnRlZ2VyIjo2Mn1dLDYwOltmdW5jdGlvbih0LGUscil7dmFyIG4sbyxpLGM9dCgiLi9fY3R4Iikscz10KCIuL19pbnZva2UiKSx1PXQoIi4vX2h0bWwiKSxhPXQoIi4vX2RvbS1jcmVhdGUiKSxmPXQoIi4vX2dsb2JhbCIpLF89Zi5wcm9jZXNzLGw9Zi5zZXRJbW1lZGlhdGUsZD1mLmNsZWFySW1tZWRpYXRlLHA9Zi5NZXNzYWdlQ2hhbm5lbCx2PTAsaD17fSx5PSJvbnJlYWR5c3RhdGVjaGFuZ2UiLGI9ZnVuY3Rpb24oKXt2YXIgdD0rdGhpcztpZihoLmhhc093blByb3BlcnR5KHQpKXt2YXIgZT1oW3RdO2RlbGV0ZSBoW3RdLGUoKX19LG09ZnVuY3Rpb24odCl7Yi5jYWxsKHQuZGF0YSl9O2wmJmR8fChsPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxyPTE7YXJndW1lbnRzLmxlbmd0aD5yOyllLnB1c2goYXJndW1lbnRzW3IrK10pO3JldHVybiBoWysrdl09ZnVuY3Rpb24oKXtzKCJmdW5jdGlvbiI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCksZSl9LG4odiksdn0sZD1mdW5jdGlvbih0KXtkZWxldGUgaFt0XX0sInByb2Nlc3MiPT10KCIuL19jb2YiKShfKT9uPWZ1bmN0aW9uKHQpe18ubmV4dFRpY2soYyhiLHQsMSkpfTpwPyhvPW5ldyBwLGk9by5wb3J0MixvLnBvcnQxLm9ubWVzc2FnZT1tLG49YyhpLnBvc3RNZXNzYWdlLGksMSkpOmYuYWRkRXZlbnRMaXN0ZW5lciYmImZ1bmN0aW9uIj09dHlwZW9mIHBvc3RNZXNzYWdlJiYhZi5pbXBvcnRTY3JpcHRzPyhuPWZ1bmN0aW9uKHQpe2YucG9zdE1lc3NhZ2UodCsiIiwiKiIpfSxmLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLG0sITEpKTpuPXkgaW4gYSgic2NyaXB0Iik/ZnVuY3Rpb24odCl7dS5hcHBlbmRDaGlsZChhKCJzY3JpcHQiKSlbeV09ZnVuY3Rpb24oKXt1LnJlbW92ZUNoaWxkKHRoaXMpLGIuY2FsbCh0KX19OmZ1bmN0aW9uKHQpe3NldFRpbWVvdXQoYyhiLHQsMSksMCl9KSxlLmV4cG9ydHM9e3NldDpsLGNsZWFyOmR9fSx7Ii4vX2NvZiI6MTUsIi4vX2N0eCI6MTcsIi4vX2RvbS1jcmVhdGUiOjIwLCIuL19nbG9iYWwiOjI1LCIuL19odG1sIjoyOCwiLi9faW52b2tlIjozMH1dLDYxOltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fdG8taW50ZWdlciIpLG89TWF0aC5tYXgsaT1NYXRoLm1pbjtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD1uKHQpLDA+dD9vKHQrZSwwKTppKHQsZSl9fSx7Ii4vX3RvLWludGVnZXIiOjYyfV0sNjI6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj1NYXRoLmNlaWwsbz1NYXRoLmZsb29yO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaXNOYU4odD0rdCk/MDoodD4wP286bikodCl9fSx7fV0sNjM6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19pb2JqZWN0Iiksbz10KCIuL19kZWZpbmVkIik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKG8odCkpfX0seyIuL19kZWZpbmVkIjoxOCwiLi9faW9iamVjdCI6MzF9XSw2NDpbZnVuY3Rpb24odCxlLHIpe3ZhciBuPXQoIi4vX3RvLWludGVnZXIiKSxvPU1hdGgubWluO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gdD4wP28obih0KSw5MDA3MTk5MjU0NzQwOTkxKTowfX0seyIuL190by1pbnRlZ2VyIjo2Mn1dLDY1OltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9fZGVmaW5lZCIpO2UuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0KG4odCkpfX0seyIuL19kZWZpbmVkIjoxOH1dLDY2OltmdW5jdGlvbih0LGUscil7dmFyIG49dCgiLi9faXMtb2JqZWN0Iik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIW4odCkpcmV0dXJuIHQ7dmFyIHIsbztpZihlJiYiZnVuY3Rpb24iPT10eXBlb2Yocj10LnRvU3RyaW5nKSYmIW4obz1yLmNhbGwodCkpKXJldHVybiBvO2lmKCJmdW5jdGlvbiI9PXR5cGVvZihyPXQudmFsdWVPZikmJiFuKG89ci5jYWxsKHQpKSlyZXR1cm4gbztpZighZSYmImZ1bmN0aW9uIj09dHlwZW9mKHI9dC50b1N0cmluZykmJiFuKG89ci5jYWxsKHQpKSlyZXR1cm4gbzt0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpfX0seyIuL19pcy1vYmplY3QiOjMzfV0sNjc6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj0wLG89TWF0aC5yYW5kb20oKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIlN5bWJvbCgiLmNvbmNhdCh2b2lkIDA9PT10PyIiOnQsIilfIiwoKytuK28pLnRvU3RyaW5nKDM2KSl9fSx7fV0sNjg6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19zaGFyZWQiKSgid2tzIiksbz10KCIuL191aWQiKSxpPXQoIi4vX2dsb2JhbCIpLlN5bWJvbCxjPSJmdW5jdGlvbiI9PXR5cGVvZiBpLHM9ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuW3RdfHwoblt0XT1jJiZpW3RdfHwoYz9pOm8pKCJTeW1ib2wuIit0KSl9O3Muc3RvcmU9bn0seyIuL19nbG9iYWwiOjI1LCIuL19zaGFyZWQiOjU3LCIuL191aWQiOjY3fV0sNjk6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19jbGFzc29mIiksbz10KCIuL193a3MiKSgiaXRlcmF0b3IiKSxpPXQoIi4vX2l0ZXJhdG9ycyIpO2UuZXhwb3J0cz10KCIuL19jb3JlIikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMCE9dD90W29dfHx0WyJAQGl0ZXJhdG9yIl18fGlbbih0KV06dm9pZCAwfX0seyIuL19jbGFzc29mIjoxNCwiLi9fY29yZSI6MTYsIi4vX2l0ZXJhdG9ycyI6MzksIi4vX3drcyI6Njh9XSw3MDpbZnVuY3Rpb24odCxlLHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj10KCIuL19hZGQtdG8tdW5zY29wYWJsZXMiKSxvPXQoIi4vX2l0ZXItc3RlcCIpLGk9dCgiLi9faXRlcmF0b3JzIiksYz10KCIuL190by1pb2JqZWN0Iik7ZS5leHBvcnRzPXQoIi4vX2l0ZXItZGVmaW5lIikoQXJyYXksIkFycmF5IixmdW5jdGlvbih0LGUpe3RoaXMuX3Q9Yyh0KSx0aGlzLl9pPTAsdGhpcy5faz1lfSxmdW5jdGlvbigpe3ZhciB0PXRoaXMuX3QsZT10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiF0fHxyPj10Lmxlbmd0aD8odGhpcy5fdD12b2lkIDAsbygxKSk6ImtleXMiPT1lP28oMCxyKToidmFsdWVzIj09ZT9vKDAsdFtyXSk6bygwLFtyLHRbcl1dKX0sInZhbHVlcyIpLGkuQXJndW1lbnRzPWkuQXJyYXksbigia2V5cyIpLG4oInZhbHVlcyIpLG4oImVudHJpZXMiKX0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEwLCIuL19pdGVyLWRlZmluZSI6MzYsIi4vX2l0ZXItc3RlcCI6MzgsIi4vX2l0ZXJhdG9ycyI6MzksIi4vX3RvLWlvYmplY3QiOjYzfV0sNzE6W2Z1bmN0aW9uKHQsZSxyKXt2YXIgbj10KCIuL19leHBvcnQiKTtuKG4uUytuLkYqIXQoIi4vX2Rlc2NyaXB0b3JzIiksIk9iamVjdCIse2RlZmluZVByb3BlcnR5OnQoIi4vX29iamVjdC1kcCIpLmZ9KX0seyIuL19kZXNjcmlwdG9ycyI6MTksIi4vX2V4cG9ydCI6MjIsIi4vX29iamVjdC1kcCI6NDN9XSw3MjpbZnVuY3Rpb24odCxlLHIpe30se31dLDczOltmdW5jdGlvbih0LGUscil7InVzZSBzdHJpY3QiO3ZhciBuLG8saSxjPXQoIi4vX2xpYnJhcnkiKSxzPXQoIi4vX2dsb2JhbCIpLHU9dCgiLi9fY3R4IiksYT10KCIuL19jbGFzc29mIiksZj10KCIuL19leHBvcnQiKSxfPXQoIi4vX2lzLW9iamVjdCIpLGw9KHQoIi4vX2FuLW9iamVjdCIpLHQoIi4vX2EtZnVuY3Rpb24iKSksZD10KCIuL19hbi1pbnN0YW5jZSIpLHA9dCgiLi9fZm9yLW9mIiksdj0odCgiLi9fc2V0LXByb3RvIikuc2V0LHQoIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiKSksaD10KCIuL190YXNrIikuc2V0LHk9dCgiLi9fbWljcm90YXNrIikoKSxiPSJQcm9taXNlIixtPXMuVHlwZUVycm9yLGc9cy5wcm9jZXNzLGo9c1tiXSxnPXMucHJvY2Vzcyx4PSJwcm9jZXNzIj09YShnKSx3PWZ1bmN0aW9uKCl7fSxrPSEhZnVuY3Rpb24oKXt0cnl7dmFyIGU9ai5yZXNvbHZlKDEpLHI9KGUuY29uc3RydWN0b3I9e30pW3QoIi4vX3drcyIpKCJzcGVjaWVzIildPWZ1bmN0aW9uKHQpe3Qodyx3KX07cmV0dXJuKHh8fCJmdW5jdGlvbiI9PXR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQpJiZlLnRoZW4odylpbnN0YW5jZW9mIHJ9Y2F0Y2gobil7fX0oKSxPPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PT1lfHx0PT09aiYmZT09PWl9LE09ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIF8odCkmJiJmdW5jdGlvbiI9PXR5cGVvZihlPXQudGhlbik/ZTohMX0sUD1mdW5jdGlvbih0KXtyZXR1cm4gTyhqLHQpP25ldyBTKHQpOm5ldyBvKHQpfSxTPW89ZnVuY3Rpb24odCl7dmFyIGUscjt0aGlzLnByb21pc2U9bmV3IHQoZnVuY3Rpb24odCxuKXtpZih2b2lkIDAhPT1lfHx2b2lkIDAhPT1yKXRocm93IG0oIkJhZCBQcm9taXNlIGNvbnN0cnVjdG9yIik7ZT10LHI9bn0pLHRoaXMucmVzb2x2ZT1sKGUpLHRoaXMucmVqZWN0PWwocil9LEU9ZnVuY3Rpb24odCl7dHJ5e3QoKX1jYXRjaChlKXtyZXR1cm57ZXJyb3I6ZX19fSxUPWZ1bmN0aW9uKHQsZSl7aWYoIXQuX24pe3QuX249ITA7dmFyIHI9dC5fYzt5KGZ1bmN0aW9uKCl7Zm9yKHZhciBuPXQuX3Ysbz0xPT10Ll9zLGk9MCxjPWZ1bmN0aW9uKGUpe3ZhciByLGksYz1vP2Uub2s6ZS5mYWlsLHM9ZS5yZXNvbHZlLHU9ZS5yZWplY3QsYT1lLmRvbWFpbjt0cnl7Yz8ob3x8KDI9PXQuX2gmJkwodCksdC5faD0xKSxjPT09ITA/cj1uOihhJiZhLmVudGVyKCkscj1jKG4pLGEmJmEuZXhpdCgpKSxyPT09ZS5wcm9taXNlP3UobSgiUHJvbWlzZS1jaGFpbiBjeWNsZSIpKTooaT1NKHIpKT9pLmNhbGwocixzLHUpOnMocikpOnUobil9Y2F0Y2goZil7dShmKX19O3IubGVuZ3RoPmk7KWMocltpKytdKTt0Ll9jPVtdLHQuX249ITEsZSYmIXQuX2gmJkEodCl9KX19LEE9ZnVuY3Rpb24odCl7aC5jYWxsKHMsZnVuY3Rpb24oKXt2YXIgZSxyLG4sbz10Ll92O2lmKEModCkmJihlPUUoZnVuY3Rpb24oKXt4P2cuZW1pdCgidW5oYW5kbGVkUmVqZWN0aW9uIixvLHQpOihyPXMub251bmhhbmRsZWRyZWplY3Rpb24pP3Ioe3Byb21pc2U6dCxyZWFzb246b30pOihuPXMuY29uc29sZSkmJm4uZXJyb3ImJm4uZXJyb3IoIlVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbiIsbyl9KSx0Ll9oPXh8fEModCk/MjoxKSx0Ll9hPXZvaWQgMCxlKXRocm93IGUuZXJyb3J9KX0sQz1mdW5jdGlvbih0KXtpZigxPT10Ll9oKXJldHVybiExO2Zvcih2YXIgZSxyPXQuX2F8fHQuX2Msbj0wO3IubGVuZ3RoPm47KWlmKGU9cltuKytdLGUuZmFpbHx8IUMoZS5wcm9taXNlKSlyZXR1cm4hMTtyZXR1cm4hMH0sTD1mdW5jdGlvbih0KXtoLmNhbGwocyxmdW5jdGlvbigpe3ZhciBlO3g/Zy5lbWl0KCJyZWplY3Rpb25IYW5kbGVkIix0KTooZT1zLm9ucmVqZWN0aW9uaGFuZGxlZCkmJmUoe3Byb21pc2U6dCxyZWFzb246dC5fdn0pfSl9LEY9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztlLl9kfHwoZS5fZD0hMCxlPWUuX3d8fGUsZS5fdj10LGUuX3M9MixlLl9hfHwoZS5fYT1lLl9jLnNsaWNlKCkpLFQoZSwhMCkpfSxSPWZ1bmN0aW9uKHQpe3ZhciBlLHI9dGhpcztpZighci5fZCl7ci5fZD0hMCxyPXIuX3d8fHI7dHJ5e2lmKHI9PT10KXRocm93IG0oIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmIik7KGU9TSh0KSk/eShmdW5jdGlvbigpe3ZhciBuPXtfdzpyLF9kOiExfTt0cnl7ZS5jYWxsKHQsdShSLG4sMSksdShGLG4sMSkpfWNhdGNoKG8pe0YuY2FsbChuLG8pfX0pOihyLl92PXQsci5fcz0xLFQociwhMSkpfWNhdGNoKG4pe0YuY2FsbCh7X3c6cixfZDohMX0sbil9fX07a3x8KGo9ZnVuY3Rpb24odCl7ZCh0aGlzLGosYiwiX2giKSxsKHQpLG4uY2FsbCh0aGlzKTt0cnl7dCh1KFIsdGhpcywxKSx1KEYsdGhpcywxKSl9Y2F0Y2goZSl7Ri5jYWxsKHRoaXMsZSl9fSxuPWZ1bmN0aW9uKHQpe3RoaXMuX2M9W10sdGhpcy5fYT12b2lkIDAsdGhpcy5fcz0wLHRoaXMuX2Q9ITEsdGhpcy5fdj12b2lkIDAsdGhpcy5faD0wLHRoaXMuX249ITF9LG4ucHJvdG90eXBlPXQoIi4vX3JlZGVmaW5lLWFsbCIpKGoucHJvdG90eXBlLHt0aGVuOmZ1bmN0aW9uKHQsZSl7dmFyIHI9UCh2KHRoaXMsaikpO3JldHVybiByLm9rPSJmdW5jdGlvbiI9PXR5cGVvZiB0P3Q6ITAsci5mYWlsPSJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLHIuZG9tYWluPXg/Zy5kb21haW46dm9pZCAwLHRoaXMuX2MucHVzaChyKSx0aGlzLl9hJiZ0aGlzLl9hLnB1c2gociksdGhpcy5fcyYmVCh0aGlzLCExKSxyLnByb21pc2V9LCJjYXRjaCI6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsdCl9fSksUz1mdW5jdGlvbigpe3ZhciB0PW5ldyBuO3RoaXMucHJvbWlzZT10LHRoaXMucmVzb2x2ZT11KFIsdCwxKSx0aGlzLnJlamVjdD11KEYsdCwxKX0pLGYoZi5HK2YuVytmLkYqIWsse1Byb21pc2U6an0pLHQoIi4vX3NldC10by1zdHJpbmctdGFnIikoaixiKSx0KCIuL19zZXQtc3BlY2llcyIpKGIpLGk9dCgiLi9fY29yZSIpW2JdLGYoZi5TK2YuRiohayxiLHtyZWplY3Q6ZnVuY3Rpb24odCl7dmFyIGU9UCh0aGlzKSxyPWUucmVqZWN0O3JldHVybiByKHQpLGUucHJvbWlzZX19KSxmKGYuUytmLkYqKGN8fCFrKSxiLHtyZXNvbHZlOmZ1bmN0aW9uKHQpe2lmKHQgaW5zdGFuY2VvZiBqJiZPKHQuY29uc3RydWN0b3IsdGhpcykpcmV0dXJuIHQ7dmFyIGU9UCh0aGlzKSxyPWUucmVzb2x2ZTtyZXR1cm4gcih0KSxlLnByb21pc2V9fSksZihmLlMrZi5GKiEoayYmdCgiLi9faXRlci1kZXRlY3QiKShmdW5jdGlvbih0KXtqLmFsbCh0KVsiY2F0Y2giXSh3KX0pKSxiLHthbGw6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxyPVAoZSksbj1yLnJlc29sdmUsbz1yLnJlamVjdCxpPUUoZnVuY3Rpb24oKXt2YXIgcj1bXSxpPTAsYz0xO3AodCwhMSxmdW5jdGlvbih0KXt2YXIgcz1pKyssdT0hMTtyLnB1c2godm9pZCAwKSxjKyssZS5yZXNvbHZlKHQpLnRoZW4oZnVuY3Rpb24odCl7dXx8KHU9ITAscltzXT10LC0tY3x8bihyKSl9LG8pfSksLS1jfHxuKHIpfSk7cmV0dXJuIGkmJm8oaS5lcnJvciksci5wcm9taXNlfSxyYWNlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMscj1QKGUpLG49ci5yZWplY3Qsbz1FKGZ1bmN0aW9uKCl7cCh0LCExLGZ1bmN0aW9uKHQpe2UucmVzb2x2ZSh0KS50aGVuKHIucmVzb2x2ZSxuKX0pfSk7cmV0dXJuIG8mJm4oby5lcnJvciksci5wcm9taXNlfX0pfSx7Ii4vX2EtZnVuY3Rpb24iOjksIi4vX2FuLWluc3RhbmNlIjoxMSwiLi9fYW4tb2JqZWN0IjoxMiwiLi9fY2xhc3NvZiI6MTQsIi4vX2NvcmUiOjE2LCIuL19jdHgiOjE3LCIuL19leHBvcnQiOjIyLCIuL19mb3Itb2YiOjI0LCIuL19nbG9iYWwiOjI1LCIuL19pcy1vYmplY3QiOjMzLCIuL19pdGVyLWRldGVjdCI6MzcsIi4vX2xpYnJhcnkiOjQwLCIuL19taWNyb3Rhc2siOjQxLCIuL19yZWRlZmluZS1hbGwiOjUxLCIuL19zZXQtcHJvdG8iOjUzLCIuL19zZXQtc3BlY2llcyI6NTQsIi4vX3NldC10by1zdHJpbmctdGFnIjo1NSwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6NTgsIi4vX3Rhc2siOjYwLCIuL193a3MiOjY4fV0sNzQ6W2Z1bmN0aW9uKHQsZSxyKXsidXNlIHN0cmljdCI7dmFyIG49dCgiLi9fc3RyaW5nLWF0IikoITApO3QoIi4vX2l0ZXItZGVmaW5lIikoU3RyaW5nLCJTdHJpbmciLGZ1bmN0aW9uKHQpe3RoaXMuX3Q9U3RyaW5nKHQpLHRoaXMuX2k9MH0sZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuX3Qscj10aGlzLl9pO3JldHVybiByPj1lLmxlbmd0aD97dmFsdWU6dm9pZCAwLGRvbmU6ITB9Oih0PW4oZSxyKSx0aGlzLl9pKz10Lmxlbmd0aCx7dmFsdWU6dCxkb25lOiExfSl9KX0seyIuL19pdGVyLWRlZmluZSI6MzYsIi4vX3N0cmluZy1hdCI6NTl9XSw3NTpbZnVuY3Rpb24odCxlLHIpe3QoIi4vZXM2LmFycmF5Lml0ZXJhdG9yIik7Zm9yKHZhciBuPXQoIi4vX2dsb2JhbCIpLG89dCgiLi9faGlkZSIpLGk9dCgiLi9faXRlcmF0b3JzIiksYz10KCIuL193a3MiKSgidG9TdHJpbmdUYWciKSxzPVsiTm9kZUxpc3QiLCJET01Ub2tlbkxpc3QiLCJNZWRpYUxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIkNTU1J1bGVMaXN0Il0sdT0wOzU+dTt1Kyspe3ZhciBhPXNbdV0sZj1uW2FdLF89ZiYmZi5wcm90b3R5cGU7XyYmIV9bY10mJm8oXyxjLGEpLGlbYV09aS5BcnJheX19LHsiLi9fZ2xvYmFsIjoyNSwiLi9faGlkZSI6MjcsIi4vX2l0ZXJhdG9ycyI6MzksIi4vX3drcyI6NjgsIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjo3MH1dLDc2OltmdW5jdGlvbih0LGUscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OnsiZGVmYXVsdCI6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPXQoIi4vaHlwZXJ0eS1kaXNjb3ZlcnkvSHlwZXJ0eURpc2NvdmVyeSIpLGk9bihvKTtyWyJkZWZhdWx0Il09aVsiZGVmYXVsdCJdLGUuZXhwb3J0cz1yWyJkZWZhdWx0Il19LHsiLi9oeXBlcnR5LWRpc2NvdmVyeS9IeXBlcnR5RGlzY292ZXJ5Ijo3N31dLDc3OltmdW5jdGlvbih0LGUscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OnsiZGVmYXVsdCI6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPXQoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIiksaT1uKG8pLGM9dCgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIikscz1uKGMpLHU9dCgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksYT1uKHUpLGY9dCgiLi4vdXRpbHMvdXRpbHMiKSxfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLHIpeygwLHNbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgbj10aGlzO24ubWVzc2FnZUJ1cz1yLG4uZG9tYWluPSgwLGYuZGl2aWRlVVJMKShlKS5kb21haW4sbi5kaXNjb3ZlcnlVUkw9ZX1yZXR1cm4oMCxhWyJkZWZhdWx0Il0pKHQsW3trZXk6ImRpc2NvdmVyRGF0YU9iamVjdFBlck5hbWUiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcyxuPXZvaWQgMDtuPWU/ZTpyLmRvbWFpbjt2YXIgbz17dHlwZToicmVhZCIsZnJvbTpyLmRpc2NvdmVyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIituKyIvIixib2R5OntyZXNvdXJjZToiZGF0YU9iamVjdDovLyIrdH19O3JldHVybiBuZXcgaVsiZGVmYXVsdCJdKGZ1bmN0aW9uKHQsZSl7ci5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG8sZnVuY3Rpb24ocil7dmFyIG49ci5ib2R5LnZhbHVlLnVybDtuP3Qobik6ZSgiRGF0YU9iamVjdCBuYW1lIGRvZXMgbm90IGV4aXN0Iil9KX0pfX0se2tleToiZGlzY292ZXJIeXBlcnR5UGVyVXNlciIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzLG49dm9pZCAwO249ZT9lOnIuZG9tYWluO3ZhciBvPSJ1c2VyOi8vIit0LnN1YnN0cmluZyh0LmluZGV4T2YoIkAiKSsxLHQubGVuZ3RoKSsiLyIrdC5zdWJzdHJpbmcoMCx0LmluZGV4T2YoIkAiKSksYz17dHlwZToicmVhZCIsZnJvbTpyLmRpc2NvdmVyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIituKyIvIixib2R5OntyZXNvdXJjZTpvfX07cmV0dXJuIGNvbnNvbGUubG9nKCJNZXNzYWdlOiAiLGMsbixvKSxuZXcgaVsiZGVmYXVsdCJdKGZ1bmN0aW9uKGUsbil7ci5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGMsZnVuY3Rpb24ocil7Y29uc29sZS5sb2coIm1lc3NhZ2UgcmVwbHkiLHIpO3ZhciBvPXZvaWQgMCxpPXZvaWQgMCxjPXZvaWQgMCxzPXIuYm9keS52YWx1ZTtmb3IobyBpbiBzKWlmKHZvaWQgMCE9PXNbb10ubGFzdE1vZGlmaWVkKWlmKHZvaWQgMD09PWkpaT1uZXcgRGF0ZShzW29dLmxhc3RNb2RpZmllZCksYz1vO2Vsc2V7dmFyIHU9bmV3IERhdGUoc1tvXS5sYXN0TW9kaWZpZWQpO2kuZ2V0VGltZSgpPHUuZ2V0VGltZSgpJiYoaT11LGM9byl9Y29uc29sZS5sb2coIkxhc3QgSHlwZXJ0eTogIixjLGkpO3ZhciBhPWM7aWYodm9pZCAwPT09YSlyZXR1cm4gbigiVXNlciBIeXBlcnR5IG5vdCBmb3VuZCIpO3ZhciBmPXtpZDp0LGRlc2NyaXB0b3I6c1thXS5kZXNjcmlwdG9yLGh5cGVydHlVUkw6YX07Y29uc29sZS5sb2coIj09PT4gaHlwZXJ0eURpc2NvdmVyeSBtZXNzYWdlQnVuZGxlOiAiLGYpLGUoZil9KX0pfX1dKSx0fSgpO3JbImRlZmF1bHQiXT1fLGUuZXhwb3J0cz1yWyJkZWZhdWx0Il19LHsiLi4vdXRpbHMvdXRpbHMiOjc4LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjo0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjV9XSw3ODpbZnVuY3Rpb24odCxlLHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ImRlZmF1bHQiOnR9fWZ1bmN0aW9uIG8odCl7dmFyIGU9LyhbYS16QS1aLV0qKTpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1wrfiM9XC9dKikvZ2kscj0iJDEsJDIsJDMiLG49dC5yZXBsYWNlKGUscikuc3BsaXQoIiwiKTtuWzBdPT09dCYmKG5bMF09Imh0dHBzIixuWzFdPXQpO3ZhciBvPXt0eXBlOm5bMF0sZG9tYWluOm5bMV0saWRlbnRpdHk6blsyXX07cmV0dXJuIG99ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdD9KU09OLnBhcnNlKCgwLHNbImRlZmF1bHQiXSkodCkpOnZvaWQgMH1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGM9dCgiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Iikscz1uKGMpO3IuZGl2aWRlVVJMPW8sci5kZWVwQ2xvbmU9aX0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjF9XX0se30sWzc2XSkoNzYpfSk7Cn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQp9LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8NCg0KLy8gRGlzdHJpYnV0aW9uIGZpbGUgZm9yIFN5bmNoZXIuanMgDQovLyB2ZXJzaW9uOiAwLjIuMA0KDQohZnVuY3Rpb24oZSl7aWYoIm9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciB0O3Q9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLHQuU3luY2hlcj1lKCl9fShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBlKHQscixuKXtmdW5jdGlvbiBvKHMsYyl7aWYoIXJbc10pe2lmKCF0W3NdKXt2YXIgYT0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighYyYmYSlyZXR1cm4gYShzLCEwKTtpZihpKXJldHVybiBpKHMsITApO3ZhciB1PW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK3MrIiciKTt0aHJvdyB1LmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLHV9dmFyIGw9cltzXT17ZXhwb3J0czp7fX07dFtzXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgcj10W3NdWzFdW2VdO3JldHVybiBvKHI/cjplKX0sbCxsLmV4cG9ydHMsZSx0LHIsbil9cmV0dXJuIHJbc10uZXhwb3J0c31mb3IodmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUscz0wO3M8bi5sZW5ndGg7cysrKW8obltzXSk7cmV0dXJuIG99KHsxOltmdW5jdGlvbihlLHQscil7T2JqZWN0Lm9ic2VydmUmJiFBcnJheS5vYnNlcnZlJiZmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgcj1lLmdldE5vdGlmaWVyLG49InBlcmZvcm1DaGFuZ2UiLG89Il9vcmlnaW5hbCIsaT0ic3BsaWNlIixzPXtwdXNoOmZ1bmN0aW9uIGEoZSl7dmFyIHQ9YXJndW1lbnRzLHM9YVtvXS5hcHBseSh0aGlzLHQpO3JldHVybiByKHRoaXMpW25dKGksZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6cy10Lmxlbmd0aCxhZGRlZENvdW50OnQubGVuZ3RoLHJlbW92ZWQ6W119fSksc30sdW5zaGlmdDpmdW5jdGlvbiB1KGUpe3ZhciB0PWFyZ3VtZW50cyxzPXVbb10uYXBwbHkodGhpcyx0KTtyZXR1cm4gcih0aGlzKVtuXShpLGZ1bmN0aW9uKCl7cmV0dXJue2luZGV4OjAsYWRkZWRDb3VudDp0Lmxlbmd0aCxyZW1vdmVkOltdfX0pLHN9LHBvcDpmdW5jdGlvbiBsKCl7dmFyIGU9dGhpcy5sZW5ndGgsdD1sW29dLmNhbGwodGhpcyk7cmV0dXJuIHRoaXMubGVuZ3RoIT09ZSYmcih0aGlzKVtuXShpLGZ1bmN0aW9uKCl7cmV0dXJue2luZGV4OnRoaXMubGVuZ3RoLGFkZGVkQ291bnQ6MCxyZW1vdmVkOlt0XX19LHRoaXMpLHR9LHNoaWZ0OmZ1bmN0aW9uIGYoKXt2YXIgZT10aGlzLmxlbmd0aCx0PWZbb10uY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5sZW5ndGghPT1lJiZyKHRoaXMpW25dKGksZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6MCxhZGRlZENvdW50OjAscmVtb3ZlZDpbdF19fSx0aGlzKSx0fSxzcGxpY2U6ZnVuY3Rpb24gZChlLHQpe3ZhciBzPWFyZ3VtZW50cyxjPWRbb10uYXBwbHkodGhpcyxzKTtyZXR1cm4oYy5sZW5ndGh8fHMubGVuZ3RoPjIpJiZyKHRoaXMpW25dKGksZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6ZSxhZGRlZENvdW50OnMubGVuZ3RoLTIscmVtb3ZlZDpjfX0sdGhpcyksY319O2Zvcih2YXIgYyBpbiBzKXNbY11bb109dC5wcm90b3R5cGVbY10sdC5wcm90b3R5cGVbY109c1tjXTt0Lm9ic2VydmU9ZnVuY3Rpb24odCxyKXtyZXR1cm4gZS5vYnNlcnZlKHQscixbImFkZCIsInVwZGF0ZSIsImRlbGV0ZSIsaV0pfSx0LnVub2JzZXJ2ZT1lLnVub2JzZXJ2ZX0oT2JqZWN0LEFycmF5KX0se31dLDI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiOjE4fV0sMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiOjE5fV0sNDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjIwfV0sNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjIxfV0sNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6MjJ9XSw3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIjoyM31dLDg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiOjI0fV0sOTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UiOjI1fV0sMTA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbCI6MjZ9XSwxMTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIjoyN31dLDEyOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3IuX19lc01vZHVsZT0hMCxyWyJkZWZhdWx0Il09ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX19LHt9XSwxMzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSIpLGk9bihvKTtyWyJkZWZhdWx0Il09ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsInZhbHVlImluIG4mJihuLndyaXRhYmxlPSEwKSwoMCxpWyJkZWZhdWx0Il0pKGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Ijo0fV0sMTQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksaT1uKG8pLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiKSxjPW4ocyk7clsiZGVmYXVsdCJdPWZ1bmN0aW9uIGEoZSx0LHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBuPSgwLGNbImRlZmF1bHQiXSkoZSx0KTtpZih2b2lkIDA9PT1uKXt2YXIgbz0oMCxpWyJkZWZhdWx0Il0pKGUpO3JldHVybiBudWxsPT09bz92b2lkIDA6YShvLHQscil9aWYoInZhbHVlImluIG4pcmV0dXJuIG4udmFsdWU7dmFyIHM9bi5nZXQ7aWYodm9pZCAwIT09cylyZXR1cm4gcy5jYWxsKHIpfX0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI6NSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo2fV0sMTU6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIiksaT1uKG8pLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUiKSxjPW4ocyksYT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mIiksdT1uKGEpO3JbImRlZmF1bHQiXT1mdW5jdGlvbihlLHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrKCJ1bmRlZmluZWQiPT10eXBlb2YgdD8idW5kZWZpbmVkIjooMCx1WyJkZWZhdWx0Il0pKHQpKSk7ZS5wcm90b3R5cGU9KDAsY1siZGVmYXVsdCJdKSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGlbImRlZmF1bHQiXT8oMCxpWyJkZWZhdWx0Il0pKGUsdCk6ZS5fX3Byb3RvX189dCl9fSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlIjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiOjgsImJhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YiOjE3fV0sMTY6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZiIpLGk9bihvKTtyWyJkZWZhdWx0Il09ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiF0fHwib2JqZWN0IiE9PSgidW5kZWZpbmVkIj09dHlwZW9mIHQ/InVuZGVmaW5lZCI6KDAsaVsiZGVmYXVsdCJdKSh0KSkmJiJmdW5jdGlvbiIhPXR5cGVvZiB0P2U6dH19LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZiI6MTd9XSwxNzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIiksaT1uKG8pLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbCIpLGM9bihzKSxhPSJmdW5jdGlvbiI9PXR5cGVvZiBjWyJkZWZhdWx0Il0mJiJzeW1ib2wiPT10eXBlb2YgaVsiZGVmYXVsdCJdP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBjWyJkZWZhdWx0Il0mJmUuY29uc3RydWN0b3I9PT1jWyJkZWZhdWx0Il0/InN5bWJvbCI6dHlwZW9mIGV9O3JbImRlZmF1bHQiXT0iZnVuY3Rpb24iPT10eXBlb2YgY1siZGVmYXVsdCJdJiYic3ltYm9sIj09PWEoaVsiZGVmYXVsdCJdKT9mdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIj09dHlwZW9mIGU/InVuZGVmaW5lZCI6YShlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBjWyJkZWZhdWx0Il0mJmUuY29uc3RydWN0b3I9PT1jWyJkZWZhdWx0Il0/InN5bWJvbCI6InVuZGVmaW5lZCI9PXR5cGVvZiBlPyJ1bmRlZmluZWQiOmEoZSl9fSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wiOjEwLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIjoxMX1dLDE4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLG89bi5KU09OfHwobi5KU09OPXtzdHJpbmdpZnk6SlNPTi5zdHJpbmdpZnl9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uc3RyaW5naWZ5LmFwcGx5KG8sYXJndW1lbnRzKX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzV9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiKTt2YXIgbj1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNyZWF0ZShlLHQpfX0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozNSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZSI6MTAwfV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Iik7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmRlZmluZVByb3BlcnR5KGUsdCxyKX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzUsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOjEwMX1dLDIxOltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciIpO3ZhciBuPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3Q7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCl9fSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM1LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjoxMDJ9XSwyMjpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Z9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzUsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mIjoxMDN9XSwyMzpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3Qua2V5c30seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozNSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMiOjEwNH1dLDI0OltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5zZXRQcm90b3R5cGVPZn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozNSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiOjEwNX1dLDI1OltmdW5jdGlvbihlLHQscil7ZSgiLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyIpLGUoIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciIpLGUoIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSIpLGUoIi4uL21vZHVsZXMvZXM2LnByb21pc2UiKSx0LmV4cG9ydHM9ZSgiLi4vbW9kdWxlcy9fY29yZSIpLlByb21pc2V9LHsiLi4vbW9kdWxlcy9fY29yZSI6MzUsIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciOjEwNiwiLi4vbW9kdWxlcy9lczYucHJvbWlzZSI6MTA3LCIuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjEwOCwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjoxMTJ9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCIpLGUoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciKSxlKCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IiKSxlKCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZSIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuU3ltYm9sfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM1LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjoxMDYsIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCI6MTA5LCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IiOjExMCwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjExMX1dLDI3OltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIiksZSgiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX3drcy1leHQiKS5mKCJpdGVyYXRvciIpfSx7Ii4uLy4uL21vZHVsZXMvX3drcy1leHQiOjk2LCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjEwOCwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjoxMTJ9XSwyODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIGZ1bmN0aW9uISIpO3JldHVybiBlfX0se31dLDI5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKCl7fX0se31dLDMwOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKCEoZSBpbnN0YW5jZW9mIHQpfHx2b2lkIDAhPT1uJiZuIGluIGUpdGhyb3cgVHlwZUVycm9yKHIrIjogaW5jb3JyZWN0IGludm9jYXRpb24hIik7cmV0dXJuIGV9fSx7fV0sMzE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW4oZSkpdGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgYW4gb2JqZWN0ISIpO3JldHVybiBlfX0seyIuL19pcy1vYmplY3QiOjU0fV0sMzI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pb2JqZWN0Iiksbz1lKCIuL190by1sZW5ndGgiKSxpPWUoIi4vX3RvLWluZGV4Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIscyl7dmFyIGMsYT1uKHQpLHU9byhhLmxlbmd0aCksbD1pKHMsdSk7aWYoZSYmciE9cil7Zm9yKDt1Pmw7KWlmKGM9YVtsKytdLGMhPWMpcmV0dXJuITB9ZWxzZSBmb3IoO3U+bDtsKyspaWYoKGV8fGwgaW4gYSkmJmFbbF09PT1yKXJldHVybiBlfHxsfHwwO3JldHVybiFlJiYtMX19fSx7Ii4vX3RvLWluZGV4Ijo4OCwiLi9fdG8taW9iamVjdCI6OTAsIi4vX3RvLWxlbmd0aCI6OTF9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2NvZiIpLG89ZSgiLi9fd2tzIikoInRvU3RyaW5nVGFnIiksaT0iQXJndW1lbnRzIj09bihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpLHM9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGVbdF19Y2F0Y2gocil7fX07dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0LHIsYztyZXR1cm4gdm9pZCAwPT09ZT8iVW5kZWZpbmVkIjpudWxsPT09ZT8iTnVsbCI6InN0cmluZyI9PXR5cGVvZihyPXModD1PYmplY3QoZSksbykpP3I6aT9uKHQpOiJPYmplY3QiPT0oYz1uKHQpKSYmImZ1bmN0aW9uIj09dHlwZW9mIHQuY2FsbGVlPyJBcmd1bWVudHMiOmN9fSx7Ii4vX2NvZiI6MzQsIi4vX3drcyI6OTd9XSwzNDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9LnRvU3RyaW5nO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbi5jYWxsKGUpLnNsaWNlKDgsLTEpfX0se31dLDM1OltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPXt2ZXJzaW9uOiIyLjMuMCJ9OyJudW1iZXIiPT10eXBlb2YgX19lJiYoX19lPW4pfSx7fV0sMzY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19hLWZ1bmN0aW9uIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHZvaWQgMD09PXQpcmV0dXJuIGU7c3dpdGNoKHIpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGUuY2FsbCh0LHIpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LHIsbil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocixuLG8pe3JldHVybiBlLmNhbGwodCxyLG4sbyl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19fSx7Ii4vX2EtZnVuY3Rpb24iOjI4fV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT1lKXRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gICIrZSk7cmV0dXJuIGV9fSx7fV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9IWUoIi4vX2ZhaWxzIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSx7Ii4vX2ZhaWxzIjo0M31dLDM5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXMtb2JqZWN0Iiksbz1lKCIuL19nbG9iYWwiKS5kb2N1bWVudCxpPW4obykmJm4oby5jcmVhdGVFbGVtZW50KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGk/by5jcmVhdGVFbGVtZW50KGUpOnt9fX0seyIuL19nbG9iYWwiOjQ1LCIuL19pcy1vYmplY3QiOjU0fV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZiIuc3BsaXQoIiwiKX0se31dLDQxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fb2JqZWN0LWtleXMiKSxvPWUoIi4vX29iamVjdC1nb3BzIiksaT1lKCIuL19vYmplY3QtcGllIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4oZSkscj1vLmY7aWYocilmb3IodmFyIHMsYz1yKGUpLGE9aS5mLHU9MDtjLmxlbmd0aD51OylhLmNhbGwoZSxzPWNbdSsrXSkmJnQucHVzaChzKTtyZXR1cm4gdH19LHsiLi9fb2JqZWN0LWdvcHMiOjcxLCIuL19vYmplY3Qta2V5cyI6NzQsIi4vX29iamVjdC1waWUiOjc1fV0sNDI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19nbG9iYWwiKSxvPWUoIi4vX2NvcmUiKSxpPWUoIi4vX2N0eCIpLHM9ZSgiLi9faGlkZSIpLGM9InByb3RvdHlwZSIsYT1mdW5jdGlvbihlLHQscil7dmFyIHUsbCxmLGQ9ZSZhLkYscD1lJmEuRyxfPWUmYS5TLGI9ZSZhLlAsaD1lJmEuQix5PWUmYS5XLHY9cD9vOm9bdF18fChvW3RdPXt9KSxqPXZbY10sbT1wP246Xz9uW3RdOihuW3RdfHx7fSlbY107cCYmKHI9dCk7Zm9yKHUgaW4gcilsPSFkJiZtJiZ2b2lkIDAhPT1tW3VdLGwmJnUgaW4gdnx8KGY9bD9tW3VdOnJbdV0sdlt1XT1wJiYiZnVuY3Rpb24iIT10eXBlb2YgbVt1XT9yW3VdOmgmJmw/aShmLG4pOnkmJm1bdV09PWY/ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24odCxyLG4pe2lmKHRoaXMgaW5zdGFuY2VvZiBlKXtzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuZXcgZTtjYXNlIDE6cmV0dXJuIG5ldyBlKHQpO2Nhc2UgMjpyZXR1cm4gbmV3IGUodCxyKX1yZXR1cm4gbmV3IGUodCxyLG4pfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cmV0dXJuIHRbY109ZVtjXSx0fShmKTpiJiYiZnVuY3Rpb24iPT10eXBlb2YgZj9pKEZ1bmN0aW9uLmNhbGwsZik6ZixiJiYoKHYudmlydHVhbHx8KHYudmlydHVhbD17fSkpW3VdPWYsZSZhLlImJmomJiFqW3VdJiZzKGosdSxmKSkpfTthLkY9MSxhLkc9MixhLlM9NCxhLlA9OCxhLkI9MTYsYS5XPTMyLGEuVT02NCxhLlI9MTI4LHQuZXhwb3J0cz1hfSx7Ii4vX2NvcmUiOjM1LCIuL19jdHgiOjM2LCIuL19nbG9iYWwiOjQ1LCIuL19oaWRlIjo0N31dLDQzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaCh0KXtyZXR1cm4hMH19fSx7fV0sNDQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jdHgiKSxvPWUoIi4vX2l0ZXItY2FsbCIpLGk9ZSgiLi9faXMtYXJyYXktaXRlciIpLHM9ZSgiLi9fYW4tb2JqZWN0IiksYz1lKCIuL190by1sZW5ndGgiKSxhPWUoIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLHUsbCl7dmFyIGYsZCxwLF89bD9mdW5jdGlvbigpe3JldHVybiBlfTphKGUpLGI9bihyLHUsdD8yOjEpLGg9MDtpZigiZnVuY3Rpb24iIT10eXBlb2YgXyl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBpdGVyYWJsZSEiKTtpZihpKF8pKWZvcihmPWMoZS5sZW5ndGgpO2Y+aDtoKyspdD9iKHMoZD1lW2hdKVswXSxkWzFdKTpiKGVbaF0pO2Vsc2UgZm9yKHA9Xy5jYWxsKGUpOyEoZD1wLm5leHQoKSkuZG9uZTspbyhwLGIsZC52YWx1ZSx0KX19LHsiLi9fYW4tb2JqZWN0IjozMSwiLi9fY3R4IjozNiwiLi9faXMtYXJyYXktaXRlciI6NTIsIi4vX2l0ZXItY2FsbCI6NTUsIi4vX3RvLWxlbmd0aCI6OTEsIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjo5OH1dLDQ1OltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpOyJudW1iZXIiPT10eXBlb2YgX19nJiYoX19nPW4pfSx7fV0sNDY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCl9fSx7fV0sNDc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKSxvPWUoIi4vX3Byb3BlcnR5LWRlc2MiKTt0LmV4cG9ydHM9ZSgiLi9fZGVzY3JpcHRvcnMiKT9mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZihlLHQsbygxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LHsiLi9fZGVzY3JpcHRvcnMiOjM4LCIuL19vYmplY3QtZHAiOjY2LCIuL19wcm9wZXJ0eS1kZXNjIjo3N31dLDQ4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoIi4vX2dsb2JhbCIpLmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9LHsiLi9fZ2xvYmFsIjo0NX1dLDQ5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKCIuL19kZXNjcmlwdG9ycyIpJiYhZSgiLi9fZmFpbHMiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSgiLi9fZG9tLWNyZWF0ZSIpKCJkaXYiKSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0seyIuL19kZXNjcmlwdG9ycyI6MzgsIi4vX2RvbS1jcmVhdGUiOjM5LCIuL19mYWlscyI6NDN9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIG49dm9pZCAwPT09cjtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbj9lKCk6ZS5jYWxsKHIpO2Nhc2UgMTpyZXR1cm4gbj9lKHRbMF0pOmUuY2FsbChyLHRbMF0pO2Nhc2UgMjpyZXR1cm4gbj9lKHRbMF0sdFsxXSk6ZS5jYWxsKHIsdFswXSx0WzFdKTtjYXNlIDM6cmV0dXJuIG4/ZSh0WzBdLHRbMV0sdFsyXSk6ZS5jYWxsKHIsdFswXSx0WzFdLHRbMl0pO2Nhc2UgNDpyZXR1cm4gbj9lKHRbMF0sdFsxXSx0WzJdLHRbM10pOmUuY2FsbChyLHRbMF0sdFsxXSx0WzJdLHRbM10pfXJldHVybiBlLmFwcGx5KHIsdCl9fSx7fV0sNTE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jb2YiKTt0LmV4cG9ydHM9T2JqZWN0KCJ6IikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVybiJTdHJpbmciPT1uKGUpP2Uuc3BsaXQoIiIpOk9iamVjdChlKX19LHsiLi9fY29mIjozNH1dLDUyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXRlcmF0b3JzIiksbz1lKCIuL193a3MiKSgiaXRlcmF0b3IiKSxpPUFycmF5LnByb3RvdHlwZTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PWUmJihuLkFycmF5PT09ZXx8aVtvXT09PWUpfX0seyIuL19pdGVyYXRvcnMiOjYwLCIuL193a3MiOjk3fV0sNTM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jb2YiKTt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIkFycmF5Ij09bihlKX19LHsiLi9fY29mIjozNH1dLDU0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZT9udWxsIT09ZToiZnVuY3Rpb24iPT10eXBlb2YgZX19LHt9XSw1NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2FuLW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixvKXt0cnl7cmV0dXJuIG8/dChuKHIpWzBdLHJbMV0pOnQocil9Y2F0Y2goaSl7dmFyIHM9ZVsicmV0dXJuIl07dGhyb3cgdm9pZCAwIT09cyYmbihzLmNhbGwoZSkpLGl9fX0seyIuL19hbi1vYmplY3QiOjMxfV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fb2JqZWN0LWNyZWF0ZSIpLG89ZSgiLi9fcHJvcGVydHktZGVzYyIpLGk9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxzPXt9O2UoIi4vX2hpZGUiKShzLGUoIi4vX3drcyIpKCJpdGVyYXRvciIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSx0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UucHJvdG90eXBlPW4ocyx7bmV4dDpvKDEscil9KSxpKGUsdCsiIEl0ZXJhdG9yIil9fSx7Ii4vX2hpZGUiOjQ3LCIuL19vYmplY3QtY3JlYXRlIjo2NSwiLi9fcHJvcGVydHktZGVzYyI6NzcsIi4vX3NldC10by1zdHJpbmctdGFnIjo4MiwiLi9fd2tzIjo5N31dLDU3OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX2xpYnJhcnkiKSxvPWUoIi4vX2V4cG9ydCIpLGk9ZSgiLi9fcmVkZWZpbmUiKSxzPWUoIi4vX2hpZGUiKSxjPWUoIi4vX2hhcyIpLGE9ZSgiLi9faXRlcmF0b3JzIiksdT1lKCIuL19pdGVyLWNyZWF0ZSIpLGw9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxmPWUoIi4vX29iamVjdC1ncG8iKSxkPWUoIi4vX3drcyIpKCJpdGVyYXRvciIpLHA9IShbXS5rZXlzJiYibmV4dCJpbltdLmtleXMoKSksXz0iQEBpdGVyYXRvciIsYj0ia2V5cyIsaD0idmFsdWVzIix5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscix2LGosbSxnKXt1KHIsdCx2KTt2YXIgdyxPLGsseD1mdW5jdGlvbihlKXtpZighcCYmZSBpbiBUKXJldHVybiBUW2VdO3N3aXRjaChlKXtjYXNlIGI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9O2Nhc2UgaDpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fSxDPXQrIiBJdGVyYXRvciIsRT1qPT1oLFM9ITEsVD1lLnByb3RvdHlwZSxNPVRbZF18fFRbX118fGomJlRbal0sUj1NfHx4KGopLE49aj9FP3goImVudHJpZXMiKTpSOnZvaWQgMCxQPSJBcnJheSI9PXQ/VC5lbnRyaWVzfHxNOk07aWYoUCYmKGs9ZihQLmNhbGwobmV3IGUpKSxrIT09T2JqZWN0LnByb3RvdHlwZSYmKGwoayxDLCEwKSxufHxjKGssZCl8fHMoayxkLHkpKSksRSYmTSYmTS5uYW1lIT09aCYmKFM9ITAsUj1mdW5jdGlvbigpe3JldHVybiBNLmNhbGwodGhpcyl9KSxuJiYhZ3x8IXAmJiFTJiZUW2RdfHxzKFQsZCxSKSxhW3RdPVIsYVtDXT15LGopaWYodz17dmFsdWVzOkU/Ujp4KGgpLGtleXM6bT9SOngoYiksZW50cmllczpOfSxnKWZvcihPIGluIHcpTyBpbiBUfHxpKFQsTyx3W09dKTtlbHNlIG8oby5QK28uRioocHx8UyksdCx3KTtyZXR1cm4gd319LHsiLi9fZXhwb3J0Ijo0MiwiLi9faGFzIjo0NiwiLi9faGlkZSI6NDcsIi4vX2l0ZXItY3JlYXRlIjo1NiwiLi9faXRlcmF0b3JzIjo2MCwiLi9fbGlicmFyeSI6NjIsIi4vX29iamVjdC1ncG8iOjcyLCIuL19yZWRlZmluZSI6NzksIi4vX3NldC10by1zdHJpbmctdGFnIjo4MiwiLi9fd2tzIjo5N31dLDU4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fd2tzIikoIml0ZXJhdG9yIiksbz0hMTt0cnl7dmFyIGk9WzddW25dKCk7aVsicmV0dXJuIl09ZnVuY3Rpb24oKXtvPSEwfSxBcnJheS5mcm9tKGksZnVuY3Rpb24oKXt0aHJvdyAyfSl9Y2F0Y2gocyl7fXQuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCF0JiYhbylyZXR1cm4hMTt2YXIgcj0hMTt0cnl7dmFyIGk9WzddLHM9aVtuXSgpO3MubmV4dD1mdW5jdGlvbigpe3JldHVybntkb25lOnI9ITB9fSxpW25dPWZ1bmN0aW9uKCl7cmV0dXJuIHN9LGUoaSl9Y2F0Y2goYyl7fXJldHVybiByfX0seyIuL193a3MiOjk3fV0sNTk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19fSx7fV0sNjA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e319LHt9XSw2MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzIiksbz1lKCIuL190by1pb2JqZWN0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLGk9byhlKSxzPW4oaSksYz1zLmxlbmd0aCxhPTA7Yz5hOylpZihpW3I9c1thKytdXT09PXQpcmV0dXJuIHJ9fSx7Ii4vX29iamVjdC1rZXlzIjo3NCwiLi9fdG8taW9iamVjdCI6OTB9XSw2MjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hMH0se31dLDYzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdWlkIikoIm1ldGEiKSxvPWUoIi4vX2lzLW9iamVjdCIpLGk9ZSgiLi9faGFzIikscz1lKCIuL19vYmplY3QtZHAiKS5mLGM9MCxhPU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LHU9IWUoIi4vX2ZhaWxzIikoZnVuY3Rpb24oKXtyZXR1cm4gYShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLGw9ZnVuY3Rpb24oZSl7cyhlLG4se3ZhbHVlOntpOiJPIisgKytjLHc6e319fSl9LGY9ZnVuY3Rpb24oZSx0KXtpZighbyhlKSlyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGU/ZTooInN0cmluZyI9PXR5cGVvZiBlPyJTIjoiUCIpK2U7aWYoIWkoZSxuKSl7aWYoIWEoZSkpcmV0dXJuIkYiO2lmKCF0KXJldHVybiJFIjtsKGUpfXJldHVybiBlW25dLml9LGQ9ZnVuY3Rpb24oZSx0KXtpZighaShlLG4pKXtpZighYShlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtsKGUpfXJldHVybiBlW25dLnd9LHA9ZnVuY3Rpb24oZSl7cmV0dXJuIHUmJl8uTkVFRCYmYShlKSYmIWkoZSxuKSYmbChlKSxlfSxfPXQuZXhwb3J0cz17S0VZOm4sTkVFRDohMSxmYXN0S2V5OmYsZ2V0V2VhazpkLG9uRnJlZXplOnB9fSx7Ii4vX2ZhaWxzIjo0MywiLi9faGFzIjo0NiwiLi9faXMtb2JqZWN0Ijo1NCwiLi9fb2JqZWN0LWRwIjo2NiwiLi9fdWlkIjo5NH1dLDY0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL190YXNrIikuc2V0LGk9bi5NdXRhdGlvbk9ic2VydmVyfHxuLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIscz1uLnByb2Nlc3MsYz1uLlByb21pc2UsYT0icHJvY2VzcyI9PWUoIi4vX2NvZiIpKHMpO3QuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlLHQscix1PWZ1bmN0aW9uKCl7dmFyIG4sbztmb3IoYSYmKG49cy5kb21haW4pJiZuLmV4aXQoKTtlOyl7bz1lLmZuLGU9ZS5uZXh0O3RyeXtvKCl9Y2F0Y2goaSl7dGhyb3cgZT9yKCk6dD12b2lkIDAsaX19dD12b2lkIDAsbiYmbi5lbnRlcigpfTtpZihhKXI9ZnVuY3Rpb24oKXtzLm5leHRUaWNrKHUpfTtlbHNlIGlmKGkpe3ZhciBsPSEwLGY9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiIpO25ldyBpKHUpLm9ic2VydmUoZix7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXtmLmRhdGE9bD0hbH19ZWxzZSBpZihjJiZjLnJlc29sdmUpe3ZhciBkPWMucmVzb2x2ZSgpO3I9ZnVuY3Rpb24oKXtkLnRoZW4odSl9fWVsc2Ugcj1mdW5jdGlvbigpe28uY2FsbChuLHUpfTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIG89e2ZuOm4sbmV4dDp2b2lkIDB9O3QmJih0Lm5leHQ9byksZXx8KGU9byxyKCkpLHQ9b319fSx7Ii4vX2NvZiI6MzQsIi4vX2dsb2JhbCI6NDUsIi4vX3Rhc2siOjg3fV0sNjU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19hbi1vYmplY3QiKSxvPWUoIi4vX29iamVjdC1kcHMiKSxpPWUoIi4vX2VudW0tYnVnLWtleXMiKSxzPWUoIi4vX3NoYXJlZC1rZXkiKSgiSUVfUFJPVE8iKSxjPWZ1bmN0aW9uKCl7fSxhPSJwcm90b3R5cGUiLHU9ZnVuY3Rpb24oKXt2YXIgdCxyPWUoIi4vX2RvbS1jcmVhdGUiKSgiaWZyYW1lIiksbj1pLmxlbmd0aCxvPSI+Ijtmb3Ioci5zdHlsZS5kaXNwbGF5PSJub25lIixlKCIuL19odG1sIikuYXBwZW5kQ2hpbGQociksci5zcmM9ImphdmFzY3JpcHQ6Iix0PXIuY29udGVudFdpbmRvdy5kb2N1bWVudCx0Lm9wZW4oKSx0LndyaXRlKCI8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PC9zY3JpcHQiK28pLHQuY2xvc2UoKSx1PXQuRjtuLS07KWRlbGV0ZSB1W2FdW2lbbl1dO3JldHVybiB1KCl9O3QuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiBudWxsIT09ZT8oY1thXT1uKGUpLHI9bmV3IGMsY1thXT1udWxsLHJbc109ZSk6cj11KCksdm9pZCAwPT09dD9yOm8ocix0KX19LHsiLi9fYW4tb2JqZWN0IjozMSwiLi9fZG9tLWNyZWF0ZSI6MzksIi4vX2VudW0tYnVnLWtleXMiOjQwLCIuL19odG1sIjo0OCwiLi9fb2JqZWN0LWRwcyI6NjcsIi4vX3NoYXJlZC1rZXkiOjgzfV0sNjY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19hbi1vYmplY3QiKSxvPWUoIi4vX2llOC1kb20tZGVmaW5lIiksaT1lKCIuL190by1wcmltaXRpdmUiKSxzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTtyLmY9ZSgiLi9fZGVzY3JpcHRvcnMiKT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdD1pKHQsITApLG4ociksbyl0cnl7cmV0dXJuIHMoZSx0LHIpfWNhdGNoKGMpe31pZigiZ2V0ImluIHJ8fCJzZXQiaW4gcil0aHJvdyBUeXBlRXJyb3IoIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkISIpO3JldHVybiJ2YWx1ZSJpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0seyIuL19hbi1vYmplY3QiOjMxLCIuL19kZXNjcmlwdG9ycyI6MzgsIi4vX2llOC1kb20tZGVmaW5lIjo0OSwiLi9fdG8tcHJpbWl0aXZlIjo5M31dLDY3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fb2JqZWN0LWRwIiksbz1lKCIuL19hbi1vYmplY3QiKSxpPWUoIi4vX29iamVjdC1rZXlzIik7dC5leHBvcnRzPWUoIi4vX2Rlc2NyaXB0b3JzIik/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24oZSx0KXtvKGUpO2Zvcih2YXIgcixzPWkodCksYz1zLmxlbmd0aCxhPTA7Yz5hOyluLmYoZSxyPXNbYSsrXSx0W3JdKTtyZXR1cm4gZX19LHsiLi9fYW4tb2JqZWN0IjozMSwiLi9fZGVzY3JpcHRvcnMiOjM4LCIuL19vYmplY3QtZHAiOjY2LCIuL19vYmplY3Qta2V5cyI6NzR9XSw2ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1waWUiKSxvPWUoIi4vX3Byb3BlcnR5LWRlc2MiKSxpPWUoIi4vX3RvLWlvYmplY3QiKSxzPWUoIi4vX3RvLXByaW1pdGl2ZSIpLGM9ZSgiLi9faGFzIiksYT1lKCIuL19pZTgtZG9tLWRlZmluZSIpLHU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtyLmY9ZSgiLi9fZGVzY3JpcHRvcnMiKT91OmZ1bmN0aW9uKGUsdCl7aWYoZT1pKGUpLHQ9cyh0LCEwKSxhKXRyeXtyZXR1cm4gdShlLHQpfWNhdGNoKHIpe31yZXR1cm4gYyhlLHQpP28oIW4uZi5jYWxsKGUsdCksZVt0XSk6dm9pZCAwfX0seyIuL19kZXNjcmlwdG9ycyI6MzgsIi4vX2hhcyI6NDYsIi4vX2llOC1kb20tZGVmaW5lIjo0OSwiLi9fb2JqZWN0LXBpZSI6NzUsIi4vX3Byb3BlcnR5LWRlc2MiOjc3LCIuL190by1pb2JqZWN0Ijo5MCwiLi9fdG8tcHJpbWl0aXZlIjo5M31dLDY5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdvcG4iKS5mLGk9e30udG9TdHJpbmcscz0ib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdLGM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBvKGUpfWNhdGNoKHQpe3JldHVybiBzLnNsaWNlKCl9fTt0LmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gcyYmIltvYmplY3QgV2luZG93XSI9PWkuY2FsbChlKT9jKGUpOm8obihlKSl9fSx7Ii4vX29iamVjdC1nb3BuIjo3MCwiLi9fdG8taW9iamVjdCI6OTB9XSw3MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzLWludGVybmFsIiksbz1lKCIuL19lbnVtLWJ1Zy1rZXlzIikuY29uY2F0KCJsZW5ndGgiLCJwcm90b3R5cGUiKTtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSx7Ii4vX2VudW0tYnVnLWtleXMiOjQwLCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NzN9XSw3MTpbZnVuY3Rpb24oZSx0LHIpe3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSx7fV0sNzI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19oYXMiKSxvPWUoIi4vX3RvLW9iamVjdCIpLGk9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpLHM9T2JqZWN0LnByb3RvdHlwZTt0LmV4cG9ydHM9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlKXtyZXR1cm4gZT1vKGUpLG4oZSxpKT9lW2ldOiJmdW5jdGlvbiI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yJiZlIGluc3RhbmNlb2YgZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLnByb3RvdHlwZTplIGluc3RhbmNlb2YgT2JqZWN0P3M6bnVsbH19LHsiLi9faGFzIjo0NiwiLi9fc2hhcmVkLWtleSI6ODMsIi4vX3RvLW9iamVjdCI6OTJ9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2hhcyIpLG89ZSgiLi9fdG8taW9iamVjdCIpLGk9ZSgiLi9fYXJyYXktaW5jbHVkZXMiKSghMSkscz1lKCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsYz1vKGUpLGE9MCx1PVtdO2ZvcihyIGluIGMpciE9cyYmbihjLHIpJiZ1LnB1c2gocik7Zm9yKDt0Lmxlbmd0aD5hOyluKGMscj10W2ErK10pJiYofmkodSxyKXx8dS5wdXNoKHIpKTtyZXR1cm4gdX19LHsiLi9fYXJyYXktaW5jbHVkZXMiOjMyLCIuL19oYXMiOjQ2LCIuL19zaGFyZWQta2V5Ijo4MywiLi9fdG8taW9iamVjdCI6OTB9XSw3NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzLWludGVybmFsIiksbz1lKCIuL19lbnVtLWJ1Zy1rZXlzIik7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0seyIuL19lbnVtLWJ1Zy1rZXlzIjo0MCwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjczfV0sNzU6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LHt9XSw3NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2V4cG9ydCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fZmFpbHMiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oby5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLHM9e307c1tlXT10KHIpLG4obi5TK24uRippKGZ1bmN0aW9uKCl7cigxKX0pLCJPYmplY3QiLHMpfX0seyIuL19jb3JlIjozNSwiLi9fZXhwb3J0Ijo0MiwiLi9fZmFpbHMiOjQzfV0sNzc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6dH19fSx7fV0sNzg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19oaWRlIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG8gaW4gdClyJiZlW29dP2Vbb109dFtvXTpuKGUsbyx0W29dKTtyZXR1cm4gZX19LHsiLi9faGlkZSI6NDd9XSw3OTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKCIuL19oaWRlIil9LHsiLi9faGlkZSI6NDd9XSw4MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpLG89ZSgiLi9fYW4tb2JqZWN0IiksaT1mdW5jdGlvbihlLHQpe2lmKG8oZSksIW4odCkmJm51bGwhPT10KXRocm93IFR5cGVFcnJvcih0KyI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhIil9O3QuZXhwb3J0cz17c2V0Ok9iamVjdC5zZXRQcm90b3R5cGVPZnx8KCJfX3Byb3RvX18iaW57fT9mdW5jdGlvbih0LHIsbil7dHJ5e249ZSgiLi9fY3R4IikoRnVuY3Rpb24uY2FsbCxlKCIuL19vYmplY3QtZ29wZCIpLmYoT2JqZWN0LnByb3RvdHlwZSwiX19wcm90b19fIikuc2V0LDIpLG4odCxbXSkscj0hKHQgaW5zdGFuY2VvZiBBcnJheSl9Y2F0Y2gobyl7cj0hMH1yZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gaShlLHQpLHI/ZS5fX3Byb3RvX189dDpuKGUsdCksZX19KHt9LCExKTp2b2lkIDApLGNoZWNrOml9fSx7Ii4vX2FuLW9iamVjdCI6MzEsIi4vX2N0eCI6MzYsIi4vX2lzLW9iamVjdCI6NTQsIi4vX29iamVjdC1nb3BkIjo2OH1dLDgxOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fb2JqZWN0LWRwIikscz1lKCIuL19kZXNjcmlwdG9ycyIpLGM9ZSgiLi9fd2tzIikoInNwZWNpZXMiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ImZ1bmN0aW9uIj09dHlwZW9mIG9bZV0/b1tlXTpuW2VdO3MmJnQmJiF0W2NdJiZpLmYodCxjLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9fSl9fSx7Ii4vX2NvcmUiOjM1LCIuL19kZXNjcmlwdG9ycyI6MzgsIi4vX2dsb2JhbCI6NDUsIi4vX29iamVjdC1kcCI6NjYsIi4vX3drcyI6OTd9XSw4MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1kcCIpLmYsbz1lKCIuL19oYXMiKSxpPWUoIi4vX3drcyIpKCJ0b1N0cmluZ1RhZyIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZSYmIW8oZT1yP2U6ZS5wcm90b3R5cGUsaSkmJm4oZSxpLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dH0pfX0seyIuL19oYXMiOjQ2LCIuL19vYmplY3QtZHAiOjY2LCIuL193a3MiOjk3fV0sODM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19zaGFyZWQiKSgia2V5cyIpLG89ZSgiLi9fdWlkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1vKGUpKX19LHsiLi9fc2hhcmVkIjo4NCwiLi9fdWlkIjo5NH1dLDg0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz0iX19jb3JlLWpzX3NoYXJlZF9fIixpPW5bb118fChuW29dPXt9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlbZV18fChpW2VdPXt9KX19LHsiLi9fZ2xvYmFsIjo0NX1dLDg1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYW4tb2JqZWN0Iiksbz1lKCIuL19hLWZ1bmN0aW9uIiksaT1lKCIuL193a3MiKSgic3BlY2llcyIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLHM9bihlKS5jb25zdHJ1Y3RvcjtyZXR1cm4gdm9pZCAwPT09c3x8dm9pZCAwPT0ocj1uKHMpW2ldKT90Om8ocil9fSx7Ii4vX2EtZnVuY3Rpb24iOjI4LCIuL19hbi1vYmplY3QiOjMxLCIuL193a3MiOjk3fV0sODY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pbnRlZ2VyIiksbz1lKCIuL19kZWZpbmVkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBpLHMsYz1TdHJpbmcobyh0KSksYT1uKHIpLHU9Yy5sZW5ndGg7cmV0dXJuIDA+YXx8YT49dT9lPyIiOnZvaWQgMDooaT1jLmNoYXJDb2RlQXQoYSksNTUyOTY+aXx8aT41NjMxOXx8YSsxPT09dXx8KHM9Yy5jaGFyQ29kZUF0KGErMSkpPDU2MzIwfHxzPjU3MzQzP2U/Yy5jaGFyQXQoYSk6aTplP2Muc2xpY2UoYSxhKzIpOihpLTU1Mjk2PDwxMCkrKHMtNTYzMjApKzY1NTM2KX19fSx7Ii4vX2RlZmluZWQiOjM3LCIuL190by1pbnRlZ2VyIjo4OX1dLDg3OltmdW5jdGlvbihlLHQscil7dmFyIG4sbyxpLHM9ZSgiLi9fY3R4IiksYz1lKCIuL19pbnZva2UiKSxhPWUoIi4vX2h0bWwiKSx1PWUoIi4vX2RvbS1jcmVhdGUiKSxsPWUoIi4vX2dsb2JhbCIpLGY9bC5wcm9jZXNzLGQ9bC5zZXRJbW1lZGlhdGUscD1sLmNsZWFySW1tZWRpYXRlLF89bC5NZXNzYWdlQ2hhbm5lbCxiPTAsaD17fSx5PSJvbnJlYWR5c3RhdGVjaGFuZ2UiLHY9ZnVuY3Rpb24oKXt2YXIgZT0rdGhpcztpZihoLmhhc093blByb3BlcnR5KGUpKXt2YXIgdD1oW2VdO2RlbGV0ZSBoW2VdLHQoKX19LGo9ZnVuY3Rpb24oZSl7di5jYWxsKGUuZGF0YSl9O2QmJnB8fChkPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTE7YXJndW1lbnRzLmxlbmd0aD5yOyl0LnB1c2goYXJndW1lbnRzW3IrK10pO3JldHVybiBoWysrYl09ZnVuY3Rpb24oKXtjKCJmdW5jdGlvbiI9PXR5cGVvZiBlP2U6RnVuY3Rpb24oZSksdCl9LG4oYiksYn0scD1mdW5jdGlvbihlKXtkZWxldGUgaFtlXX0sInByb2Nlc3MiPT1lKCIuL19jb2YiKShmKT9uPWZ1bmN0aW9uKGUpe2YubmV4dFRpY2socyh2LGUsMSkpfTpfPyhvPW5ldyBfLGk9by5wb3J0MixvLnBvcnQxLm9ubWVzc2FnZT1qLG49cyhpLnBvc3RNZXNzYWdlLGksMSkpOmwuYWRkRXZlbnRMaXN0ZW5lciYmImZ1bmN0aW9uIj09dHlwZW9mIHBvc3RNZXNzYWdlJiYhbC5pbXBvcnRTY3JpcHRzPyhuPWZ1bmN0aW9uKGUpe2wucG9zdE1lc3NhZ2UoZSsiIiwiKiIpfSxsLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLGosITEpKTpuPXkgaW4gdSgic2NyaXB0Iik/ZnVuY3Rpb24oZSl7YS5hcHBlbmRDaGlsZCh1KCJzY3JpcHQiKSlbeV09ZnVuY3Rpb24oKXthLnJlbW92ZUNoaWxkKHRoaXMpLHYuY2FsbChlKX19OmZ1bmN0aW9uKGUpe3NldFRpbWVvdXQocyh2LGUsMSksMCl9KSx0LmV4cG9ydHM9e3NldDpkLGNsZWFyOnB9fSx7Ii4vX2NvZiI6MzQsIi4vX2N0eCI6MzYsIi4vX2RvbS1jcmVhdGUiOjM5LCIuL19nbG9iYWwiOjQ1LCIuL19odG1sIjo0OCwiLi9faW52b2tlIjo1MH1dLDg4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW50ZWdlciIpLG89TWF0aC5tYXgsaT1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1uKGUpLDA+ZT9vKGUrdCwwKTppKGUsdCl9fSx7Ii4vX3RvLWludGVnZXIiOjg5fV0sODk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1NYXRoLmNlaWwsbz1NYXRoLmZsb29yO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaXNOYU4oZT0rZSk/MDooZT4wP286bikoZSl9fSx7fV0sOTA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pb2JqZWN0Iiksbz1lKCIuL19kZWZpbmVkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuKG8oZSkpfX0seyIuL19kZWZpbmVkIjozNywiLi9faW9iamVjdCI6NTF9XSw5MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWludGVnZXIiKSxvPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZT4wP28obihlKSw5MDA3MTk5MjU0NzQwOTkxKTowfX0seyIuL190by1pbnRlZ2VyIjo4OX1dLDkyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZGVmaW5lZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0KG4oZSkpfX0seyIuL19kZWZpbmVkIjozN31dLDkzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXMtb2JqZWN0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIW4oZSkpcmV0dXJuIGU7dmFyIHIsbztpZih0JiYiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKCJmdW5jdGlvbiI9PXR5cGVvZihyPWUudmFsdWVPZikmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZighdCYmImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbzt0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpfX0seyIuL19pcy1vYmplY3QiOjU0fV0sOTQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj0wLG89TWF0aC5yYW5kb20oKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIlN5bWJvbCgiLmNvbmNhdCh2b2lkIDA9PT1lPyIiOmUsIilfIiwoKytuK28pLnRvU3RyaW5nKDM2KSl9fSx7fV0sOTU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19nbG9iYWwiKSxvPWUoIi4vX2NvcmUiKSxpPWUoIi4vX2xpYnJhcnkiKSxzPWUoIi4vX3drcy1leHQiKSxjPWUoIi4vX29iamVjdC1kcCIpLmY7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW8uU3ltYm9sfHwoby5TeW1ib2w9aT97fTpuLlN5bWJvbHx8e30pOyJfIj09ZS5jaGFyQXQoMCl8fGUgaW4gdHx8Yyh0LGUse3ZhbHVlOnMuZihlKX0pfX0seyIuL19jb3JlIjozNSwiLi9fZ2xvYmFsIjo0NSwiLi9fbGlicmFyeSI6NjIsIi4vX29iamVjdC1kcCI6NjYsIi4vX3drcy1leHQiOjk2fV0sOTY6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9ZSgiLi9fd2tzIil9LHsiLi9fd2tzIjo5N31dLDk3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fc2hhcmVkIikoIndrcyIpLG89ZSgiLi9fdWlkIiksaT1lKCIuL19nbG9iYWwiKS5TeW1ib2wscz0iZnVuY3Rpb24iPT10eXBlb2YgaSxjPXQuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09cyYmaVtlXXx8KHM/aTpvKSgiU3ltYm9sLiIrZSkpfTtjLnN0b3JlPW59LHsiLi9fZ2xvYmFsIjo0NSwiLi9fc2hhcmVkIjo4NCwiLi9fdWlkIjo5NH1dLDk4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fY2xhc3NvZiIpLG89ZSgiLi9fd2tzIikoIml0ZXJhdG9yIiksaT1lKCIuL19pdGVyYXRvcnMiKTt0LmV4cG9ydHM9ZSgiLi9fY29yZSIpLmdldEl0ZXJhdG9yTWV0aG9kPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPWU/ZVtvXXx8ZVsiQEBpdGVyYXRvciJdfHxpW24oZSldOnZvaWQgMH19LHsiLi9fY2xhc3NvZiI6MzMsIi4vX2NvcmUiOjM1LCIuL19pdGVyYXRvcnMiOjYwLCIuL193a3MiOjk3fV0sOTk6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fYWRkLXRvLXVuc2NvcGFibGVzIiksbz1lKCIuL19pdGVyLXN0ZXAiKSxpPWUoIi4vX2l0ZXJhdG9ycyIpLHM9ZSgiLi9fdG8taW9iamVjdCIpO3QuZXhwb3J0cz1lKCIuL19pdGVyLWRlZmluZSIpKEFycmF5LCJBcnJheSIsZnVuY3Rpb24oZSx0KXt0aGlzLl90PXMoZSksdGhpcy5faT0wLHRoaXMuX2s9dH0sZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90LHQ9dGhpcy5fayxyPXRoaXMuX2krKztyZXR1cm4hZXx8cj49ZS5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLG8oMSkpOiJrZXlzIj09dD9vKDAscik6InZhbHVlcyI9PXQ/bygwLGVbcl0pOm8oMCxbcixlW3JdXSl9LCJ2YWx1ZXMiKSxpLkFyZ3VtZW50cz1pLkFycmF5LG4oImtleXMiKSxuKCJ2YWx1ZXMiKSxuKCJlbnRyaWVzIil9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoyOSwiLi9faXRlci1kZWZpbmUiOjU3LCIuL19pdGVyLXN0ZXAiOjU5LCIuL19pdGVyYXRvcnMiOjYwLCIuL190by1pb2JqZWN0Ijo5MH1dLDEwMDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2V4cG9ydCIpO24obi5TLCJPYmplY3QiLHtjcmVhdGU6ZSgiLi9fb2JqZWN0LWNyZWF0ZSIpfSl9LHsiLi9fZXhwb3J0Ijo0MiwiLi9fb2JqZWN0LWNyZWF0ZSI6NjV9XSwxMDE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUytuLkYqIWUoIi4vX2Rlc2NyaXB0b3JzIiksIk9iamVjdCIse2RlZmluZVByb3BlcnR5OmUoIi4vX29iamVjdC1kcCIpLmZ9KX0seyIuL19kZXNjcmlwdG9ycyI6MzgsIi4vX2V4cG9ydCI6NDIsIi4vX29iamVjdC1kcCI6NjZ9XSwxMDI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pb2JqZWN0Iiksbz1lKCIuL19vYmplY3QtZ29wZCIpLmY7ZSgiLi9fb2JqZWN0LXNhcCIpKCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8obihlKSx0KX19KX0seyIuL19vYmplY3QtZ29wZCI6NjgsIi4vX29iamVjdC1zYXAiOjc2LCIuL190by1pb2JqZWN0Ijo5MH1dLDEwMzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdwbyIpO2UoIi4vX29iamVjdC1zYXAiKSgiZ2V0UHJvdG90eXBlT2YiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7Ii4vX29iamVjdC1ncG8iOjcyLCIuL19vYmplY3Qtc2FwIjo3NiwiLi9fdG8tb2JqZWN0Ijo5Mn1dLDEwNDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWtleXMiKTtlKCIuL19vYmplY3Qtc2FwIikoImtleXMiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7Ii4vX29iamVjdC1rZXlzIjo3NCwiLi9fb2JqZWN0LXNhcCI6NzYsIi4vX3RvLW9iamVjdCI6OTJ9XSwxMDU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUywiT2JqZWN0Iix7c2V0UHJvdG90eXBlT2Y6ZSgiLi9fc2V0LXByb3RvIikuc2V0fSl9LHsiLi9fZXhwb3J0Ijo0MiwiLi9fc2V0LXByb3RvIjo4MH1dLDEwNjpbZnVuY3Rpb24oZSx0LHIpe30se31dLDEwNzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbixvLGkscz1lKCIuL19saWJyYXJ5IiksYz1lKCIuL19nbG9iYWwiKSxhPWUoIi4vX2N0eCIpLHU9ZSgiLi9fY2xhc3NvZiIpLGw9ZSgiLi9fZXhwb3J0IiksZj1lKCIuL19pcy1vYmplY3QiKSxkPShlKCIuL19hbi1vYmplY3QiKSxlKCIuL19hLWZ1bmN0aW9uIikpLHA9ZSgiLi9fYW4taW5zdGFuY2UiKSxfPWUoIi4vX2Zvci1vZiIpLGI9KGUoIi4vX3NldC1wcm90byIpLnNldCxlKCIuL19zcGVjaWVzLWNvbnN0cnVjdG9yIikpLGg9ZSgiLi9fdGFzayIpLnNldCx5PWUoIi4vX21pY3JvdGFzayIpKCksdj0iUHJvbWlzZSIsaj1jLlR5cGVFcnJvcixtPWMucHJvY2VzcyxnPWNbdl0sbT1jLnByb2Nlc3Msdz0icHJvY2VzcyI9PXUobSksTz1mdW5jdGlvbigpe30saz0hIWZ1bmN0aW9uKCl7dHJ5e3ZhciB0PWcucmVzb2x2ZSgxKSxyPSh0LmNvbnN0cnVjdG9yPXt9KVtlKCIuL193a3MiKSgic3BlY2llcyIpXT1mdW5jdGlvbihlKXtlKE8sTyl9O3JldHVybih3fHwiZnVuY3Rpb24iPT10eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50KSYmdC50aGVuKE8paW5zdGFuY2VvZiByfWNhdGNoKG4pe319KCkseD1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dHx8ZT09PWcmJnQ9PT1pfSxDPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBmKGUpJiYiZnVuY3Rpb24iPT10eXBlb2YodD1lLnRoZW4pP3Q6ITF9LEU9ZnVuY3Rpb24oZSl7cmV0dXJuIHgoZyxlKT9uZXcgUyhlKTpuZXcgbyhlKX0sUz1vPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dGhpcy5wcm9taXNlPW5ldyBlKGZ1bmN0aW9uKGUsbil7aWYodm9pZCAwIT09dHx8dm9pZCAwIT09cil0aHJvdyBqKCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvciIpO3Q9ZSxyPW59KSx0aGlzLnJlc29sdmU9ZCh0KSx0aGlzLnJlamVjdD1kKHIpfSxUPWZ1bmN0aW9uKGUpe3RyeXtlKCl9Y2F0Y2godCl7cmV0dXJue2Vycm9yOnR9fX0sTT1mdW5jdGlvbihlLHQpe2lmKCFlLl9uKXtlLl9uPSEwO3ZhciByPWUuX2M7eShmdW5jdGlvbigpe2Zvcih2YXIgbj1lLl92LG89MT09ZS5fcyxpPTAscz1mdW5jdGlvbih0KXt2YXIgcixpLHM9bz90Lm9rOnQuZmFpbCxjPXQucmVzb2x2ZSxhPXQucmVqZWN0LHU9dC5kb21haW47dHJ5e3M/KG98fCgyPT1lLl9oJiZQKGUpLGUuX2g9MSkscz09PSEwP3I9bjoodSYmdS5lbnRlcigpLHI9cyhuKSx1JiZ1LmV4aXQoKSkscj09PXQucHJvbWlzZT9hKGooIlByb21pc2UtY2hhaW4gY3ljbGUiKSk6KGk9QyhyKSk/aS5jYWxsKHIsYyxhKTpjKHIpKTphKG4pfWNhdGNoKGwpe2EobCl9fTtyLmxlbmd0aD5pOylzKHJbaSsrXSk7ZS5fYz1bXSxlLl9uPSExLHQmJiFlLl9oJiZSKGUpfSl9fSxSPWZ1bmN0aW9uKGUpe2guY2FsbChjLGZ1bmN0aW9uKCl7dmFyIHQscixuLG89ZS5fdjtpZihOKGUpJiYodD1UKGZ1bmN0aW9uKCl7dz9tLmVtaXQoInVuaGFuZGxlZFJlamVjdGlvbiIsbyxlKToocj1jLm9udW5oYW5kbGVkcmVqZWN0aW9uKT9yKHtwcm9taXNlOmUscmVhc29uOm99KToobj1jLmNvbnNvbGUpJiZuLmVycm9yJiZuLmVycm9yKCJVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24iLG8pfSksZS5faD13fHxOKGUpPzI6MSksZS5fYT12b2lkIDAsdCl0aHJvdyB0LmVycm9yfSl9LE49ZnVuY3Rpb24oZSl7aWYoMT09ZS5faClyZXR1cm4hMTtmb3IodmFyIHQscj1lLl9hfHxlLl9jLG49MDtyLmxlbmd0aD5uOylpZih0PXJbbisrXSx0LmZhaWx8fCFOKHQucHJvbWlzZSkpcmV0dXJuITE7cmV0dXJuITB9LFA9ZnVuY3Rpb24oZSl7aC5jYWxsKGMsZnVuY3Rpb24oKXt2YXIgdDt3P20uZW1pdCgicmVqZWN0aW9uSGFuZGxlZCIsZSk6KHQ9Yy5vbnJlamVjdGlvbmhhbmRsZWQpJiZ0KHtwcm9taXNlOmUscmVhc29uOmUuX3Z9KX0pfSxEPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5fZHx8KHQuX2Q9ITAsdD10Ll93fHx0LHQuX3Y9ZSx0Ll9zPTIsdC5fYXx8KHQuX2E9dC5fYy5zbGljZSgpKSxNKHQsITApKX0sQT1mdW5jdGlvbihlKXt2YXIgdCxyPXRoaXM7aWYoIXIuX2Qpe3IuX2Q9ITAscj1yLl93fHxyO3RyeXtpZihyPT09ZSl0aHJvdyBqKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOyh0PUMoZSkpP3koZnVuY3Rpb24oKXt2YXIgbj17X3c6cixfZDohMX07dHJ5e3QuY2FsbChlLGEoQSxuLDEpLGEoRCxuLDEpKX1jYXRjaChvKXtELmNhbGwobixvKX19KTooci5fdj1lLHIuX3M9MSxNKHIsITEpKX1jYXRjaChuKXtELmNhbGwoe193OnIsX2Q6ITF9LG4pfX19O2t8fChnPWZ1bmN0aW9uKGUpe3AodGhpcyxnLHYsIl9oIiksZChlKSxuLmNhbGwodGhpcyk7dHJ5e2UoYShBLHRoaXMsMSksYShELHRoaXMsMSkpfWNhdGNoKHQpe0QuY2FsbCh0aGlzLHQpfX0sbj1mdW5jdGlvbihlKXt0aGlzLl9jPVtdLHRoaXMuX2E9dm9pZCAwLHRoaXMuX3M9MCx0aGlzLl9kPSExLHRoaXMuX3Y9dm9pZCAwLHRoaXMuX2g9MCx0aGlzLl9uPSExfSxuLnByb3RvdHlwZT1lKCIuL19yZWRlZmluZS1hbGwiKShnLnByb3RvdHlwZSx7dGhlbjpmdW5jdGlvbihlLHQpe3ZhciByPUUoYih0aGlzLGcpKTtyZXR1cm4gci5vaz0iZnVuY3Rpb24iPT10eXBlb2YgZT9lOiEwLHIuZmFpbD0iZnVuY3Rpb24iPT10eXBlb2YgdCYmdCxyLmRvbWFpbj13P20uZG9tYWluOnZvaWQgMCx0aGlzLl9jLnB1c2gociksdGhpcy5fYSYmdGhpcy5fYS5wdXNoKHIpLHRoaXMuX3MmJk0odGhpcywhMSksci5wcm9taXNlfSwiY2F0Y2giOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnRoZW4odm9pZCAwLGUpfX0pLFM9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgbjt0aGlzLnByb21pc2U9ZSx0aGlzLnJlc29sdmU9YShBLGUsMSksdGhpcy5yZWplY3Q9YShELGUsMSl9KSxsKGwuRytsLlcrbC5GKiFrLHtQcm9taXNlOmd9KSxlKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpKGcsdiksDQplKCIuL19zZXQtc3BlY2llcyIpKHYpLGk9ZSgiLi9fY29yZSIpW3ZdLGwobC5TK2wuRiohayx2LHtyZWplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9RSh0aGlzKSxyPXQucmVqZWN0O3JldHVybiByKGUpLHQucHJvbWlzZX19KSxsKGwuUytsLkYqKHN8fCFrKSx2LHtyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBnJiZ4KGUuY29uc3RydWN0b3IsdGhpcykpcmV0dXJuIGU7dmFyIHQ9RSh0aGlzKSxyPXQucmVzb2x2ZTtyZXR1cm4gcihlKSx0LnByb21pc2V9fSksbChsLlMrbC5GKiEoayYmZSgiLi9faXRlci1kZXRlY3QiKShmdW5jdGlvbihlKXtnLmFsbChlKVsiY2F0Y2giXShPKX0pKSx2LHthbGw6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPUUodCksbj1yLnJlc29sdmUsbz1yLnJlamVjdCxpPVQoZnVuY3Rpb24oKXt2YXIgcj1bXSxpPTAscz0xO18oZSwhMSxmdW5jdGlvbihlKXt2YXIgYz1pKyssYT0hMTtyLnB1c2godm9pZCAwKSxzKyssdC5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7YXx8KGE9ITAscltjXT1lLC0tc3x8bihyKSl9LG8pfSksLS1zfHxuKHIpfSk7cmV0dXJuIGkmJm8oaS5lcnJvciksci5wcm9taXNlfSxyYWNlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1FKHQpLG49ci5yZWplY3Qsbz1UKGZ1bmN0aW9uKCl7XyhlLCExLGZ1bmN0aW9uKGUpe3QucmVzb2x2ZShlKS50aGVuKHIucmVzb2x2ZSxuKX0pfSk7cmV0dXJuIG8mJm4oby5lcnJvciksci5wcm9taXNlfX0pfSx7Ii4vX2EtZnVuY3Rpb24iOjI4LCIuL19hbi1pbnN0YW5jZSI6MzAsIi4vX2FuLW9iamVjdCI6MzEsIi4vX2NsYXNzb2YiOjMzLCIuL19jb3JlIjozNSwiLi9fY3R4IjozNiwiLi9fZXhwb3J0Ijo0MiwiLi9fZm9yLW9mIjo0NCwiLi9fZ2xvYmFsIjo0NSwiLi9faXMtb2JqZWN0Ijo1NCwiLi9faXRlci1kZXRlY3QiOjU4LCIuL19saWJyYXJ5Ijo2MiwiLi9fbWljcm90YXNrIjo2NCwiLi9fcmVkZWZpbmUtYWxsIjo3OCwiLi9fc2V0LXByb3RvIjo4MCwiLi9fc2V0LXNwZWNpZXMiOjgxLCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6ODIsIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjg1LCIuL190YXNrIjo4NywiLi9fd2tzIjo5N31dLDEwODpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19zdHJpbmctYXQiKSghMCk7ZSgiLi9faXRlci1kZWZpbmUiKShTdHJpbmcsIlN0cmluZyIsZnVuY3Rpb24oZSl7dGhpcy5fdD1TdHJpbmcoZSksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5fdCxyPXRoaXMuX2k7cmV0dXJuIHI+PXQubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KGU9bih0LHIpLHRoaXMuX2krPWUubGVuZ3RoLHt2YWx1ZTplLGRvbmU6ITF9KX0pfSx7Ii4vX2l0ZXItZGVmaW5lIjo1NywiLi9fc3RyaW5nLWF0Ijo4Nn1dLDEwOTpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19nbG9iYWwiKSxvPWUoIi4vX2hhcyIpLGk9ZSgiLi9fZGVzY3JpcHRvcnMiKSxzPWUoIi4vX2V4cG9ydCIpLGM9ZSgiLi9fcmVkZWZpbmUiKSxhPWUoIi4vX21ldGEiKS5LRVksdT1lKCIuL19mYWlscyIpLGw9ZSgiLi9fc2hhcmVkIiksZj1lKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpLGQ9ZSgiLi9fdWlkIikscD1lKCIuL193a3MiKSxfPWUoIi4vX3drcy1leHQiKSxiPWUoIi4vX3drcy1kZWZpbmUiKSxoPWUoIi4vX2tleW9mIikseT1lKCIuL19lbnVtLWtleXMiKSx2PWUoIi4vX2lzLWFycmF5Iiksaj1lKCIuL19hbi1vYmplY3QiKSxtPWUoIi4vX3RvLWlvYmplY3QiKSxnPWUoIi4vX3RvLXByaW1pdGl2ZSIpLHc9ZSgiLi9fcHJvcGVydHktZGVzYyIpLE89ZSgiLi9fb2JqZWN0LWNyZWF0ZSIpLGs9ZSgiLi9fb2JqZWN0LWdvcG4tZXh0IikseD1lKCIuL19vYmplY3QtZ29wZCIpLEM9ZSgiLi9fb2JqZWN0LWRwIiksRT1lKCIuL19vYmplY3Qta2V5cyIpLFM9eC5mLFQ9Qy5mLE09ay5mLFI9bi5TeW1ib2wsTj1uLkpTT04sUD1OJiZOLnN0cmluZ2lmeSxEPSJwcm90b3R5cGUiLEE9cCgiX2hpZGRlbiIpLEw9cCgidG9QcmltaXRpdmUiKSxGPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLEk9bCgic3ltYm9sLXJlZ2lzdHJ5IiksVj1sKCJzeW1ib2xzIiksej1PYmplY3RbRF0sVT0iZnVuY3Rpb24iPT10eXBlb2YgUixIPW4uUU9iamVjdCxCPSFIfHwhSFtEXXx8IUhbRF0uZmluZENoaWxkLFc9aSYmdShmdW5jdGlvbigpe3JldHVybiA3IT1PKFQoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVCh0aGlzLCJhIix7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQscil7dmFyIG49Uyh6LHQpO24mJmRlbGV0ZSB6W3RdLFQoZSx0LHIpLG4mJmUhPT16JiZUKHosdCxuKX06VCxKPWZ1bmN0aW9uKGUpe3ZhciB0PVZbZV09TyhSW0RdKTtyZXR1cm4gdC5faz1lLHR9LFk9VSYmInN5bWJvbCI9PXR5cGVvZiBSLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiJzeW1ib2wiPT10eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBSfSxxPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gaihlKSx0PWcodCwhMCksaihyKSxvKFYsdCk/KHIuZW51bWVyYWJsZT8obyhlLEEpJiZlW0FdW3RdJiYoZVtBXVt0XT0hMSkscj1PKHIse2VudW1lcmFibGU6dygwLCExKX0pKToobyhlLEEpfHxUKGUsQSx3KDEse30pKSxlW0FdW3RdPSEwKSxXKGUsdCxyKSk6VChlLHQscil9LEs9ZnVuY3Rpb24oZSx0KXtqKGUpO2Zvcih2YXIgcixuPXkodD1tKHQpKSxvPTAsaT1uLmxlbmd0aDtpPm87KXEoZSxyPW5bbysrXSx0W3JdKTtyZXR1cm4gZX0sRz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P08oZSk6SyhPKGUpLHQpfSxaPWZ1bmN0aW9uKGUpe3ZhciB0PUYuY2FsbCh0aGlzLGU9ZyhlLCEwKSk7cmV0dXJuIHR8fCFvKHRoaXMsZSl8fCFvKFYsZSl8fG8odGhpcyxBKSYmdGhpc1tBXVtlXT90OiEwfSxYPWZ1bmN0aW9uKGUsdCl7dmFyIHI9UyhlPW0oZSksdD1nKHQsITApKTtyZXR1cm4hcnx8IW8oVix0KXx8byhlLEEpJiZlW0FdW3RdfHwoci5lbnVtZXJhYmxlPSEwKSxyfSwkPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPU0obShlKSksbj1bXSxpPTA7ci5sZW5ndGg+aTspbyhWLHQ9cltpKytdKXx8dD09QXx8dD09YXx8bi5wdXNoKHQpO3JldHVybiBufSxRPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPU0obShlKSksbj1bXSxpPTA7ci5sZW5ndGg+aTspbyhWLHQ9cltpKytdKSYmbi5wdXNoKFZbdF0pO3JldHVybiBufTtVfHwoUj1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBSKXRocm93IFR5cGVFcnJvcigiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yISIpO3ZhciBlPWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApO3JldHVybiBpJiZCJiZXKHosZSx7Y29uZmlndXJhYmxlOiEwLHNldDpmdW5jdGlvbih0KXtvKHRoaXMsQSkmJm8odGhpc1tBXSxlKSYmKHRoaXNbQV1bZV09ITEpLFcodGhpcyxlLHcoMSx0KSl9fSksSihlKX0sYyhSW0RdLCJ0b1N0cmluZyIsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa30pLHguZj1YLEMuZj1xLGUoIi4vX29iamVjdC1nb3BuIikuZj1rLmY9JCxlKCIuL19vYmplY3QtcGllIikuZj1aLGUoIi4vX29iamVjdC1nb3BzIikuZj1RLGkmJiFlKCIuL19saWJyYXJ5IikmJmMoeiwicHJvcGVydHlJc0VudW1lcmFibGUiLFosITApLF8uZj1mdW5jdGlvbihlKXtyZXR1cm4gSihwKGUpKX0pLHMocy5HK3MuVytzLkYqIVUse1N5bWJvbDpSfSk7Zm9yKHZhciBlZT0iaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMiLnNwbGl0KCIsIiksdGU9MDtlZS5sZW5ndGg+dGU7KXAoZWVbdGUrK10pO2Zvcih2YXIgZWU9RShwLnN0b3JlKSx0ZT0wO2VlLmxlbmd0aD50ZTspYihlZVt0ZSsrXSk7cyhzLlMrcy5GKiFVLCJTeW1ib2wiLHsiZm9yIjpmdW5jdGlvbihlKXtyZXR1cm4gbyhJLGUrPSIiKT9JW2VdOklbZV09UihlKX0sa2V5Rm9yOmZ1bmN0aW9uKGUpe2lmKFkoZSkpcmV0dXJuIGgoSSxlKTt0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIHN5bWJvbCEiKX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7Qj0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7Qj0hMX19KSxzKHMuUytzLkYqIVUsIk9iamVjdCIse2NyZWF0ZTpHLGRlZmluZVByb3BlcnR5OnEsZGVmaW5lUHJvcGVydGllczpLLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpYLGdldE93blByb3BlcnR5TmFtZXM6JCxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6UX0pLE4mJnMocy5TK3MuRiooIVV8fHUoZnVuY3Rpb24oKXt2YXIgZT1SKCk7cmV0dXJuIltudWxsXSIhPVAoW2VdKXx8Int9IiE9UCh7YTplfSl8fCJ7fSIhPVAoT2JqZWN0KGUpKX0pKSwiSlNPTiIse3N0cmluZ2lmeTpmdW5jdGlvbihlKXtpZih2b2lkIDAhPT1lJiYhWShlKSl7Zm9yKHZhciB0LHIsbj1bZV0sbz0xO2FyZ3VtZW50cy5sZW5ndGg+bzspbi5wdXNoKGFyZ3VtZW50c1tvKytdKTtyZXR1cm4gdD1uWzFdLCJmdW5jdGlvbiI9PXR5cGVvZiB0JiYocj10KSwhciYmdih0KXx8KHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gciYmKHQ9ci5jYWxsKHRoaXMsZSx0KSksWSh0KT92b2lkIDA6dH0pLG5bMV09dCxQLmFwcGx5KE4sbil9fX0pLFJbRF1bTF18fGUoIi4vX2hpZGUiKShSW0RdLEwsUltEXS52YWx1ZU9mKSxmKFIsIlN5bWJvbCIpLGYoTWF0aCwiTWF0aCIsITApLGYobi5KU09OLCJKU09OIiwhMCl9LHsiLi9fYW4tb2JqZWN0IjozMSwiLi9fZGVzY3JpcHRvcnMiOjM4LCIuL19lbnVtLWtleXMiOjQxLCIuL19leHBvcnQiOjQyLCIuL19mYWlscyI6NDMsIi4vX2dsb2JhbCI6NDUsIi4vX2hhcyI6NDYsIi4vX2hpZGUiOjQ3LCIuL19pcy1hcnJheSI6NTMsIi4vX2tleW9mIjo2MSwiLi9fbGlicmFyeSI6NjIsIi4vX21ldGEiOjYzLCIuL19vYmplY3QtY3JlYXRlIjo2NSwiLi9fb2JqZWN0LWRwIjo2NiwiLi9fb2JqZWN0LWdvcGQiOjY4LCIuL19vYmplY3QtZ29wbiI6NzAsIi4vX29iamVjdC1nb3BuLWV4dCI6NjksIi4vX29iamVjdC1nb3BzIjo3MSwiLi9fb2JqZWN0LWtleXMiOjc0LCIuL19vYmplY3QtcGllIjo3NSwiLi9fcHJvcGVydHktZGVzYyI6NzcsIi4vX3JlZGVmaW5lIjo3OSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjgyLCIuL19zaGFyZWQiOjg0LCIuL190by1pb2JqZWN0Ijo5MCwiLi9fdG8tcHJpbWl0aXZlIjo5MywiLi9fdWlkIjo5NCwiLi9fd2tzIjo5NywiLi9fd2tzLWRlZmluZSI6OTUsIi4vX3drcy1leHQiOjk2fV0sMTEwOltmdW5jdGlvbihlLHQscil7ZSgiLi9fd2tzLWRlZmluZSIpKCJhc3luY0l0ZXJhdG9yIil9LHsiLi9fd2tzLWRlZmluZSI6OTV9XSwxMTE6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuL193a3MtZGVmaW5lIikoIm9ic2VydmFibGUiKX0seyIuL193a3MtZGVmaW5lIjo5NX1dLDExMjpbZnVuY3Rpb24oZSx0LHIpe2UoIi4vZXM2LmFycmF5Lml0ZXJhdG9yIik7Zm9yKHZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9faGlkZSIpLGk9ZSgiLi9faXRlcmF0b3JzIikscz1lKCIuL193a3MiKSgidG9TdHJpbmdUYWciKSxjPVsiTm9kZUxpc3QiLCJET01Ub2tlbkxpc3QiLCJNZWRpYUxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIkNTU1J1bGVMaXN0Il0sYT0wOzU+YTthKyspe3ZhciB1PWNbYV0sbD1uW3VdLGY9bCYmbC5wcm90b3R5cGU7ZiYmIWZbc10mJm8oZixzLHUpLGlbdV09aS5BcnJheX19LHsiLi9fZ2xvYmFsIjo0NSwiLi9faGlkZSI6NDcsIi4vX2l0ZXJhdG9ycyI6NjAsIi4vX3drcyI6OTcsIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjo5OX1dLDExMzpbZnVuY3Rpb24oZSx0LHIpe3dpbmRvdy5NdXRhdGlvbk9ic2VydmVyPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlcnx8ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXt0aGlzLmc9W10sdGhpcy5rPWV9ZnVuY3Rpb24gcihlKXshZnVuY3Rpb24gcigpe3ZhciBuPWUudGFrZVJlY29yZHMoKTtuLmxlbmd0aCYmZS5rKG4sZSksZS5mPXNldFRpbWVvdXQocix0Ll9wZXJpb2QpfSgpfWZ1bmN0aW9uIG4odCl7dmFyIHIsbj17dHlwZTpudWxsLHRhcmdldDpudWxsLGFkZGVkTm9kZXM6W10scmVtb3ZlZE5vZGVzOltdLHByZXZpb3VzU2libGluZzpudWxsLG5leHRTaWJsaW5nOm51bGwsYXR0cmlidXRlTmFtZTpudWxsLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLG9sZFZhbHVlOm51bGx9O2ZvcihyIGluIHQpbltyXSE9PWUmJnRbcl0hPT1lJiYobltyXT10W3JdKTtyZXR1cm4gbn1mdW5jdGlvbiBvKGUsdCl7dmFyIHI9YyhlLHQpO3JldHVybiBmdW5jdGlvbihuKXt2YXIgbyxhPW4ubGVuZ3RoO3QuYSYmci5hJiZpKG4sZSxyLmEsdC5kKSwodC5ifHx0LmUpJiYobz1zKG4sZSxyLHQpKSwob3x8bi5sZW5ndGghPT1hKSYmKHI9YyhlLHQpKX19ZnVuY3Rpb24gaSh0LHIsbyxpKXtmb3IodmFyIHMsYyxhPXt9LHU9ci5hdHRyaWJ1dGVzLGw9dS5sZW5ndGg7bC0tOylzPXVbbF0sYz1zLm5hbWUsaSYmaVtjXT09PWV8fChzLnZhbHVlIT09b1tjXSYmdC5wdXNoKG4oe3R5cGU6ImF0dHJpYnV0ZXMiLHRhcmdldDpyLGF0dHJpYnV0ZU5hbWU6YyxvbGRWYWx1ZTpvW2NdLGF0dHJpYnV0ZU5hbWVzcGFjZTpzLm5hbWVzcGFjZVVSSX0pKSxhW2NdPSEwKTtmb3IoYyBpbiBvKWFbY118fHQucHVzaChuKHt0YXJnZXQ6cix0eXBlOiJhdHRyaWJ1dGVzIixhdHRyaWJ1dGVOYW1lOmMsb2xkVmFsdWU6b1tjXX0pKX1mdW5jdGlvbiBzKHQscixvLHMpe2Z1bmN0aW9uIGMoZSxyLG8sYyxhKXt2YXIgbD1lLmxlbmd0aC0xO2E9LX4oKGwtYSkvMik7Zm9yKHZhciBmLGQscDtwPWUucG9wKCk7KWY9b1twLmhdLGQ9Y1twLmldLHMuYiYmYSYmTWF0aC5hYnMocC5oLXAuaSk+PWwmJih0LnB1c2gobih7dHlwZToiY2hpbGRMaXN0Iix0YXJnZXQ6cixhZGRlZE5vZGVzOltmXSxyZW1vdmVkTm9kZXM6W2ZdLG5leHRTaWJsaW5nOmYubmV4dFNpYmxpbmcscHJldmlvdXNTaWJsaW5nOmYucHJldmlvdXNTaWJsaW5nfSkpLGEtLSkscy5hJiZkLmEmJmkodCxmLGQuYSxzLmQpLHMuYyYmMz09PWYubm9kZVR5cGUmJmYubm9kZVZhbHVlIT09ZC5jJiZ0LnB1c2gobih7dHlwZToiY2hhcmFjdGVyRGF0YSIsdGFyZ2V0OmZ9KSkscy5lJiZ1KGYsZCl9ZnVuY3Rpb24gdShyLG8pe2Zvcih2YXIgZCxwLF8sYixoLHk9ci5jaGlsZE5vZGVzLHY9by5iLGo9eS5sZW5ndGgsbT12P3YubGVuZ3RoOjAsZz0wLHc9MCxPPTA7aj53fHxtPk87KWI9eVt3XSxoPShfPXZbT10pJiZfLmosYj09PWg/KHMuYSYmXy5hJiZpKHQsYixfLmEscy5kKSxzLmMmJl8uYyE9PWUmJmIubm9kZVZhbHVlIT09Xy5jJiZ0LnB1c2gobih7dHlwZToiY2hhcmFjdGVyRGF0YSIsdGFyZ2V0OmJ9KSkscCYmYyhwLHIseSx2LGcpLHMuZSYmKGIuY2hpbGROb2Rlcy5sZW5ndGh8fF8uYiYmXy5iLmxlbmd0aCkmJnUoYixfKSx3KyssTysrKToobD0hMCxkfHwoZD17fSxwPVtdKSxiJiYoZFtfPWEoYildfHwoZFtfXT0hMCwtMT09PShfPWYodixiLE8sImoiKSk/cy5iJiYodC5wdXNoKG4oe3R5cGU6ImNoaWxkTGlzdCIsdGFyZ2V0OnIsYWRkZWROb2RlczpbYl0sbmV4dFNpYmxpbmc6Yi5uZXh0U2libGluZyxwcmV2aW91c1NpYmxpbmc6Yi5wcmV2aW91c1NpYmxpbmd9KSksZysrKTpwLnB1c2goe2g6dyxpOl99KSksdysrKSxoJiZoIT09eVt3XSYmKGRbXz1hKGgpXXx8KGRbX109ITAsLTE9PT0oXz1mKHksaCx3KSk/cy5iJiYodC5wdXNoKG4oe3R5cGU6ImNoaWxkTGlzdCIsdGFyZ2V0Om8uaixyZW1vdmVkTm9kZXM6W2hdLG5leHRTaWJsaW5nOnZbTysxXSxwcmV2aW91c1NpYmxpbmc6dltPLTFdfSkpLGctLSk6cC5wdXNoKHtoOl8saTpPfSkpLE8rKykpO3AmJmMocCxyLHksdixnKX12YXIgbDtyZXR1cm4gdShyLG8pLGx9ZnVuY3Rpb24gYyhlLHQpe3ZhciByPSEwO3JldHVybiBmdW5jdGlvbiBuKGUpe3ZhciBvPXtqOmV9O3JldHVybiF0LmN8fDMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZT8odC5hJiZyJiYxPT09ZS5ub2RlVHlwZSYmKG8uYT1sKGUuYXR0cmlidXRlcyxmdW5jdGlvbihlLHIpe3JldHVybiB0LmQmJiF0LmRbci5uYW1lXXx8KGVbci5uYW1lXT1yLnZhbHVlKSxlfSkpLHImJih0LmJ8fHQuY3x8dC5hJiZ0LmUpJiYoby5iPXUoZS5jaGlsZE5vZGVzLG4pKSxyPXQuZSk6by5jPWUubm9kZVZhbHVlLG99KGUpfWZ1bmN0aW9uIGEoZSl7dHJ5e3JldHVybiBlLmlkfHwoZS5tb19pZD1lLm1vX2lkfHxkKyspfWNhdGNoKHQpe3RyeXtyZXR1cm4gZS5ub2RlVmFsdWV9Y2F0Y2gocil7cmV0dXJuIGQrK319fWZ1bmN0aW9uIHUoZSx0KXtmb3IodmFyIHI9W10sbj0wO248ZS5sZW5ndGg7bisrKXJbbl09dChlW25dLG4sZSk7cmV0dXJuIHJ9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgcj17fSxuPTA7bjxlLmxlbmd0aDtuKyspcj10KHIsZVtuXSxuLGUpO3JldHVybiByfWZ1bmN0aW9uIGYoZSx0LHIsbil7Zm9yKDtyPGUubGVuZ3RoO3IrKylpZigobj9lW3JdW25dOmVbcl0pPT09dClyZXR1cm4gcjtyZXR1cm4tMX10Ll9wZXJpb2Q9MzAsdC5wcm90b3R5cGU9e29ic2VydmU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49e2E6ISEodC5hdHRyaWJ1dGVzfHx0LmF0dHJpYnV0ZUZpbHRlcnx8dC5hdHRyaWJ1dGVPbGRWYWx1ZSksYjohIXQuY2hpbGRMaXN0LGU6ISF0LnN1YnRyZWUsYzohKCF0LmNoYXJhY3RlckRhdGEmJiF0LmNoYXJhY3RlckRhdGFPbGRWYWx1ZSl9LGk9dGhpcy5nLHM9MDtzPGkubGVuZ3RoO3MrKylpW3NdLm09PT1lJiZpLnNwbGljZShzLDEpO3QuYXR0cmlidXRlRmlsdGVyJiYobi5kPWwodC5hdHRyaWJ1dGVGaWx0ZXIsZnVuY3Rpb24oZSx0KXtyZXR1cm4gZVt0XT0hMCxlfSkpLGkucHVzaCh7bTplLGw6byhlLG4pfSksdGhpcy5mfHxyKHRoaXMpfSx0YWtlUmVjb3JkczpmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PXRoaXMuZyxyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXS5sKGUpO3JldHVybiBlfSxkaXNjb25uZWN0OmZ1bmN0aW9uKCl7dGhpcy5nPVtdLGNsZWFyVGltZW91dCh0aGlzLmYpLHRoaXMuZj1udWxsfX07dmFyIGQ9MTtyZXR1cm4gdH0odm9pZCAwKX0se31dLDExNDpbZnVuY3Rpb24oZSx0LHIpe09iamVjdC5vYnNlcnZlfHxmdW5jdGlvbihlLHQscixuKXsidXNlIHN0cmljdCI7dmFyIG8saSxzPVsiYWRkIiwidXBkYXRlIiwiZGVsZXRlIiwicmVjb25maWd1cmUiLCJzZXRQcm90b3R5cGUiLCJwcmV2ZW50RXh0ZW5zaW9ucyJdLGM9dC5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PWUuY2FsbCh0KX19KGUucHJvdG90eXBlLnRvU3RyaW5nKSxhPXQucHJvdG90eXBlLmluZGV4T2Y/dC5pbmRleE9mfHxmdW5jdGlvbihlLHIsbil7cmV0dXJuIHQucHJvdG90eXBlLmluZGV4T2YuY2FsbChlLHIsbil9OmZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49cnx8MDtuPGUubGVuZ3RoO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX0sdT1yLk1hcCE9PW4mJk1hcC5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbigpe3JldHVybiBuZXcgTWFwfTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9W107cmV0dXJue3NpemU6MCxoYXM6ZnVuY3Rpb24odCl7cmV0dXJuIGEoZSx0KT4tMX0sZ2V0OmZ1bmN0aW9uKHIpe3JldHVybiB0W2EoZSxyKV19LHNldDpmdW5jdGlvbihyLG4pe3ZhciBvPWEoZSxyKTstMT09PW8/KGUucHVzaChyKSx0LnB1c2gobiksdGhpcy5zaXplKyspOnRbb109bn0sImRlbGV0ZSI6ZnVuY3Rpb24ocil7dmFyIG49YShlLHIpO24+LTEmJihlLnNwbGljZShuLDEpLHQuc3BsaWNlKG4sMSksdGhpcy5zaXplLS0pfSxmb3JFYWNoOmZ1bmN0aW9uKHIpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXIuY2FsbChhcmd1bWVudHNbMV0sdFtuXSxlW25dLHRoaXMpfX19LGw9ZS5nZXRPd25Qcm9wZXJ0eU5hbWVzP2Z1bmN0aW9uKCl7dmFyIHQ9ZS5nZXRPd25Qcm9wZXJ0eU5hbWVzO3RyeXthcmd1bWVudHMuY2FsbGVlfWNhdGNoKHIpe3ZhciBuPSh0KGEpLmpvaW4oIiAiKSsiICIpLnJlcGxhY2UoL3Byb3RvdHlwZSB8bGVuZ3RoIHxuYW1lIC9nLCIiKS5zbGljZSgwLC0xKS5zcGxpdCgiICIpO24ubGVuZ3RoJiYodD1mdW5jdGlvbih0KXt2YXIgcj1lLmdldE93blByb3BlcnR5TmFtZXModCk7aWYoImZ1bmN0aW9uIj09dHlwZW9mIHQpZm9yKHZhciBvLGk9MDtpPG4ubGVuZ3RoOykobz1hKHIsbltpKytdKSk+LTEmJnIuc3BsaWNlKG8sMSk7cmV0dXJuIHJ9KX1yZXR1cm4gdH0oKTpmdW5jdGlvbih0KXt2YXIgcixuLG89W107aWYoImhhc093blByb3BlcnR5ImluIHQpZm9yKHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiZvLnB1c2gocik7ZWxzZXtuPWUuaGFzT3duUHJvcGVydHk7Zm9yKHIgaW4gdCluLmNhbGwodCxyKSYmby5wdXNoKHIpfXJldHVybiBjKHQpJiZvLnB1c2goImxlbmd0aCIpLG99LGY9ZS5nZXRQcm90b3R5cGVPZixkPWUuZGVmaW5lUHJvcGVydGllcyYmZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IscD1yLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8ci53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKCl7dmFyIGU9K25ldyBEYXRlLHQ9ZTtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyKCh0PStuZXcgRGF0ZSktZSl9LDE3KX19KCksXz1mdW5jdGlvbihlLHQscil7dmFyIG49by5nZXQoZSk7bj8oaChuLGUpLG0oZSxuLHQscikpOihuPWIoZSksbShlLG4sdCxyKSwxPT09by5zaXplJiZwKHkpKX0sYj1mdW5jdGlvbih0LHIpe3ZhciBuLGk9bCh0KSxzPVtdLGM9MCxyPXtoYW5kbGVyczp1KCksZnJvemVuOmUuaXNGcm96ZW4/ZS5pc0Zyb3plbih0KTohMSxleHRlbnNpYmxlOmUuaXNFeHRlbnNpYmxlP2UuaXNFeHRlbnNpYmxlKHQpOiEwLHByb3RvOmYmJmYodCkscHJvcGVydGllczppLHZhbHVlczpzLG5vdGlmaWVyOmoodCxyKX07aWYoZClmb3Iobj1yLmRlc2NyaXB0b3JzPVtdO2M8aS5sZW5ndGg7KW5bY109ZCh0LGlbY10pLHNbY109dFtpW2MrK11dO2Vsc2UgZm9yKDtjPGkubGVuZ3RoOylzW2NdPXRbaVtjKytdXTtyZXR1cm4gby5zZXQodCxyKSxyfSxoPWZ1bmN0aW9uKCl7dmFyIHQ9ZD9mdW5jdGlvbihlLHQscixuLG8pe3ZhciBpPXQucHJvcGVydGllc1tyXSxzPWVbaV0sYz10LnZhbHVlc1tyXSxhPXQuZGVzY3JpcHRvcnNbcl07InZhbHVlImluIG8mJihjPT09cz8wPT09YyYmMS9jIT09MS9zOmM9PT1jfHxzPT09cykmJihnKGUsdCx7bmFtZTppLHR5cGU6InVwZGF0ZSIsb2JqZWN0OmUsb2xkVmFsdWU6Y30sbiksdC52YWx1ZXNbcl09cyksIWEuY29uZmlndXJhYmxlfHxvLmNvbmZpZ3VyYWJsZSYmby53cml0YWJsZT09PWEud3JpdGFibGUmJm8uZW51bWVyYWJsZT09PWEuZW51bWVyYWJsZSYmby5nZXQ9PT1hLmdldCYmby5zZXQ9PT1hLnNldHx8KGcoZSx0LHtuYW1lOmksdHlwZToicmVjb25maWd1cmUiLG9iamVjdDplLG9sZFZhbHVlOmN9LG4pLHQuZGVzY3JpcHRvcnNbcl09byl9OmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvPXQucHJvcGVydGllc1tyXSxpPWVbb10scz10LnZhbHVlc1tyXTsocz09PWk/MD09PXMmJjEvcyE9PTEvaTpzPT09c3x8aT09PWkpJiYoZyhlLHQse25hbWU6byx0eXBlOiJ1cGRhdGUiLG9iamVjdDplLG9sZFZhbHVlOnN9LG4pLHQudmFsdWVzW3JdPWkpfSxyPWQ/ZnVuY3Rpb24oZSxyLG4sbyxpKXtmb3IodmFyIHMsYz1yLmxlbmd0aDtuJiZjLS07KW51bGwhPT1yW2NdJiYocz1kKGUscltjXSksbi0tLHM/dChlLG8sYyxpLHMpOihnKGUsbyx7bmFtZTpyW2NdLHR5cGU6ImRlbGV0ZSIsb2JqZWN0OmUsb2xkVmFsdWU6by52YWx1ZXNbY119LGkpLG8ucHJvcGVydGllcy5zcGxpY2UoYywxKSxvLnZhbHVlcy5zcGxpY2UoYywxKSxvLmRlc2NyaXB0b3JzLnNwbGljZShjLDEpKSl9OmZ1bmN0aW9uKGUsdCxyLG4sbyl7Zm9yKHZhciBpPXQubGVuZ3RoO3ImJmktLTspbnVsbCE9PXRbaV0mJihnKGUsbix7bmFtZTp0W2ldLHR5cGU6ImRlbGV0ZSIsb2JqZWN0OmUsb2xkVmFsdWU6bi52YWx1ZXNbaV19LG8pLG4ucHJvcGVydGllcy5zcGxpY2UoaSwxKSxuLnZhbHVlcy5zcGxpY2UoaSwxKSxyLS0pfTtyZXR1cm4gZnVuY3Rpb24obixvLGkpe2lmKG4uaGFuZGxlcnMuc2l6ZSYmIW4uZnJvemVuKXt2YXIgcyxjLHUscCxfLGIsaCx5LHY9bi52YWx1ZXMsaj1uLmRlc2NyaXB0b3JzLG09MDtpZihuLmV4dGVuc2libGUpaWYocz1uLnByb3BlcnRpZXMuc2xpY2UoKSxjPXMubGVuZ3RoLHU9bChvKSxqKXtmb3IoO208dS5sZW5ndGg7KV89dVttKytdLHA9YShzLF8pLHk9ZChvLF8pLC0xPT09cD8oZyhvLG4se25hbWU6Xyx0eXBlOiJhZGQiLG9iamVjdDpvfSxpKSxuLnByb3BlcnRpZXMucHVzaChfKSx2LnB1c2gob1tfXSksai5wdXNoKHkpKTooc1twXT1udWxsLGMtLSx0KG8sbixwLGkseSkpO3IobyxzLGMsbixpKSxlLmlzRXh0ZW5zaWJsZShvKXx8KG4uZXh0ZW5zaWJsZT0hMSxnKG8sbix7dHlwZToicHJldmVudEV4dGVuc2lvbnMiLG9iamVjdDpvfSxpKSxuLmZyb3plbj1lLmlzRnJvemVuKG8pKX1lbHNle2Zvcig7bTx1Lmxlbmd0aDspXz11W20rK10scD1hKHMsXyksYj1vW19dLC0xPT09cD8oZyhvLG4se25hbWU6Xyx0eXBlOiJhZGQiLG9iamVjdDpvfSxpKSxuLnByb3BlcnRpZXMucHVzaChfKSx2LnB1c2goYikpOihzW3BdPW51bGwsYy0tLHQobyxuLHAsaSkpO3IobyxzLGMsbixpKX1lbHNlIGlmKCFuLmZyb3plbil7Zm9yKDttPHMubGVuZ3RoO20rKylfPXNbbV0sdChvLG4sbSxpLGQobyxfKSk7ZS5pc0Zyb3plbihvKSYmKG4uZnJvemVuPSEwKX1mJiYoaD1mKG8pLGghPT1uLnByb3RvJiYoZyhvLG4se3R5cGU6InNldFByb3RvdHlwZSIsbmFtZToiX19wcm90b19fIixvYmplY3Q6byxvbGRWYWx1ZTpuLnByb3RvfSksbi5wcm90bz1oKSl9fX0oKSx5PWZ1bmN0aW9uKCl7by5zaXplJiYoby5mb3JFYWNoKGgpLGkuZm9yRWFjaCh2KSxwKHkpKX0sdj1mdW5jdGlvbihlLHQpe3ZhciByPWUuY2hhbmdlUmVjb3JkcztyLmxlbmd0aCYmKGUuY2hhbmdlUmVjb3Jkcz1bXSx0KHIpKX0saj1mdW5jdGlvbihlLHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDImJih0PW8uZ2V0KGUpKSx0JiZ0Lm5vdGlmaWVyfHx7bm90aWZ5OmZ1bmN0aW9uKHQpe3QudHlwZTt2YXIgcj1vLmdldChlKTtpZihyKXt2YXIgbixpPXtvYmplY3Q6ZX07Zm9yKG4gaW4gdCkib2JqZWN0IiE9PW4mJihpW25dPXRbbl0pO2coZSxyLGkpfX0scGVyZm9ybUNoYW5nZTpmdW5jdGlvbih0LHIpe2lmKCJzdHJpbmciIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIG5vbi1zdHJpbmcgY2hhbmdlVHlwZSIpO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBwZXJmb3JtIG5vbi1mdW5jdGlvbiIpO3ZhciBpLHMsYz1vLmdldChlKSxhPWFyZ3VtZW50c1syXSx1PWE9PT1uP3IoKTpyLmNhbGwoYSk7aWYoYyYmaChjLGUsdCksYyYmdSYmIm9iamVjdCI9PXR5cGVvZiB1KXtzPXtvYmplY3Q6ZSx0eXBlOnR9O2ZvcihpIGluIHUpIm9iamVjdCIhPT1pJiYidHlwZSIhPT1pJiYoc1tpXT11W2ldKTtnKGUsYyxzKX19fX0sbT1mdW5jdGlvbihlLHQscixuKXt2YXIgbz1pLmdldChyKTtvfHxpLnNldChyLG89e29ic2VydmVkOnUoKSxjaGFuZ2VSZWNvcmRzOltdfSksby5vYnNlcnZlZC5zZXQoZSx7YWNjZXB0TGlzdDpuLnNsaWNlKCksZGF0YTp0fSksdC5oYW5kbGVycy5zZXQocixvKX0sZz1mdW5jdGlvbihlLHQscixuKXt0LmhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG89dC5vYnNlcnZlZC5nZXQoZSkuYWNjZXB0TGlzdDsoInN0cmluZyIhPXR5cGVvZiBufHwtMT09PWEobyxuKSkmJmEobyxyLnR5cGUpPi0xJiZ0LmNoYW5nZVJlY29yZHMucHVzaChyKX0pfTtvPXUoKSxpPXUoKSxlLm9ic2VydmU9ZnVuY3Rpb24odCxyLG8pe2lmKCF0fHwib2JqZWN0IiE9dHlwZW9mIHQmJiJmdW5jdGlvbiIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5vYnNlcnZlIGNhbm5vdCBvYnNlcnZlIG5vbi1vYmplY3QiKTtpZigiZnVuY3Rpb24iIT10eXBlb2Ygcil0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3Qub2JzZXJ2ZSBjYW5ub3QgZGVsaXZlciB0byBub24tZnVuY3Rpb24iKTtpZihlLmlzRnJvemVuJiZlLmlzRnJvemVuKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5vYnNlcnZlIGNhbm5vdCBkZWxpdmVyIHRvIGEgZnJvemVuIGZ1bmN0aW9uIG9iamVjdCIpO2lmKG89PT1uKW89cztlbHNlIGlmKCFvfHwib2JqZWN0IiE9dHlwZW9mIG8pdGhyb3cgbmV3IFR5cGVFcnJvcigiVGhpcmQgYXJndW1lbnQgdG8gT2JqZWN0Lm9ic2VydmUgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzLiIpO3JldHVybiBfKHQscixvKSx0fSxlLnVub2JzZXJ2ZT1mdW5jdGlvbihlLHQpe2lmKG51bGw9PT1lfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC51bm9ic2VydmUgY2Fubm90IHVub2JzZXJ2ZSBub24tb2JqZWN0Iik7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LnVub2JzZXJ2ZSBjYW5ub3QgZGVsaXZlciB0byBub24tZnVuY3Rpb24iKTt2YXIgcixuPWkuZ2V0KHQpO3JldHVybiBuJiYocj1uLm9ic2VydmVkLmdldChlKSkmJihuLm9ic2VydmVkLmZvckVhY2goZnVuY3Rpb24oZSx0KXtoKGUuZGF0YSx0KX0pLHAoZnVuY3Rpb24oKXt2KG4sdCl9KSwxPT09bi5vYnNlcnZlZC5zaXplJiZuLm9ic2VydmVkLmhhcyhlKT9pWyJkZWxldGUiXSh0KTpuLm9ic2VydmVkWyJkZWxldGUiXShlKSwxPT09ci5kYXRhLmhhbmRsZXJzLnNpemU/b1siZGVsZXRlIl0oZSk6ci5kYXRhLmhhbmRsZXJzWyJkZWxldGUiXSh0KSksZX0sZS5nZXROb3RpZmllcj1mdW5jdGlvbih0KXtpZihudWxsPT09dHx8Im9iamVjdCIhPXR5cGVvZiB0JiYiZnVuY3Rpb24iIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3QuZ2V0Tm90aWZpZXIgY2Fubm90IGdldE5vdGlmaWVyIG5vbi1vYmplY3QiKTtyZXR1cm4gZS5pc0Zyb3plbiYmZS5pc0Zyb3plbih0KT9udWxsOmoodCl9LGUuZGVsaXZlckNoYW5nZVJlY29yZHM9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LmRlbGl2ZXJDaGFuZ2VSZWNvcmRzIGNhbm5vdCBkZWxpdmVyIHRvIG5vbi1mdW5jdGlvbiIpO3ZhciB0PWkuZ2V0KGUpO3QmJih0Lm9ic2VydmVkLmZvckVhY2goZnVuY3Rpb24oZSx0KXtoKGUuZGF0YSx0KX0pLHYodCxlKSl9fShPYmplY3QsQXJyYXksdGhpcyl9LHt9XSwxMTU6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5EYXRhT2JqZWN0T2JzZXJ2ZXI9ci5EYXRhT2JqZWN0UmVwb3J0ZXI9ci5TeW5jaGVyPXZvaWQgMCxlKCJtdXRhdGlvbm9ic2VydmVyLXNoaW0iKSxlKCJvYmplY3Qub2JzZXJ2ZSIpLGUoImFycmF5Lm9ic2VydmUiKTt2YXIgbz1lKCIuL3N5bmNoZXIvU3luY2hlciIpLGk9bihvKSxzPWUoIi4vc3luY2hlci9EYXRhT2JqZWN0UmVwb3J0ZXIiKSxjPW4ocyksYT1lKCIuL3N5bmNoZXIvRGF0YU9iamVjdE9ic2VydmVyIiksdT1uKGEpO3IuU3luY2hlcj1pWyJkZWZhdWx0Il0sci5EYXRhT2JqZWN0UmVwb3J0ZXI9Y1siZGVmYXVsdCJdLHIuRGF0YU9iamVjdE9ic2VydmVyPXVbImRlZmF1bHQiXX0seyIuL3N5bmNoZXIvRGF0YU9iamVjdE9ic2VydmVyIjoxMTgsIi4vc3luY2hlci9EYXRhT2JqZWN0UmVwb3J0ZXIiOjExOSwiLi9zeW5jaGVyL1N5bmNoZXIiOjEyMiwiYXJyYXkub2JzZXJ2ZSI6MSwibXV0YXRpb25vYnNlcnZlci1zaGltIjoxMTMsIm9iamVjdC5vYnNlcnZlIjoxMTR9XSwxMTY6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiKSxpPW4obykscz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiKSxjPW4ocyksYT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSx1PW4oYSksbD1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxmPW4obCksZD1lKCIuL1N5bmNPYmplY3QiKSxwPW4oZCksXz1lKCIuL0RhdGFPYmplY3RDaGlsZCIpLGI9bihfKSxoPWUoIi4uL3V0aWxzL3V0aWxzLmpzIikseT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyLG4sbyxpLHMpeygwLHVbImRlZmF1bHQiXSkodGhpcyxlKTt2YXIgYz10aGlzO2MuX3N5bmNoZXI9dCxjLl91cmw9cixjLl9zY2hlbWE9bixjLl9zdGF0dXM9byxjLl9zeW5jT2JqPW5ldyBwWyJkZWZhdWx0Il0oaSksYy5fY2hpbGRyZW5zPXMsYy5fdmVyc2lvbj0wLGMuX2NoaWxkSWQ9MCxjLl9jaGlsZHJlbk9iamVjdHM9e30sYy5fY2hpbGRyZW5MaXN0ZW5lcnM9W10sYy5fb3duZXI9dC5fb3duZXIsYy5fYnVzPXQuX2J1c31yZXR1cm4oMCxmWyJkZWZhdWx0Il0pKGUsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcyxyPXQuX3VybCsiL2NoaWxkcmVuLyI7dC5fY2hpbGRyZW5zJiZ0Ll9jaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbihuKXt2YXIgbz1yK24saT10Ll9idXMuYWRkTGlzdGVuZXIobyxmdW5jdGlvbihyKXtpZihyLmZyb20hPT1lLl9vd25lcilzd2l0Y2goY29uc29sZS5sb2coIkRhdGFPYmplY3QtQ2hpbGRyZW4tUkNWOiAiLHIpLHIudHlwZSl7Y2FzZSJjcmVhdGUiOnQuX29uQ2hpbGRDcmVhdGUocik7YnJlYWs7Y2FzZSJkZWxldGUiOmNvbnNvbGUubG9nKHIpO2JyZWFrO2RlZmF1bHQ6dC5fY2hhbmdlQ2hpbGRyZW4ocil9fSk7dC5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChpKX0pfX0se2tleToiX3JlbGVhc2VMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UucmVtb3ZlKCl9KSwoMCxjWyJkZWZhdWx0Il0pKGUuX2NoaWxkcmVuT2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbih0KXtlLl9jaGlsZHJlbk9iamVjdHNbdF0uX3JlbGVhc2VMaXN0ZW5lcnMoKX0pfX0se2tleToicGF1c2UiLHZhbHVlOmZ1bmN0aW9uKCl7dGhyb3ciTm90IGltcGxlbWVudGVkIn19LHtrZXk6InJlc3VtZSIsdmFsdWU6ZnVuY3Rpb24oKXt0aHJvdyJOb3QgaW1wbGVtZW50ZWQifX0se2tleToic3RvcCIsdmFsdWU6ZnVuY3Rpb24oKXt0aHJvdyJOb3QgaW1wbGVtZW50ZWQifX0se2tleToiYWRkQ2hpbGQiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyLl9jaGlsZElkKys7dmFyIG49ci5fb3duZXIrIiMiK3IuX2NoaWxkSWQsbz1yLl91cmwrIi9jaGlsZHJlbi8iK2Uscz17dHlwZToiY3JlYXRlIixmcm9tOnIuX293bmVyLHRvOm8sYm9keTp7cmVzb3VyY2U6bix2YWx1ZTp0fX07cmV0dXJuIG5ldyBpWyJkZWZhdWx0Il0oZnVuY3Rpb24oZSl7dmFyIGk9ci5fYnVzLnBvc3RNZXNzYWdlKHMpO2NvbnNvbGUubG9nKCJjcmVhdGUtcmVwb3J0ZXItY2hpbGQoICIrci5fb3duZXIrIiApOiAiLHMpO3ZhciBjPW5ldyBiWyJkZWZhdWx0Il0ocixuLHQsci5fb3duZXIsaSk7Yy5vbkNoYW5nZShmdW5jdGlvbihlKXtyLl9vbkNoYW5nZShlLHtwYXRoOm8sY2hpbGRJZDpufSl9KSxyLl9jaGlsZHJlbk9iamVjdHNbbl09YyxlKGMpfSl9fSx7a2V5OiJvbkFkZENoaWxkIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vbkFkZENoaWxkcmVuSGFuZGxlcj1lfX0se2tleToiX29uQ2hpbGRDcmVhdGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkucmVzb3VyY2U7Y29uc29sZS5sb2coImNyZWF0ZS1vYnNlcnZlci1jaGlsZCggIit0Ll9vd25lcisiICk6ICIsZSk7dmFyIG49bmV3IGJbImRlZmF1bHQiXSh0LHIsZS5ib2R5LnZhbHVlKTt0Ll9jaGlsZHJlbk9iamVjdHNbcl09bixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6MjAwLHNvdXJjZTp0Ll9vd25lcn19KX0pO3ZhciBvPXt0eXBlOmUudHlwZSxmcm9tOmUuZnJvbSx1cmw6ZS50byx2YWx1ZTplLmJvZHkudmFsdWUsY2hpbGRJZDpyLGlkZW50aXR5OmUuYm9keS5pZGVudGl0eX07dC5fb25BZGRDaGlsZHJlbkhhbmRsZXImJihjb25zb2xlLmxvZygiQURELUNISUxEUkVOLUVWRU5UOiAiLG8pLHQuX29uQWRkQ2hpbGRyZW5IYW5kbGVyKG8pKX19LHtrZXk6Il9vbkNoYW5nZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO2lmKHIuX3ZlcnNpb24rKywib24iPT09ci5fc3RhdHVzKXt2YXIgbj17dHlwZToidXBkYXRlIixmcm9tOnIuX3VybCx0bzpyLl91cmwrIi9jaGFuZ2VzIixib2R5Ont2ZXJzaW9uOnIuX3ZlcnNpb24sc291cmNlOnIuX293bmVyLGF0dHJpYnV0ZTplLmZpZWxkfX07ZS5vVHlwZT09PWQuT2JqZWN0VHlwZS5PQkpFQ1Q/ZS5jVHlwZSE9PWQuQ2hhbmdlVHlwZS5SRU1PVkUmJihuLmJvZHkudmFsdWU9ZS5kYXRhKToobi5ib2R5LmF0dHJpYnV0ZVR5cGU9ZS5vVHlwZSxuLmJvZHkudmFsdWU9ZS5kYXRhLGUuY1R5cGUhPT1kLkNoYW5nZVR5cGUuVVBEQVRFJiYobi5ib2R5Lm9wZXJhdGlvbj1lLmNUeXBlKSksdCYmKG4udG89dC5wYXRoLG4uYm9keS5yZXNvdXJjZT10LmNoaWxkSWQpLHIuX2J1cy5wb3N0TWVzc2FnZShuKX19fSx7a2V5OiJfY2hhbmdlT2JqZWN0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYoci5fdmVyc2lvbisxPT09dC5ib2R5LnZlcnNpb24pe3IuX3ZlcnNpb24rKzt2YXIgbj10LmJvZHkuYXR0cmlidXRlLG89KDAsaC5kZWVwQ2xvbmUpKHQuYm9keS52YWx1ZSksaT1lLmZpbmRCZWZvcmUobik7aWYodC5ib2R5LmF0dHJpYnV0ZVR5cGU9PT1kLk9iamVjdFR5cGUuQVJSQVkpaWYodC5ib2R5Lm9wZXJhdGlvbj09PWQuQ2hhbmdlVHlwZS5BREQpe3ZhciBzPWkub2JqLGM9aS5sYXN0O0FycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkocyxbYywwXS5jb25jYXQobykpfWVsc2UgaWYodC5ib2R5Lm9wZXJhdGlvbj09PWQuQ2hhbmdlVHlwZS5SRU1PVkUpe3ZhciBhPWkub2JqLHU9aS5sYXN0O2Euc3BsaWNlKHUsbyl9ZWxzZSBpLm9ialtpLmxhc3RdPW87ZWxzZSB0LmJvZHkudmFsdWU/aS5vYmpbaS5sYXN0XT1vOmRlbGV0ZSBpLm9ialtpLmxhc3RdfWVsc2UgY29uc29sZS5sb2coIlVOU1lOQ0hST05JWkVEIFZFUlNJT046IChkYXRhID0+ICIrci5fdmVyc2lvbisiLCBtc2cgPT4gIit0LmJvZHkudmVyc2lvbisiKSIpfX0se2tleToiX2NoYW5nZUNoaWxkcmVuIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2NvbnNvbGUubG9nKCJDaGFuZ2UgY2hpbGRyZW46ICIsdC5fb3duZXIsZSk7dmFyIHI9ZS5ib2R5LnJlc291cmNlLG49dC5fY2hpbGRyZW5PYmplY3RzW3JdO24/dC5fY2hhbmdlT2JqZWN0KG4uX3N5bmNPYmosZSk6Y29uc29sZS5sb2coIk5vIGNoaWxkcmVuIGZvdW5kIGZvcjogIixyKX19LHtrZXk6InVybCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3VybH19LHtrZXk6InNjaGVtYSIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NjaGVtYX19LHtrZXk6InN0YXR1cyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXR1c319LHtrZXk6ImRhdGEiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW5jT2JqLmRhdGF9fSx7a2V5OiJjaGlsZHJlbnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jaGlsZHJlbk9iamVjdHN9fV0pLGV9KCk7clsiZGVmYXVsdCJdPXksdC5leHBvcnRzPXJbImRlZmF1bHQiXX0seyIuLi91dGlscy91dGlscy5qcyI6MTIzLCIuL0RhdGFPYmplY3RDaGlsZCI6MTE3LCIuL1N5bmNPYmplY3QiOjEyMSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjo3LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6OSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxM31dLDExNzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxpPW4obykscz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxjPW4ocyksYT1lKCIuL1N5bmNPYmplY3QiKSx1PW4oYSksbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyLG4sbyxzKXsoMCxpWyJkZWZhdWx0Il0pKHRoaXMsZSk7dmFyIGM9dGhpcztjLl9wYXJlbnQ9dCxjLl9jaGlsZElkPXIsYy5fb3duZXI9byxjLl9tc2dJZD1zLGMuX3N5bmNPYmo9bmV3IHVbImRlZmF1bHQiXShuKSxjLl9idXM9dC5fYnVzLGMuX2FsbG9jYXRlTGlzdGVuZXJzKCl9cmV0dXJuKDAsY1siZGVmYXVsdCJdKShlLFt7a2V5OiJfYWxsb2NhdGVMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9vd25lciYmKGUuX2xpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl9vd25lcixmdW5jdGlvbih0KXsicmVzcG9uc2UiPT09dC50eXBlJiZ0LmlkPT09ZS5fbXNnSWQmJihjb25zb2xlLmxvZygiRGF0YU9iamVjdENoaWxkLm9uUmVzcG9uc2U6Iix0KSxlLl9vblJlc3BvbnNlKHQpKX0pKX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fbGlzdGVuZXImJmUuX2xpc3RlbmVyLnJlbW92ZSgpfX0se2tleToiZGVsZXRlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZGVsZXRlIGUuX3BhcmVudC5fY2hpbGRyZW5bZS5fY2hpbGRJZF0sZS5fcmVsZWFzZUxpc3RlbmVycygpfX0se2tleToib25DaGFuZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX3N5bmNPYmoub2JzZXJ2ZShmdW5jdGlvbih0KXtlKHQpfSl9fSx7a2V5OiJvblJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vblJlc3BvbnNlSGFuZGxlcj1lfX0se2tleToiX29uUmVzcG9uc2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj17dHlwZTplLnR5cGUsdXJsOmUuYm9keS5zb3VyY2UsY29kZTplLmJvZHkuY29kZX07dC5fb25SZXNwb25zZUhhbmRsZXImJnQuX29uUmVzcG9uc2VIYW5kbGVyKHIpfX0se2tleToiY2hpbGRJZCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoaWxkSWR9fSx7a2V5OiJkYXRhIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3luY09iai5kYXRhfX1dKSxlfSgpO3JbImRlZmF1bHQiXT1sLHQuZXhwb3J0cz1yWyJkZWZhdWx0Il19LHsiLi9TeW5jT2JqZWN0IjoxMjEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTN9XSwxMTg6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIiksaT1uKG8pLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksYz1uKHMpLGE9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIiksdT1uKGEpLGw9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksZj1uKGwpLGQ9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iKSxwPW4oZCksXz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0IiksYj1uKF8pLGg9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIikseT1uKGgpLHY9ZSgiLi9EYXRhT2JqZWN0Iiksaj1uKHYpLG09ZSgiLi9EYXRhT2JqZWN0Q2hpbGQiKSxnPW4obSksdz17QU5ZOiJhbnkiLFNUQVJUOiJzdGFydCIsRVhBQ1Q6ImV4YWN0In0sTz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8scyxhLGwpeygwLHVbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgZj0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxzLmRhdGEsYSkpLGQ9ZjtyZXR1cm4gZC5fdmVyc2lvbj1sLGQuX2ZpbHRlcnM9e30sZC5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uKGUpe2QuX29uRmlsdGVyKGUpfSksKDAsaVsiZGVmYXVsdCJdKShzLmNoaWxkcmVucykuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1zLmNoaWxkcmVuc1tlXTtkLl9jaGlsZHJlbk9iamVjdHNbZV09bmV3IGdbImRlZmF1bHQiXShkLGUsdCl9KSxkLl9hbGxvY2F0ZUxpc3RlbmVycygpLGZ9cmV0dXJuKDAseVsiZGVmYXVsdCJdKSh0LGUpLCgwLGZbImRlZmF1bHQiXSkodCxbe2tleToiX2FsbG9jYXRlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpeygwLGJbImRlZmF1bHQiXSkoKDAsY1siZGVmYXVsdCJdKSh0LnByb3RvdHlwZSksIl9hbGxvY2F0ZUxpc3RlbmVycyIsdGhpcykuY2FsbCh0aGlzKTt2YXIgZT10aGlzO2UuX2NoYW5nZUxpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl91cmwrIi9jaGFuZ2VzIixmdW5jdGlvbih0KXsidXBkYXRlIj09PXQudHlwZSYmKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0T2JzZXJ2ZXItIitlLl91cmwrIi1SQ1Y6ICIsdCksZS5fY2hhbmdlT2JqZWN0KGUuX3N5bmNPYmosdCkpfSl9fSx7a2V5OiJfcmVsZWFzZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXsoMCxiWyJkZWZhdWx0Il0pKCgwLGNbImRlZmF1bHQiXSkodC5wcm90b3R5cGUpLCJfcmVsZWFzZUxpc3RlbmVycyIsdGhpcykuY2FsbCh0aGlzKTt2YXIgZT10aGlzO2UuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpfX0se2tleToiZGVsZXRlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fcmVsZWFzZUxpc3RlbmVycygpLGRlbGV0ZSBlLl9zeW5jaGVyLl9vYnNlcnZlcnNbZS5fdXJsXX19LHtrZXk6InVuc3Vic2NyaWJlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD17dHlwZToidW5zdWJzY3JpYmUiLGZyb206ZS5fb3duZXIsdG86ZS5fc3luY2hlci5fc3ViVVJMLGJvZHk6e3Jlc291cmNlOmUuX3VybH19O2UuX2J1cy5wb3N0TWVzc2FnZSh0LGZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKCJEYXRhT2JqZWN0T2JzZXJ2ZXItVU5TVUJTQ1JJQkU6ICIsdCksMjAwPT09dC5ib2R5LmNvZGUmJihlLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIGUuX3N5bmNoZXIuX29ic2VydmVyc1tlLl91cmxdKX0pfX0se2tleToib25DaGFuZ2UiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZSxuPXt0eXBlOncuRVhBQ1QsY2FsbGJhY2s6dH0sbz1lLmluZGV4T2YoIioiKTtvPT09ZS5sZW5ndGgtMSYmKDA9PT1vP24udHlwZT13LkFOWToobi50eXBlPXcuU1RBUlQscj1lLnN1YnN0cigwLGUubGVuZ3RoLTEpKSksdGhpcy5fZmlsdGVyc1tyXT1ufX0se2tleToiX29uRmlsdGVyIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzOygwLGlbImRlZmF1bHQiXSkodC5fZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbihyKXt2YXIgbj10Ll9maWx0ZXJzW3JdO24udHlwZT09PXcuQU5ZP24uY2FsbGJhY2soZSk6bi50eXBlPT09dy5TVEFSVD8wPT09ZS5maWVsZC5pbmRleE9mKHIpJiZuLmNhbGxiYWNrKGUpOm4udHlwZT09PXcuRVhBQ1QmJmUuZmllbGQ9PT1yJiZuLmNhbGxiYWNrKGUpfSl9fV0pLHR9KGpbImRlZmF1bHQiXSk7clsiZGVmYXVsdCJdPU8sdC5leHBvcnRzPXJbImRlZmF1bHQiXX0seyIuL0RhdGFPYmplY3QiOjExNiwiLi9EYXRhT2JqZWN0Q2hpbGQiOjExNywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo2LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQiOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTZ9XSwxMTk6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIiksaT1uKG8pLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksYz1uKHMpLGE9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIiksdT1uKGEpLGw9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksZj1uKGwpLGQ9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iKSxwPW4oZCksXz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0IiksYj1uKF8pLGg9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIikseT1uKGgpLHY9ZSgiLi9EYXRhT2JqZWN0Iiksaj1uKHYpLG09ZSgiLi4vdXRpbHMvdXRpbHMuanMiKSxnPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLHMpeygwLHVbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgYT0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxpLHMpKSxsPWE7cmV0dXJuIGwuX3N1YnNjcmlwdGlvbnM9e30sbC5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJEYXRhT2JqZWN0UmVwb3J0ZXItIityKyItU0VORDogIixlKSxsLl9vbkNoYW5nZShlKX0pLGwuX2FsbG9jYXRlTGlzdGVuZXJzKCksYX1yZXR1cm4oMCx5WyJkZWZhdWx0Il0pKHQsZSksKDAsZlsiZGVmYXVsdCJdKSh0LFt7a2V5OiJfYWxsb2NhdGVMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7KDAsYlsiZGVmYXVsdCJdKSgoMCxjWyJkZWZhdWx0Il0pKHQucHJvdG90eXBlKSwiX2FsbG9jYXRlTGlzdGVuZXJzIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBlPXRoaXM7ZS5fcmVzcG9uc2VMaXN0ZW5lcj1lLl9idXMuYWRkTGlzdGVuZXIoZS5fdXJsLGZ1bmN0aW9uKHQpeyJyZXNwb25zZSI9PT10LnR5cGUmJmUuX29uUmVzcG9uc2UodCl9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpeygwLGJbImRlZmF1bHQiXSkoKDAsY1siZGVmYXVsdCJdKSh0LnByb3RvdHlwZSksIl9yZWxlYXNlTGlzdGVuZXJzIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBlPXRoaXM7ZS5fcmVzcG9uc2VMaXN0ZW5lci5yZW1vdmUoKX19LHtrZXk6Imludml0ZU9ic2VydmVycyIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXt0eXBlOiJjcmVhdGUiLGZyb206dC5fc3luY2hlci5fb3duZXIsdG86dC5fc3luY2hlci5fc3ViVVJMLGJvZHk6e3Jlc291cmNlOnQuX3VybCxzY2hlbWE6dC5fc2NoZW1hLHZhbHVlOnQuX3N5bmNPYmouZGF0YSxhdXRob3Jpc2U6ZX19O3QuX2J1cy5wb3N0TWVzc2FnZShyKX19LHtrZXk6ImRlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e3R5cGU6ImRlbGV0ZSIsZnJvbTplLl9vd25lcix0bzplLl9zeW5jaGVyLl9zdWJVUkwsYm9keTp7cmVzb3VyY2U6ZS5fdXJsfX07ZS5fYnVzLnBvc3RNZXNzYWdlKHQsZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIkRhdGFPYmplY3RSZXBvcnRlci1ERUxFVEU6ICIsdCksMjAwPT09dC5ib2R5LmNvZGUmJihlLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIGUuX3N5bmNoZXIuX3JlcG9ydGVyc1tlLl91cmxdKX0pfX0se2tleToib25TdWJzY3JpcHRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcj1lfX0se2tleToib25SZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25SZXNwb25zZUhhbmRsZXI9ZX19LHtrZXk6Il9vbkZvcndhcmQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7c3dpdGNoKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0UmVwb3J0ZXItUkNWOiAiLGUpLGUuYm9keS50eXBlKXtjYXNlInN1YnNjcmliZSI6dC5fb25TdWJzY3JpYmUoZSk7YnJlYWs7Y2FzZSJ1bnN1YnNjcmliZSI6dC5fb25VblN1YnNjcmliZShlKX19fSx7a2V5OiJfb25TdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkuZnJvbSxuPXt0eXBlOmUuYm9keS50eXBlLHVybDpyLGFjY2VwdDpmdW5jdGlvbigpe3ZhciBuPXt1cmw6cixzdGF0dXM6Im9uIn07dC5fc3Vic2NyaXB0aW9uc1tyXT1uO3ZhciBvPXt9O3JldHVybigwLGlbImRlZmF1bHQiXSkodC5fY2hpbGRyZW5PYmplY3RzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciByPXQuX2NoaWxkcmVuT2JqZWN0c1tlXS5kYXRhO29bZV09KDAsbS5kZWVwQ2xvbmUpKHIpfSksdC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6MjAwLHNjaGVtYTp0Ll9zY2hlbWEsdmVyc2lvbjp0Ll92ZXJzaW9uLHZhbHVlOntkYXRhOigwLG0uZGVlcENsb25lKSh0LmRhdGEpLGNoaWxkcmVuczpvfX19KSxufSxyZWplY3Q6ZnVuY3Rpb24ocil7dC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6NDAzLGRlc2M6cn19KX19O3QuX29uU3Vic2NyaXB0aW9uSGFuZGxlciYmKGNvbnNvbGUubG9nKCJTVUJTQ1JJUFRJT04tRVZFTlQ6ICIsbiksdC5fb25TdWJzY3JpcHRpb25IYW5kbGVyKG4pKX19LHtrZXk6Il9vblVuU3Vic2NyaWJlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9ZS5ib2R5LmZyb20sbj10Ll9zdWJzY3JpcHRpb25zW3JdO2RlbGV0ZSB0Ll9zdWJzY3JpcHRpb25zW3JdO3ZhciBvPXt0eXBlOmUuYm9keS50eXBlLHVybDpyLG9iamVjdDpufTt0Ll9vblN1YnNjcmlwdGlvbkhhbmRsZXImJihjb25zb2xlLmxvZygiVU4tU1VCU0NSSVBUSU9OLUVWRU5UOiAiLG8pLHQuX29uU3Vic2NyaXB0aW9uSGFuZGxlcihvKSl9fSx7a2V5OiJfb25SZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXt0eXBlOmUudHlwZSx1cmw6ZS5mcm9tLGNvZGU6ZS5ib2R5LmNvZGV9O3QuX29uUmVzcG9uc2VIYW5kbGVyJiYoY29uc29sZS5sb2coIlJFU1BPTlNFLUVWRU5UOiAiLHIpLHQuX29uUmVzcG9uc2VIYW5kbGVyKHIpKX19LHtrZXk6InN1YnNjcmlwdGlvbnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zfX1dKSx0fShqWyJkZWZhdWx0Il0pO3JbImRlZmF1bHQiXT1nLHQuZXhwb3J0cz1yWyJkZWZhdWx0Il19LHsiLi4vdXRpbHMvdXRpbHMuanMiOjEyMywiLi9EYXRhT2JqZWN0IjoxMTYsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjo3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0IjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE2fV0sMTIwOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLGk9bihvKSxzPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLGM9bihzKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LHIsbixvKXsoMCxpWyJkZWZhdWx0Il0pKHRoaXMsZSk7dmFyIHM9dGhpcztzLl9vd25lcj10LHMuX3VybD1yLHMuX2J1cz1uLHMuX2NoaWxkcmVuPW8scy5fY2hhbmdlcz1bXSxzLl9hbGxvY2F0ZUxpc3RlbmVycygpfXJldHVybigwLGNbImRlZmF1bHQiXSkoZSxbe2tleToiX2FsbG9jYXRlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fbGlzdGVuZXI9ZS5fYnVzLmFkZExpc3RlbmVyKGUuX3VybCxmdW5jdGlvbih0KXtjb25zb2xlLmxvZygiRGF0YVByb3Zpc2lvbmFsLSIrZS5fdXJsKyItUkNWOiAiLHQpLGUuX2NoYW5nZXMucHVzaCh0KX0pfX0se2tleToiX3JlbGVhc2VMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9saXN0ZW5lci5yZW1vdmUoKX19LHtrZXk6ImFwcGx5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuX2NoYW5nZXMuZm9yRWFjaChmdW5jdGlvbih0KXtlLl9jaGFuZ2VPYmplY3QoZS5fc3luY09iaix0KX0pfX0se2tleToiY2hpbGRyZW4iLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jaGlsZHJlbn19XSksZX0oKTtyWyJkZWZhdWx0Il09YSx0LmV4cG9ydHM9clsiZGVmYXVsdCJdfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTN9XSwxMjE6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5PYmplY3RUeXBlPXIuQ2hhbmdlVHlwZT12b2lkIDA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIiksaT1uKG8pLHM9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIiksYz1uKHMpLGE9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksdT1uKGEpLGw9ZSgiLi4vdXRpbHMvdXRpbHMuanMiKSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXsoMCxjWyJkZWZhdWx0Il0pKHRoaXMsZSk7dmFyIHI9dGhpcztyLl9vYnNlcnZlcnM9W10sci5fZmlsdGVycz17fSx0P3IuX2RhdGE9KDAsbC5kZWVwQ2xvbmUpKHQpOnIuX2RhdGE9e30sci5faW50ZXJuYWxPYnNlcnZlKG5ldyBkLHIuX2RhdGEpfXJldHVybigwLHVbImRlZmF1bHQiXSkoZSxbe2tleToib2JzZXJ2ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb2JzZXJ2ZXJzLnB1c2goZSl9fSx7a2V5OiJmaW5kIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KCIuIik7cmV0dXJuIHRoaXMuX2ZpbmRXaXRoU3BsaXQodCl9fSx7a2V5OiJmaW5kQmVmb3JlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17fSxyPWUuc3BsaXQoIi4iKTtyZXR1cm4gdC5sYXN0PXIucG9wKCksdC5vYmo9dGhpcy5fZmluZFdpdGhTcGxpdChyKSx0fX0se2tleToiX2ZpbmRXaXRoU3BsaXQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2RhdGE7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXt0PXRbZV19KSx0fX0se2tleToiX2ZpcmVFdmVudCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24odCl7dChlKX0pfX0se2tleToiX2lzT2JzZXJ2YWJsZSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uc3RydWN0b3I9PT1PYmplY3R8fGUuY29uc3RydWN0b3I9PT1BcnJheX19LHtrZXk6Il9pbnRlcm5hbE9ic2VydmUiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztpZihyLl9pc09ic2VydmFibGUodCkpe3ZhciBuPWZ1bmN0aW9uKHQpe3IuX29uQ2hhbmdlcyhlLHQpfTtpZih0LmNvbnN0cnVjdG9yPT09T2JqZWN0KXtPYmplY3Qub2JzZXJ2ZSh0LG4pO2Zvcih2YXIgbyBpbiB0KXIuX2lzT2JzZXJ2YWJsZSh0W29dKSYmci5faW50ZXJuYWxPYnNlcnZlKGVbIm5ldyJdKG8pLHRbb10pfWVsc2UgaWYodC5jb25zdHJ1Y3Rvcj09PUFycmF5KXtBcnJheS5vYnNlcnZlKHQsbik7Zm9yKHZhciBpIGluIHQpaWYoci5faXNPYnNlcnZhYmxlKHRbaV0pKXt2YXIgcz1lWyJuZXciXShuZXcgcCh0W2ldLGkpKTtyLl9pbnRlcm5hbE9ic2VydmUocyx0W2ldKX19fX19LHtrZXk6Il9vbkNoYW5nZXMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztmb3IodmFyIG4gaW4gdCl7dmFyIG89dFtuXS5vYmplY3QsaT12b2lkIDA7aWYoby5jb25zdHJ1Y3Rvcj09PU9iamVjdCYmKGk9Yi5PQkpFQ1QpLG8uY29uc3RydWN0b3I9PT1BcnJheSYmKGk9Yi5BUlJBWSksInNwbGljZSI9PT10W25dLnR5cGUpIWZ1bmN0aW9uKCl7dmFyIHM9dFtuXS5pbmRleCxjPWVbIm5ldyJdKCIiK3MpLGE9Yy50b1N0cmluZygpLHU9dFtuXS5yZW1vdmVkLmxlbmd0aDtpZigwIT09dSl7dmFyIGY9dFtuXS5yZW1vdmVkO2YuZm9yRWFjaChmdW5jdGlvbih0LG4pe3IuX2lzT2JzZXJ2YWJsZSh0KSYmZS5yZW1vdmVJbmRleChzK24pfSksci5fZmlyZUV2ZW50KHtjVHlwZTpfLlJFTU9WRSxvVHlwZTppLGZpZWxkOmEsZGF0YTp1fSl9dmFyIGQ9dFtuXS5hZGRlZENvdW50O2lmKDAhPT1kKXt2YXIgYj1vLnNsaWNlKHMscytkKTtiLmZvckVhY2goZnVuY3Rpb24odCxuKXtpZihyLl9pc09ic2VydmFibGUodCkpe3ZhciBvPWVbIm5ldyJdKG5ldyBwKHQscytuKSk7ci5faW50ZXJuYWxPYnNlcnZlKG8sdCl9fSksci5fZmlyZUV2ZW50KHtjVHlwZTpfLkFERCxvVHlwZTppLGZpZWxkOmEsZGF0YTooMCxsLmRlZXBDbG9uZSkoYil9KX1zIT09by5sZW5ndGgtMSYmZS5yZUluZGV4RnJvbShvKX0oKTtlbHNle3ZhciBzPWVbIm5ldyJdKHRbbl0ubmFtZSksYz1zLnRvU3RyaW5nKCk7aWYoLTEhPT1jLmluZGV4T2YoIlN5bWJvbCIpKWNvbnRpbnVlO3ZhciBhPW9bdFtuXS5uYW1lXTsidXBkYXRlIj09PXRbbl0udHlwZSYmdGhpcy5fZmlyZUV2ZW50KHtjVHlwZTpfLlVQREFURSxvVHlwZTppLGZpZWxkOmMsZGF0YTooMCxsLmRlZXBDbG9uZSkoYSl9KSwiYWRkIj09PXRbbl0udHlwZSYmKHRoaXMuX2ludGVybmFsT2JzZXJ2ZShzLGEpLHRoaXMuX2ZpcmVFdmVudCh7Y1R5cGU6Xy5BREQsb1R5cGU6aSxmaWVsZDpjLGRhdGE6KDAsbC5kZWVwQ2xvbmUpKGEpfSkpLCJkZWxldGUiPT09dFtuXS50eXBlJiZ0aGlzLl9maXJlRXZlbnQoe2NUeXBlOl8uUkVNT1ZFLG9UeXBlOmksZmllbGQ6Y30pfX19fSx7a2V5OiJkYXRhIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX19XSksZX0oKSxkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeygwLGNbImRlZmF1bHQiXSkodGhpcyxlKSx0aGlzLl9wYXRoPVtdLHRoaXMuX29ic2VydmFibGVzPXt9fXJldHVybigwLHVbImRlZmF1bHQiXSkoZSxbe2tleToicmVtb3ZlSW5kZXgiLHZhbHVlOmZ1bmN0aW9uKGUpe2RlbGV0ZSB0aGlzLl9vYnNlcnZhYmxlc1tlXX19LHtrZXk6InJlSW5kZXhGcm9tIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzOygwLGlbImRlZmF1bHQiXSkodGhpcy5fb2JzZXJ2YWJsZXMpLmZvckVhY2goZnVuY3Rpb24ocil7dmFyIG49dC5fb2JzZXJ2YWJsZXNbcl0sbz1lLmluZGV4T2Yobi5vYmopO24uaWR4IT1vJiYobi5pZHg9byxkZWxldGUgdC5fb2JzZXJ2YWJsZXNbcl0sDQp0Ll9vYnNlcnZhYmxlc1tvXT1uKX0pfX0se2tleToibmV3Iix2YWx1ZTpmdW5jdGlvbihlKXtlLmNvbnN0cnVjdG9yPT1wJiYodGhpcy5fb2JzZXJ2YWJsZXNbZS5pZHhdPWUpO3ZhciB0PXRoaXMuY2xvbmUoKTtyZXR1cm4gdC5fcGF0aC5wdXNoKGUpLHR9fSx7a2V5OiJjbG9uZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZTtyZXR1cm4gdGhpcy5fcGF0aC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuX3BhdGgucHVzaChlKX0pLHR9fSx7a2V5OiJ0b1N0cmluZyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0iIjtyZXR1cm4gdGhpcy5fcGF0aC5mb3JFYWNoKGZ1bmN0aW9uKHQscil7MD09PXI/ZT10LnRvU3RyaW5nKCk6ZSs9Ii4iK3QudG9TdHJpbmcoKX0pLGV9fV0pLGV9KCkscD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyKXsoMCxjWyJkZWZhdWx0Il0pKHRoaXMsZSksdGhpcy5vYmo9dCx0aGlzLmlkeD1yfXJldHVybigwLHVbImRlZmF1bHQiXSkoZSxbe2tleToidG9TdHJpbmciLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaWR4LnRvU3RyaW5nKCl9fV0pLGV9KCksXz1yLkNoYW5nZVR5cGU9e1VQREFURToidXBkYXRlIixBREQ6ImFkZCIsUkVNT1ZFOiJyZW1vdmUifSxiPXIuT2JqZWN0VHlwZT17T0JKRUNUOiJvYmplY3QiLEFSUkFZOiJhcnJheSJ9O3JbImRlZmF1bHQiXT1mfSx7Ii4uL3V0aWxzL3V0aWxzLmpzIjoxMjMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyI6NywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxM31dLDEyMjpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSIpLGk9bihvKSxzPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLGM9bihzKSxhPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLHU9bihhKSxsPWUoIi4vRGF0YU9iamVjdFJlcG9ydGVyIiksZj1uKGwpLGQ9ZSgiLi9EYXRhT2JqZWN0T2JzZXJ2ZXIiKSxwPW4oZCksXz1lKCIuL0RhdGFQcm92aXNpb25hbCIpLGI9bihfKSxoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LHIsbil7KDAsY1siZGVmYXVsdCJdKSh0aGlzLGUpO3ZhciBvPXRoaXM7by5fb3duZXI9dCxvLl9idXM9cixvLl9zdWJVUkw9bi5ydW50aW1lVVJMKyIvc20iLG8uX3JlcG9ydGVycz17fSxvLl9vYnNlcnZlcnM9e30sby5fcHJvdmlzaW9uYWxzPXt9LHIuYWRkTGlzdGVuZXIodCxmdW5jdGlvbihlKXtpZihlLmZyb20hPT10KXN3aXRjaChjb25zb2xlLmxvZygiU3luY2hlci1SQ1Y6ICIsZSksZS50eXBlKXtjYXNlImZvcndhcmQiOm8uX29uRm9yd2FyZChlKTticmVhaztjYXNlImNyZWF0ZSI6by5fb25SZW1vdGVDcmVhdGUoZSk7YnJlYWs7Y2FzZSJkZWxldGUiOm8uX29uUmVtb3RlRGVsZXRlKGUpfX0pfXJldHVybigwLHVbImRlZmF1bHQiXSkoZSxbe2tleToiY3JlYXRlIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcztyLnJlcG9ydGVyPW4uX293bmVyLHIuc2NoZW1hPWU7dmFyIG89e3R5cGU6ImNyZWF0ZSIsZnJvbTpuLl9vd25lcix0bzpuLl9zdWJVUkwsYm9keTp7c2NoZW1hOmUsdmFsdWU6cixhdXRob3Jpc2U6dH19O3JldHVybiBuZXcgaVsiZGVmYXVsdCJdKGZ1bmN0aW9uKHQsaSl7bi5fYnVzLnBvc3RNZXNzYWdlKG8sZnVuY3Rpb24obyl7aWYoY29uc29sZS5sb2coImNyZWF0ZS1yZXNwb25zZTogIixvKSwyMDA9PT1vLmJvZHkuY29kZSl7dmFyIHM9by5ib2R5LnJlc291cmNlLGM9bmV3IGZbImRlZmF1bHQiXShuLHMsZSwib24iLHIsby5ib2R5LmNoaWxkcmVuUmVzb3VyY2VzKTtuLl9yZXBvcnRlcnNbc109Yyx0KGMpfWVsc2UgaShvLmJvZHkuZGVzYyl9KX0pfX0se2tleToic3Vic2NyaWJlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbj17dHlwZToic3Vic2NyaWJlIixmcm9tOnIuX293bmVyLHRvOnIuX3N1YlVSTCxib2R5OntzY2hlbWE6ZSxyZXNvdXJjZTp0fX07cmV0dXJuIG5ldyBpWyJkZWZhdWx0Il0oZnVuY3Rpb24obyxpKXtyLl9idXMucG9zdE1lc3NhZ2UobixmdW5jdGlvbihuKXtjb25zb2xlLmxvZygic3Vic2NyaWJlLXJlc3BvbnNlOiAiLG4pO3ZhciBzPXIuX3Byb3Zpc2lvbmFsc1t0XTtpZihkZWxldGUgci5fcHJvdmlzaW9uYWxzW3RdLHMmJnMuX3JlbGVhc2VMaXN0ZW5lcnMoKSxuLmJvZHkuY29kZTwyMDApcz1uZXcgYlsiZGVmYXVsdCJdKHIuX293bmVyLHQsci5fYnVzLG4uYm9keS5jaGlsZHJlblJlc291cmNlcyksci5fcHJvdmlzaW9uYWxzW3RdPXM7ZWxzZSBpZigyMDA9PT1uLmJvZHkuY29kZSl7dmFyIGM9bmV3IHBbImRlZmF1bHQiXShyLHQsZSwib24iLG4uYm9keS52YWx1ZSxzLmNoaWxkcmVuLG4uYm9keS52ZXJzaW9uKTtyLl9vYnNlcnZlcnNbdF09YyxvKGMpLHMuYXBwbHkoYyl9ZWxzZSBpKG4uYm9keS5kZXNjKX0pfSl9fSx7a2V5OiJvbk5vdGlmaWNhdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25Ob3RpZmljYXRpb25IYW5kbGVyPWV9fSx7a2V5OiJfb25Gb3J3YXJkIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dC5fcmVwb3J0ZXJzW2UuYm9keS50b107ci5fb25Gb3J3YXJkKGUpfX0se2tleToiX29uUmVtb3RlQ3JlYXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9ZS5mcm9tLnNsaWNlKDAsLTEzKSxuPXt0eXBlOmUudHlwZSxmcm9tOmUuYm9keS5zb3VyY2UsdXJsOnIsc2NoZW1hOmUuYm9keS5zY2hlbWEsdmFsdWU6ZS5ib2R5LnZhbHVlLGlkZW50aXR5OmUuYm9keS5pZGVudGl0eSxhY2s6ZnVuY3Rpb24ocil7dmFyIG49MjAwO3ImJihuPXIpLHQuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOm59fSl9fTt0Ll9vbk5vdGlmaWNhdGlvbkhhbmRsZXImJihjb25zb2xlLmxvZygiTk9USUZJQ0FUSU9OLUVWRU5UOiAiLG4pLHQuX29uTm90aWZpY2F0aW9uSGFuZGxlcihuKSl9fSx7a2V5OiJfb25SZW1vdGVEZWxldGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkucmVzb3VyY2Usbj10Ll9vYnNlcnZlcnNbcl07aWYobil7dmFyIG89e3R5cGU6ZS50eXBlLHVybDpyLGlkZW50aXR5OmUuYm9keS5pZGVudGl0eSxhY2s6ZnVuY3Rpb24ocil7dmFyIG89MjAwO3ImJihvPXIpLDIwMD09PW8mJm5bImRlbGV0ZSJdKCksdC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6byxzb3VyY2U6dC5fb3duZXJ9fSl9fTt0Ll9vbk5vdGlmaWNhdGlvbkhhbmRsZXImJihjb25zb2xlLmxvZygiTk9USUZJQ0FUSU9OLUVWRU5UOiAiLG8pLHQuX29uTm90aWZpY2F0aW9uSGFuZGxlcihvKSl9ZWxzZSB0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZTo0MDQsc291cmNlOnQuX293bmVyfX0pfX0se2tleToib3duZXIiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vd25lcn19LHtrZXk6InJlcG9ydGVycyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlcG9ydGVyc319LHtrZXk6Im9ic2VydmVycyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29ic2VydmVyc319XSksZX0oKTtyWyJkZWZhdWx0Il09aCx0LmV4cG9ydHM9clsiZGVmYXVsdCJdfSx7Ii4vRGF0YU9iamVjdE9ic2VydmVyIjoxMTgsIi4vRGF0YU9iamVjdFJlcG9ydGVyIjoxMTksIi4vRGF0YVByb3Zpc2lvbmFsIjoxMjAsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjo5LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjEzfV0sMTIzOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ZnVuY3Rpb24gbyhlKXt2YXIgdD0vKFthLXpBLVotXSopOlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fXCt+Iz1cL10qKS9naSxyPSIkMSwkMiwkMyIsbj1lLnJlcGxhY2UodCxyKS5zcGxpdCgiLCIpO25bMF09PT1lJiYoblswXT0iaHR0cHMiLG5bMV09ZSk7dmFyIG89e3R5cGU6blswXSxkb21haW46blsxXSxpZGVudGl0eTpuWzJdfTtyZXR1cm4gb31mdW5jdGlvbiBpKGUpe3JldHVybiBlP0pTT04ucGFyc2UoKDAsY1siZGVmYXVsdCJdKShlKSk6dm9pZCAwfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiKSxjPW4ocyk7ci5kaXZpZGVVUkw9byxyLmRlZXBDbG9uZT1pfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6Mn1dfSx7fSxbMTE1XSkoMTE1KX0pOwp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKfSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwoKLyogTW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGVzZSBvcHRpb25zIGF0IGpzaGludC5jb20vZG9jcy9vcHRpb25zICovCi8qIGpzaGludCBicm93c2VyOiB0cnVlLCBjYW1lbGNhc2U6IHRydWUsIGN1cmx5OiB0cnVlLCBkZXZlbDogdHJ1ZSwKICAgZXFlcWVxOiB0cnVlLCBmb3JpbjogZmFsc2UsIGdsb2JhbHN0cmljdDogdHJ1ZSwgbm9kZTogdHJ1ZSwKICAgcXVvdG1hcms6IHNpbmdsZSwgdW5kZWY6IHRydWUsIHVudXNlZDogc3RyaWN0ICovCi8qIGdsb2JhbCBtb3pSVENJY2VDYW5kaWRhdGUsIG1velJUQ1BlZXJDb25uZWN0aW9uLCBQcm9taXNlLAptb3pSVENTZXNzaW9uRGVzY3JpcHRpb24sIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLCBNZWRpYVN0cmVhbVRyYWNrLApNZWRpYVN0cmVhbSwgUlRDSWNlR2F0aGVyZXIsIFJUQ0ljZVRyYW5zcG9ydCwgUlRDRHRsc1RyYW5zcG9ydCwKUlRDUnRwU2VuZGVyLCBSVENSdHBSZWNlaXZlciovCi8qIGV4cG9ydGVkIHRyYWNlLHJlcXVlc3RVc2VyTWVkaWEgKi8KCid1c2Ugc3RyaWN0JzsKCnZhciBnZXRVc2VyTWVkaWEgPSBudWxsOwp2YXIgYXR0YWNoTWVkaWFTdHJlYW0gPSBudWxsOwp2YXIgcmVhdHRhY2hNZWRpYVN0cmVhbSA9IG51bGw7CnZhciB3ZWJydGNEZXRlY3RlZEJyb3dzZXIgPSBudWxsOwp2YXIgd2VicnRjRGV0ZWN0ZWRWZXJzaW9uID0gbnVsbDsKdmFyIHdlYnJ0Y01pbmltdW1WZXJzaW9uID0gbnVsbDsKdmFyIHdlYnJ0Y1V0aWxzID0gewogIGxvZzogZnVuY3Rpb24oKSB7CiAgICAvLyBzdXBwcmVzcyBjb25zb2xlLmxvZyBvdXRwdXQgd2hlbiBiZWluZyBpbmNsdWRlZCBhcyBhIG1vZHVsZS4KICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyB8fAogICAgICAgIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTsKICB9LAogIGV4dHJhY3RWZXJzaW9uOiBmdW5jdGlvbih1YXN0cmluZywgZXhwciwgcG9zKSB7CiAgICB2YXIgbWF0Y2ggPSB1YXN0cmluZy5tYXRjaChleHByKTsKICAgIHJldHVybiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPj0gcG9zICYmIHBhcnNlSW50KG1hdGNoW3Bvc10sIDEwKTsKICB9Cn07CgpmdW5jdGlvbiB0cmFjZSh0ZXh0KSB7CiAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciBsb2dnaW5nLgogIGlmICh0ZXh0W3RleHQubGVuZ3RoIC0gMV0gPT09ICdcbicpIHsKICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCB0ZXh0Lmxlbmd0aCAtIDEpOwogIH0KICBpZiAod2luZG93LnBlcmZvcm1hbmNlKSB7CiAgICB2YXIgbm93ID0gKHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSAvIDEwMDApLnRvRml4ZWQoMyk7CiAgICB3ZWJydGNVdGlscy5sb2cobm93ICsgJzogJyArIHRleHQpOwogIH0gZWxzZSB7CiAgICB3ZWJydGNVdGlscy5sb2codGV4dCk7CiAgfQp9CgppZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHsKICBpZiAod2luZG93LkhUTUxNZWRpYUVsZW1lbnQgJiYKICAgICEoJ3NyY09iamVjdCcgaW4gd2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlKSkgewogICAgLy8gU2hpbSB0aGUgc3JjT2JqZWN0IHByb3BlcnR5LCBvbmNlLCB3aGVuIEhUTUxNZWRpYUVsZW1lbnQgaXMgZm91bmQuCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCAnc3JjT2JqZWN0JywgewogICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIC8vIElmIHByZWZpeGVkIHNyY09iamVjdCBwcm9wZXJ0eSBleGlzdHMsIHJldHVybiBpdC4KICAgICAgICAvLyBPdGhlcndpc2UgdXNlIHRoZSBzaGltbWVkIHByb3BlcnR5LCBfc3JjT2JqZWN0CiAgICAgICAgcmV0dXJuICdtb3pTcmNPYmplY3QnIGluIHRoaXMgPyB0aGlzLm1velNyY09iamVjdCA6IHRoaXMuX3NyY09iamVjdDsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgICBpZiAoJ21velNyY09iamVjdCcgaW4gdGhpcykgewogICAgICAgICAgdGhpcy5tb3pTcmNPYmplY3QgPSBzdHJlYW07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIFVzZSBfc3JjT2JqZWN0IGFzIGEgcHJpdmF0ZSBwcm9wZXJ0eSBmb3IgdGhpcyBzaGltCiAgICAgICAgICB0aGlzLl9zcmNPYmplY3QgPSBzdHJlYW07CiAgICAgICAgICAvLyBUT0RPOiByZXZva2VPYmplY3RVcmwodGhpcy5zcmMpIHdoZW4gIXN0cmVhbSB0byByZWxlYXNlIHJlc291cmNlcz8KICAgICAgICAgIHRoaXMuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQogIC8vIFByb3h5IGV4aXN0aW5nIGdsb2JhbHMKICBnZXRVc2VyTWVkaWEgPSB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IuZ2V0VXNlck1lZGlhOwp9CgovLyBBdHRhY2ggYSBtZWRpYSBzdHJlYW0gdG8gYW4gZWxlbWVudC4KYXR0YWNoTWVkaWFTdHJlYW0gPSBmdW5jdGlvbihlbGVtZW50LCBzdHJlYW0pIHsKICBlbGVtZW50LnNyY09iamVjdCA9IHN0cmVhbTsKfTsKCnJlYXR0YWNoTWVkaWFTdHJlYW0gPSBmdW5jdGlvbih0bywgZnJvbSkgewogIHRvLnNyY09iamVjdCA9IGZyb20uc3JjT2JqZWN0Owp9OwoKaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cubmF2aWdhdG9yKSB7CiAgd2VicnRjVXRpbHMubG9nKCdUaGlzIGRvZXMgbm90IGFwcGVhciB0byBiZSBhIGJyb3dzZXInKTsKICB3ZWJydGNEZXRlY3RlZEJyb3dzZXIgPSAnbm90IGEgYnJvd3Nlcic7Cn0gZWxzZSBpZiAobmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSkgewogIHdlYnJ0Y1V0aWxzLmxvZygnVGhpcyBhcHBlYXJzIHRvIGJlIEZpcmVmb3gnKTsKCiAgd2VicnRjRGV0ZWN0ZWRCcm93c2VyID0gJ2ZpcmVmb3gnOwoKICAvLyB0aGUgZGV0ZWN0ZWQgZmlyZWZveCB2ZXJzaW9uLgogIHdlYnJ0Y0RldGVjdGVkVmVyc2lvbiA9IHdlYnJ0Y1V0aWxzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsCiAgICAgIC9GaXJlZm94XC8oWzAtOV0rKVwuLywgMSk7CgogIC8vIHRoZSBtaW5pbXVtIGZpcmVmb3ggdmVyc2lvbiBzdGlsbCBzdXBwb3J0ZWQgYnkgYWRhcHRlci4KICB3ZWJydGNNaW5pbXVtVmVyc2lvbiA9IDMxOwoKICAvLyBTaGltIGZvciBSVENQZWVyQ29ubmVjdGlvbiBvbiBvbGRlciB2ZXJzaW9ucy4KICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikgewogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpIHsKICAgICAgaWYgKHdlYnJ0Y0RldGVjdGVkVmVyc2lvbiA8IDM4KSB7CiAgICAgICAgLy8gLnVybHMgaXMgbm90IHN1cHBvcnRlZCBpbiBGRiA8IDM4LgogICAgICAgIC8vIGNyZWF0ZSBSVENJY2VTZXJ2ZXJzIHdpdGggYSBzaW5nbGUgdXJsLgogICAgICAgIGlmIChwY0NvbmZpZyAmJiBwY0NvbmZpZy5pY2VTZXJ2ZXJzKSB7CiAgICAgICAgICB2YXIgbmV3SWNlU2VydmVycyA9IFtdOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwY0NvbmZpZy5pY2VTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBzZXJ2ZXIgPSBwY0NvbmZpZy5pY2VTZXJ2ZXJzW2ldOwogICAgICAgICAgICBpZiAoc2VydmVyLmhhc093blByb3BlcnR5KCd1cmxzJykpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlcnZlci51cmxzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICB2YXIgbmV3U2VydmVyID0gewogICAgICAgICAgICAgICAgICB1cmw6IHNlcnZlci51cmxzW2pdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKHNlcnZlci51cmxzW2pdLmluZGV4T2YoJ3R1cm4nKSA9PT0gMCkgewogICAgICAgICAgICAgICAgICBuZXdTZXJ2ZXIudXNlcm5hbWUgPSBzZXJ2ZXIudXNlcm5hbWU7CiAgICAgICAgICAgICAgICAgIG5ld1NlcnZlci5jcmVkZW50aWFsID0gc2VydmVyLmNyZWRlbnRpYWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2gobmV3U2VydmVyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbmV3SWNlU2VydmVycy5wdXNoKHBjQ29uZmlnLmljZVNlcnZlcnNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwY0NvbmZpZy5pY2VTZXJ2ZXJzID0gbmV3SWNlU2VydmVyczsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG5ldyBtb3pSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cyk7IC8vIGpzY3M6aWdub3JlIHJlcXVpcmVDYXBpdGFsaXplZENvbnN0cnVjdG9ycwogICAgfTsKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBtb3pSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU7CgogICAgLy8gd3JhcCBzdGF0aWMgbWV0aG9kcy4gQ3VycmVudGx5IGp1c3QgZ2VuZXJhdGVDZXJ0aWZpY2F0ZS4KICAgIGlmIChtb3pSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24sICdnZW5lcmF0ZUNlcnRpZmljYXRlJywgewogICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICAgICAgICByZXR1cm4gbW96UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZS5hcHBseShudWxsLAogICAgICAgICAgICAgICAgYXJndW1lbnRzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBtb3pSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiA9IG1velJUQ1Nlc3Npb25EZXNjcmlwdGlvbjsKICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgPSBtb3pSVENJY2VDYW5kaWRhdGU7CiAgfQoKICAvLyBnZXRVc2VyTWVkaWEgY29uc3RyYWludHMgc2hpbS4KICBnZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKSB7CiAgICB2YXIgY29uc3RyYWludHNUb0ZGMzcgPSBmdW5jdGlvbihjKSB7CiAgICAgIGlmICh0eXBlb2YgYyAhPT0gJ29iamVjdCcgfHwgYy5yZXF1aXJlKSB7CiAgICAgICAgcmV0dXJuIGM7CiAgICAgIH0KICAgICAgdmFyIHJlcXVpcmUgPSBbXTsKICAgICAgT2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgICBpZiAoa2V5ID09PSAncmVxdWlyZScgfHwga2V5ID09PSAnYWR2YW5jZWQnIHx8IGtleSA9PT0gJ21lZGlhU291cmNlJykgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB2YXIgciA9IGNba2V5XSA9ICh0eXBlb2YgY1trZXldID09PSAnb2JqZWN0JykgPwogICAgICAgICAgICBjW2tleV0gOiB7aWRlYWw6IGNba2V5XX07CiAgICAgICAgaWYgKHIubWluICE9PSB1bmRlZmluZWQgfHwKICAgICAgICAgICAgci5tYXggIT09IHVuZGVmaW5lZCB8fCByLmV4YWN0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlcXVpcmUucHVzaChrZXkpOwogICAgICAgIH0KICAgICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHIuZXhhY3QgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIHIubWluID0gci5tYXggPSByLmV4YWN0OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY1trZXldID0gci5leGFjdDsKICAgICAgICAgIH0KICAgICAgICAgIGRlbGV0ZSByLmV4YWN0OwogICAgICAgIH0KICAgICAgICBpZiAoci5pZGVhbCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjLmFkdmFuY2VkID0gYy5hZHZhbmNlZCB8fCBbXTsKICAgICAgICAgIHZhciBvYyA9IHt9OwogICAgICAgICAgaWYgKHR5cGVvZiByLmlkZWFsID09PSAnbnVtYmVyJykgewogICAgICAgICAgICBvY1trZXldID0ge21pbjogci5pZGVhbCwgbWF4OiByLmlkZWFsfTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9jW2tleV0gPSByLmlkZWFsOwogICAgICAgICAgfQogICAgICAgICAgYy5hZHZhbmNlZC5wdXNoKG9jKTsKICAgICAgICAgIGRlbGV0ZSByLmlkZWFsOwogICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhyKS5sZW5ndGgpIHsKICAgICAgICAgICAgZGVsZXRlIGNba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBpZiAocmVxdWlyZS5sZW5ndGgpIHsKICAgICAgICBjLnJlcXVpcmUgPSByZXF1aXJlOwogICAgICB9CiAgICAgIHJldHVybiBjOwogICAgfTsKICAgIGlmICh3ZWJydGNEZXRlY3RlZFZlcnNpb24gPCAzOCkgewogICAgICB3ZWJydGNVdGlscy5sb2coJ3NwZWM6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpOwogICAgICBpZiAoY29uc3RyYWludHMuYXVkaW8pIHsKICAgICAgICBjb25zdHJhaW50cy5hdWRpbyA9IGNvbnN0cmFpbnRzVG9GRjM3KGNvbnN0cmFpbnRzLmF1ZGlvKTsKICAgICAgfQogICAgICBpZiAoY29uc3RyYWludHMudmlkZW8pIHsKICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9GRjM3KGNvbnN0cmFpbnRzLnZpZGVvKTsKICAgICAgfQogICAgICB3ZWJydGNVdGlscy5sb2coJ2ZmMzc6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpOwogICAgfQogICAgcmV0dXJuIG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcik7CiAgfTsKCiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYTsKCiAgLy8gU2hpbSBmb3IgbWVkaWFEZXZpY2VzIG9uIG9sZGVyIHZlcnNpb25zLgogIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykgewogICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyA9IHtnZXRVc2VyTWVkaWE6IHJlcXVlc3RVc2VyTWVkaWEsCiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKCkgeyB9LAogICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHsgfQogICAgfTsKICB9CiAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzID0KICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzIHx8IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHsKICAgICAgdmFyIGluZm9zID0gWwogICAgICAgIHtraW5kOiAnYXVkaW9pbnB1dCcsIGRldmljZUlkOiAnZGVmYXVsdCcsIGxhYmVsOiAnJywgZ3JvdXBJZDogJyd9LAogICAgICAgIHtraW5kOiAndmlkZW9pbnB1dCcsIGRldmljZUlkOiAnZGVmYXVsdCcsIGxhYmVsOiAnJywgZ3JvdXBJZDogJyd9CiAgICAgIF07CiAgICAgIHJlc29sdmUoaW5mb3MpOwogICAgfSk7CiAgfTsKCiAgaWYgKHdlYnJ0Y0RldGVjdGVkVmVyc2lvbiA8IDQxKSB7CiAgICAvLyBXb3JrIGFyb3VuZCBodHRwOi8vYnVnemlsLmxhLzExNjk2NjUKICAgIHZhciBvcmdFbnVtZXJhdGVEZXZpY2VzID0KICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMuYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTsKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gb3JnRW51bWVyYXRlRGV2aWNlcygpLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbihlKSB7CiAgICAgICAgaWYgKGUubmFtZSA9PT0gJ05vdEZvdW5kRXJyb3InKSB7CiAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQogICAgICAgIHRocm93IGU7CiAgICAgIH0pOwogICAgfTsKICB9Cn0gZWxzZSBpZiAobmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSAmJiB3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24pIHsKICB3ZWJydGNVdGlscy5sb2coJ1RoaXMgYXBwZWFycyB0byBiZSBDaHJvbWUnKTsKCiAgd2VicnRjRGV0ZWN0ZWRCcm93c2VyID0gJ2Nocm9tZSc7CgogIC8vIHRoZSBkZXRlY3RlZCBjaHJvbWUgdmVyc2lvbi4KICB3ZWJydGNEZXRlY3RlZFZlcnNpb24gPSB3ZWJydGNVdGlscy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAvQ2hyb20oZXxpdW0pXC8oWzAtOV0rKVwuLywgMik7CgogIC8vIHRoZSBtaW5pbXVtIGNocm9tZSB2ZXJzaW9uIHN0aWxsIHN1cHBvcnRlZCBieSBhZGFwdGVyLgogIHdlYnJ0Y01pbmltdW1WZXJzaW9uID0gMzg7CgogIC8vIFRoZSBSVENQZWVyQ29ubmVjdGlvbiBvYmplY3QuCiAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpIHsKICAgIC8vIFRyYW5zbGF0ZSBpY2VUcmFuc3BvcnRQb2xpY3kgdG8gaWNlVHJhbnNwb3J0cywKICAgIC8vIHNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3dlYnJ0Yy9pc3N1ZXMvZGV0YWlsP2lkPTQ4NjkKICAgIGlmIChwY0NvbmZpZyAmJiBwY0NvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kpIHsKICAgICAgcGNDb25maWcuaWNlVHJhbnNwb3J0cyA9IHBjQ29uZmlnLmljZVRyYW5zcG9ydFBvbGljeTsKICAgIH0KCiAgICB2YXIgcGMgPSBuZXcgd2Via2l0UlRDUGVlckNvbm5lY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpOyAvLyBqc2NzOmlnbm9yZSByZXF1aXJlQ2FwaXRhbGl6ZWRDb25zdHJ1Y3RvcnMKICAgIHZhciBvcmlnR2V0U3RhdHMgPSBwYy5nZXRTdGF0cy5iaW5kKHBjKTsKICAgIHBjLmdldFN0YXRzID0gZnVuY3Rpb24oc2VsZWN0b3IsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykgeyAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CgogICAgICAvLyBJZiBzZWxlY3RvciBpcyBhIGZ1bmN0aW9uIHRoZW4gd2UgYXJlIGluIHRoZSBvbGQgc3R5bGUgc3RhdHMgc28ganVzdAogICAgICAvLyBwYXNzIGJhY2sgdGhlIG9yaWdpbmFsIGdldFN0YXRzIGZvcm1hdCB0byBhdm9pZCBicmVha2luZyBvbGQgdXNlcnMuCiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICByZXR1cm4gb3JpZ0dldFN0YXRzKHNlbGVjdG9yLCBzdWNjZXNzQ2FsbGJhY2spOwogICAgICB9CgogICAgICB2YXIgZml4Q2hyb21lU3RhdHMgPSBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgIHZhciBzdGFuZGFyZFJlcG9ydCA9IHt9OwogICAgICAgIHZhciByZXBvcnRzID0gcmVzcG9uc2UucmVzdWx0KCk7CiAgICAgICAgcmVwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uKHJlcG9ydCkgewogICAgICAgICAgdmFyIHN0YW5kYXJkU3RhdHMgPSB7CiAgICAgICAgICAgIGlkOiByZXBvcnQuaWQsCiAgICAgICAgICAgIHRpbWVzdGFtcDogcmVwb3J0LnRpbWVzdGFtcCwKICAgICAgICAgICAgdHlwZTogcmVwb3J0LnR5cGUKICAgICAgICAgIH07CiAgICAgICAgICByZXBvcnQubmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAgICAgc3RhbmRhcmRTdGF0c1tuYW1lXSA9IHJlcG9ydC5zdGF0KG5hbWUpOwogICAgICAgICAgfSk7CiAgICAgICAgICBzdGFuZGFyZFJlcG9ydFtzdGFuZGFyZFN0YXRzLmlkXSA9IHN0YW5kYXJkU3RhdHM7CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBzdGFuZGFyZFJlcG9ydDsKICAgICAgfTsKCiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHsKICAgICAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrV3JhcHBlciA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICBhcmdzWzFdKGZpeENocm9tZVN0YXRzKHJlc3BvbnNlKSk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9yaWdHZXRTdGF0cy5hcHBseSh0aGlzLCBbc3VjY2Vzc0NhbGxiYWNrV3JhcHBlciwgYXJndW1lbnRzWzBdXSk7CiAgICAgIH0KCiAgICAgIC8vIHByb21pc2Utc3VwcG9ydAogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHNlbGVjdG9yID09PSBudWxsKSB7CiAgICAgICAgICBvcmlnR2V0U3RhdHMuYXBwbHkoc2VsZiwgWwogICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlLmFwcGx5KG51bGwsIFtmaXhDaHJvbWVTdGF0cyhyZXNwb25zZSldKTsKICAgICAgICAgICAgICB9LCByZWplY3RdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgb3JpZ0dldFN0YXRzLmFwcGx5KHNlbGYsIFtyZXNvbHZlLCByZWplY3RdKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gcGM7CiAgfTsKICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlID0gd2Via2l0UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlOwoKICAvLyB3cmFwIHN0YXRpYyBtZXRob2RzLiBDdXJyZW50bHkganVzdCBnZW5lcmF0ZUNlcnRpZmljYXRlLgogIGlmICh3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLCAnZ2VuZXJhdGVDZXJ0aWZpY2F0ZScsIHsKICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICAgICAgcmV0dXJuIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGUuYXBwbHkobnVsbCwKICAgICAgICAgICAgICBhcmd1bWVudHMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gd2Via2l0UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0KCiAgLy8gYWRkIHByb21pc2Ugc3VwcG9ydAogIFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgIHZhciBuYXRpdmVNZXRob2QgPSB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTsKICAgIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmCiAgICAgICAgICB0eXBlb2YoYXJndW1lbnRzWzBdKSA9PT0gJ29iamVjdCcpKSB7CiAgICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkOwogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIG5hdGl2ZU1ldGhvZC5hcHBseShzZWxmLCBbcmVzb2x2ZSwgcmVqZWN0LCBvcHRzXSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CiAgICB9OwogIH0pOwoKICBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nLAogICAgICAnYWRkSWNlQ2FuZGlkYXRlJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgIHZhciBuYXRpdmVNZXRob2QgPSB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTsKICAgIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzOwogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBuYXRpdmVNZXRob2QuYXBwbHkoc2VsZiwgW2FyZ3NbMF0sCiAgICAgICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPj0gMikgewogICAgICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsLCBbXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPj0gMykgewogICAgICAgICAgICAgICAgYXJnc1syXS5hcHBseShudWxsLCBbZXJyXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9XQogICAgICAgICAgKTsKICAgICAgfSk7CiAgICB9OwogIH0pOwoKICAvLyBnZXRVc2VyTWVkaWEgY29uc3RyYWludHMgc2hpbS4KICB2YXIgY29uc3RyYWludHNUb0Nocm9tZSA9IGZ1bmN0aW9uKGMpIHsKICAgIGlmICh0eXBlb2YgYyAhPT0gJ29iamVjdCcgfHwgYy5tYW5kYXRvcnkgfHwgYy5vcHRpb25hbCkgewogICAgICByZXR1cm4gYzsKICAgIH0KICAgIHZhciBjYyA9IHt9OwogICAgT2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgaWYgKGtleSA9PT0gJ3JlcXVpcmUnIHx8IGtleSA9PT0gJ2FkdmFuY2VkJyB8fCBrZXkgPT09ICdtZWRpYVNvdXJjZScpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIHIgPSAodHlwZW9mIGNba2V5XSA9PT0gJ29iamVjdCcpID8gY1trZXldIDoge2lkZWFsOiBjW2tleV19OwogICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiByLmV4YWN0ID09PSAnbnVtYmVyJykgewogICAgICAgIHIubWluID0gci5tYXggPSByLmV4YWN0OwogICAgICB9CiAgICAgIHZhciBvbGRuYW1lID0gZnVuY3Rpb24ocHJlZml4LCBuYW1lKSB7CiAgICAgICAgaWYgKHByZWZpeCkgewogICAgICAgICAgcmV0dXJuIHByZWZpeCArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKG5hbWUgPT09ICdkZXZpY2VJZCcpID8gJ3NvdXJjZUlkJyA6IG5hbWU7CiAgICAgIH07CiAgICAgIGlmIChyLmlkZWFsICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBjYy5vcHRpb25hbCA9IGNjLm9wdGlvbmFsIHx8IFtdOwogICAgICAgIHZhciBvYyA9IHt9OwogICAgICAgIGlmICh0eXBlb2Ygci5pZGVhbCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgIG9jW29sZG5hbWUoJ21pbicsIGtleSldID0gci5pZGVhbDsKICAgICAgICAgIGNjLm9wdGlvbmFsLnB1c2gob2MpOwogICAgICAgICAgb2MgPSB7fTsKICAgICAgICAgIG9jW29sZG5hbWUoJ21heCcsIGtleSldID0gci5pZGVhbDsKICAgICAgICAgIGNjLm9wdGlvbmFsLnB1c2gob2MpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBvY1tvbGRuYW1lKCcnLCBrZXkpXSA9IHIuaWRlYWw7CiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCAhPT0gJ251bWJlcicpIHsKICAgICAgICBjYy5tYW5kYXRvcnkgPSBjYy5tYW5kYXRvcnkgfHwge307CiAgICAgICAgY2MubWFuZGF0b3J5W29sZG5hbWUoJycsIGtleSldID0gci5leGFjdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBbJ21pbicsICdtYXgnXS5mb3JFYWNoKGZ1bmN0aW9uKG1peCkgewogICAgICAgICAgaWYgKHJbbWl4XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNjLm1hbmRhdG9yeSA9IGNjLm1hbmRhdG9yeSB8fCB7fTsKICAgICAgICAgICAgY2MubWFuZGF0b3J5W29sZG5hbWUobWl4LCBrZXkpXSA9IHJbbWl4XTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgICBpZiAoYy5hZHZhbmNlZCkgewogICAgICBjYy5vcHRpb25hbCA9IChjYy5vcHRpb25hbCB8fCBbXSkuY29uY2F0KGMuYWR2YW5jZWQpOwogICAgfQogICAgcmV0dXJuIGNjOwogIH07CgogIGdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgIGlmIChjb25zdHJhaW50cy5hdWRpbykgewogICAgICBjb25zdHJhaW50cy5hdWRpbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWUoY29uc3RyYWludHMuYXVkaW8pOwogICAgfQogICAgaWYgKGNvbnN0cmFpbnRzLnZpZGVvKSB7CiAgICAgIGNvbnN0cmFpbnRzLnZpZGVvID0gY29uc3RyYWludHNUb0Nocm9tZShjb25zdHJhaW50cy52aWRlbyk7CiAgICB9CiAgICB3ZWJydGNVdGlscy5sb2coJ2Nocm9tZTogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7CiAgICByZXR1cm4gbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYShjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKTsKICB9OwogIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBnZXRVc2VyTWVkaWE7CgogIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykgewogICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyA9IHtnZXRVc2VyTWVkaWE6IHJlcXVlc3RVc2VyTWVkaWEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmF0ZURldmljZXM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICAgIHZhciBraW5kcyA9IHthdWRpbzogJ2F1ZGlvaW5wdXQnLCB2aWRlbzogJ3ZpZGVvaW5wdXQnfTsKICAgICAgICByZXR1cm4gTWVkaWFTdHJlYW1UcmFjay5nZXRTb3VyY2VzKGZ1bmN0aW9uKGRldmljZXMpIHsKICAgICAgICAgIHJlc29sdmUoZGV2aWNlcy5tYXAoZnVuY3Rpb24oZGV2aWNlKSB7CiAgICAgICAgICAgIHJldHVybiB7bGFiZWw6IGRldmljZS5sYWJlbCwKICAgICAgICAgICAgICAgICAgICBraW5kOiBraW5kc1tkZXZpY2Uua2luZF0sCiAgICAgICAgICAgICAgICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCwKICAgICAgICAgICAgICAgICAgICBncm91cElkOiAnJ307CiAgICAgICAgICB9KSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfX07CiAgfQoKICAvLyBBIHNoaW0gZm9yIGdldFVzZXJNZWRpYSBtZXRob2Qgb24gdGhlIG1lZGlhRGV2aWNlcyBvYmplY3QuCiAgLy8gVE9ETyhLYXB0ZW5KYW5zc29uKSByZW1vdmUgb25jZSBpbXBsZW1lbnRlZCBpbiBDaHJvbWUgc3RhYmxlLgogIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHsKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMpIHsKICAgICAgcmV0dXJuIHJlcXVlc3RVc2VyTWVkaWEoY29uc3RyYWludHMpOwogICAgfTsKICB9IGVsc2UgewogICAgLy8gRXZlbiB0aG91Z2ggQ2hyb21lIDQ1IGhhcyBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzIGFuZCBhIGdldFVzZXJNZWRpYQogICAgLy8gZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIFByb21pc2UsIGl0IGRvZXMgbm90IGFjY2VwdCBzcGVjLXN0eWxlCiAgICAvLyBjb25zdHJhaW50cy4KICAgIHZhciBvcmlnR2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuCiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTsKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oYykgewogICAgICB3ZWJydGNVdGlscy5sb2coJ3NwZWM6ICAgJyArIEpTT04uc3RyaW5naWZ5KGMpKTsgLy8gd2hpdGVzcGFjZSBmb3IgYWxpZ25tZW50CiAgICAgIGMuYXVkaW8gPSBjb25zdHJhaW50c1RvQ2hyb21lKGMuYXVkaW8pOwogICAgICBjLnZpZGVvID0gY29uc3RyYWludHNUb0Nocm9tZShjLnZpZGVvKTsKICAgICAgd2VicnRjVXRpbHMubG9nKCdjaHJvbWU6ICcgKyBKU09OLnN0cmluZ2lmeShjKSk7CiAgICAgIHJldHVybiBvcmlnR2V0VXNlck1lZGlhKGMpOwogICAgfTsKICB9CgogIC8vIER1bW15IGRldmljZWNoYW5nZSBldmVudCBtZXRob2RzLgogIC8vIFRPRE8oS2FwdGVuSmFuc3NvbikgcmVtb3ZlIG9uY2UgaW1wbGVtZW50ZWQgaW4gQ2hyb21lIHN0YWJsZS4KICBpZiAodHlwZW9mIG5hdmlnYXRvci5tZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKCkgewogICAgICB3ZWJydGNVdGlscy5sb2coJ0R1bW15IG1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyIGNhbGxlZC4nKTsKICAgIH07CiAgfQogIGlmICh0eXBlb2YgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyID09PSAndW5kZWZpbmVkJykgewogICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oKSB7CiAgICAgIHdlYnJ0Y1V0aWxzLmxvZygnRHVtbXkgbWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXIgY2FsbGVkLicpOwogICAgfTsKICB9CgogIC8vIEF0dGFjaCBhIG1lZGlhIHN0cmVhbSB0byBhbiBlbGVtZW50LgogIGF0dGFjaE1lZGlhU3RyZWFtID0gZnVuY3Rpb24oZWxlbWVudCwgc3RyZWFtKSB7CiAgICBpZiAod2VicnRjRGV0ZWN0ZWRWZXJzaW9uID49IDQzKSB7CiAgICAgIGVsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtOwogICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5zcmMgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIGVsZW1lbnQuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pOwogICAgfSBlbHNlIHsKICAgICAgd2VicnRjVXRpbHMubG9nKCdFcnJvciBhdHRhY2hpbmcgc3RyZWFtIHRvIGVsZW1lbnQuJyk7CiAgICB9CiAgfTsKICByZWF0dGFjaE1lZGlhU3RyZWFtID0gZnVuY3Rpb24odG8sIGZyb20pIHsKICAgIGlmICh3ZWJydGNEZXRlY3RlZFZlcnNpb24gPj0gNDMpIHsKICAgICAgdG8uc3JjT2JqZWN0ID0gZnJvbS5zcmNPYmplY3Q7CiAgICB9IGVsc2UgewogICAgICB0by5zcmMgPSBmcm9tLnNyYzsKICAgIH0KICB9OwoKfSBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goCiAgICAvRWRnZVwvKFxkKykuKFxkKykkLykpIHsKICB3ZWJydGNVdGlscy5sb2coJ1RoaXMgYXBwZWFycyB0byBiZSBFZGdlJyk7CiAgd2VicnRjRGV0ZWN0ZWRCcm93c2VyID0gJ2VkZ2UnOwoKICB3ZWJydGNEZXRlY3RlZFZlcnNpb24gPSB3ZWJydGNVdGlscy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAvRWRnZVwvKFxkKykuKFxkKykkLywgMik7CgogIC8vIFRoZSBtaW5pbXVtIHZlcnNpb24gc3RpbGwgc3VwcG9ydGVkIGJ5IGFkYXB0ZXIuCiAgLy8gVGhpcyBpcyB0aGUgYnVpbGQgbnVtYmVyIGZvciBFZGdlLgogIHdlYnJ0Y01pbmltdW1WZXJzaW9uID0gMTA1NDc7CgogIGlmICh3aW5kb3cuUlRDSWNlR2F0aGVyZXIpIHsKICAgIC8vIEdlbmVyYXRlIGFuIGFscGhhbnVtZXJpYyBpZGVudGlmaWVyIGZvciBjbmFtZSBvciBtaWRzLgogICAgLy8gVE9ETzogdXNlIFVVSURzIGluc3RlYWQ/IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODMKICAgIHZhciBnZW5lcmF0ZUlkZW50aWZpZXIgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCAxMCk7CiAgICB9OwoKICAgIC8vIFRoZSBSVENQIENOQU1FIHVzZWQgYnkgYWxsIHBlZXJjb25uZWN0aW9ucyBmcm9tIHRoZSBzYW1lIEpTLgogICAgdmFyIGxvY2FsQ05hbWUgPSBnZW5lcmF0ZUlkZW50aWZpZXIoKTsKCiAgICAvLyBTRFAgaGVscGVycyAtIHRvIGJlIG1vdmVkIGludG8gc2VwYXJhdGUgbW9kdWxlLgogICAgdmFyIFNEUFV0aWxzID0ge307CgogICAgLy8gU3BsaXRzIFNEUCBpbnRvIGxpbmVzLCBkZWFsaW5nIHdpdGggYm90aCBDUkxGIGFuZCBMRi4KICAgIFNEUFV0aWxzLnNwbGl0TGluZXMgPSBmdW5jdGlvbihibG9iKSB7CiAgICAgIHJldHVybiBibG9iLnRyaW0oKS5zcGxpdCgnXG4nKS5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgIHJldHVybiBsaW5lLnRyaW0oKTsKICAgICAgfSk7CiAgICB9OwoKICAgIC8vIFNwbGl0cyBTRFAgaW50byBzZXNzaW9ucGFydCBhbmQgbWVkaWFzZWN0aW9ucy4gRW5zdXJlcyBDUkxGLgogICAgU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyA9IGZ1bmN0aW9uKGJsb2IpIHsKICAgICAgdmFyIHBhcnRzID0gYmxvYi5zcGxpdCgnXHJcbm09Jyk7CiAgICAgIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24ocGFydCwgaW5kZXgpIHsKICAgICAgICByZXR1cm4gKGluZGV4ID4gMCA/ICdtPScgKyBwYXJ0IDogcGFydCkudHJpbSgpICsgJ1xyXG4nOwogICAgICB9KTsKICAgIH07CgogICAgLy8gUmV0dXJucyBsaW5lcyB0aGF0IHN0YXJ0IHdpdGggYSBjZXJ0YWluIHByZWZpeC4KICAgIFNEUFV0aWxzLm1hdGNoUHJlZml4ID0gZnVuY3Rpb24oYmxvYiwgcHJlZml4KSB7CiAgICAgIHJldHVybiBTRFBVdGlscy5zcGxpdExpbmVzKGJsb2IpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgcmV0dXJuIGxpbmUuaW5kZXhPZihwcmVmaXgpID09PSAwOwogICAgICB9KTsKICAgIH07CgogICAgLy8gUGFyc2VzIGFuIElDRSBjYW5kaWRhdGUgbGluZS4gU2FtcGxlIGlucHV0OgogICAgLy8gY2FuZGlkYXRlOjcwMjc4NjM1MCAyIHVkcCA0MTgxOTkwMiA4LjguOC44IDYwNzY5IHR5cCByZWxheSByYWRkciA4LjguOC44IHJwb3J0IDU1OTk2IgogICAgU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUgPSBmdW5jdGlvbihsaW5lKSB7CiAgICAgIHZhciBwYXJ0czsKICAgICAgLy8gUGFyc2UgYm90aCB2YXJpYW50cy4KICAgICAgaWYgKGxpbmUuaW5kZXhPZignYT1jYW5kaWRhdGU6JykgPT09IDApIHsKICAgICAgICBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDEyKS5zcGxpdCgnICcpOwogICAgICB9IGVsc2UgewogICAgICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTApLnNwbGl0KCcgJyk7CiAgICAgIH0KCiAgICAgIHZhciBjYW5kaWRhdGUgPSB7CiAgICAgICAgZm91bmRhdGlvbjogcGFydHNbMF0sCiAgICAgICAgY29tcG9uZW50OiBwYXJ0c1sxXSwKICAgICAgICBwcm90b2NvbDogcGFydHNbMl0udG9Mb3dlckNhc2UoKSwKICAgICAgICBwcmlvcml0eTogcGFyc2VJbnQocGFydHNbM10sIDEwKSwKICAgICAgICBpcDogcGFydHNbNF0sCiAgICAgICAgcG9ydDogcGFyc2VJbnQocGFydHNbNV0sIDEwKSwKICAgICAgICAvLyBza2lwIHBhcnRzWzZdID09ICd0eXAnCiAgICAgICAgdHlwZTogcGFydHNbN10KICAgICAgfTsKCiAgICAgIGZvciAodmFyIGkgPSA4OyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICBzd2l0Y2ggKHBhcnRzW2ldKSB7CiAgICAgICAgICBjYXNlICdyYWRkcic6CiAgICAgICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyA9IHBhcnRzW2kgKyAxXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdycG9ydCc6CiAgICAgICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCA9IHBhcnNlSW50KHBhcnRzW2kgKyAxXSwgMTApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgJ3RjcHR5cGUnOgogICAgICAgICAgICBjYW5kaWRhdGUudGNwVHlwZSA9IHBhcnRzW2kgKyAxXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OiAvLyBVbmtub3duIGV4dGVuc2lvbnMgYXJlIHNpbGVudGx5IGlnbm9yZWQuCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gY2FuZGlkYXRlOwogICAgfTsKCiAgICAvLyBUcmFuc2xhdGVzIGEgY2FuZGlkYXRlIG9iamVjdCBpbnRvIFNEUCBjYW5kaWRhdGUgYXR0cmlidXRlLgogICAgU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUgPSBmdW5jdGlvbihjYW5kaWRhdGUpIHsKICAgICAgdmFyIHNkcCA9IFtdOwogICAgICBzZHAucHVzaChjYW5kaWRhdGUuZm91bmRhdGlvbik7CiAgICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5jb21wb25lbnQpOwogICAgICBzZHAucHVzaChjYW5kaWRhdGUucHJvdG9jb2wudG9VcHBlckNhc2UoKSk7CiAgICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5wcmlvcml0eSk7CiAgICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5pcCk7CiAgICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5wb3J0KTsKCiAgICAgIHZhciB0eXBlID0gY2FuZGlkYXRlLnR5cGU7CiAgICAgIHNkcC5wdXNoKCd0eXAnKTsKICAgICAgc2RwLnB1c2godHlwZSk7CiAgICAgIGlmICh0eXBlICE9PSAnaG9zdCcgJiYgY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzICYmCiAgICAgICAgICBjYW5kaWRhdGUucmVsYXRlZFBvcnQpIHsKICAgICAgICBzZHAucHVzaCgncmFkZHInKTsKICAgICAgICBzZHAucHVzaChjYW5kaWRhdGUucmVsYXRlZEFkZHJlc3MpOyAvLyB3YXM6IHJlbEFkZHIKICAgICAgICBzZHAucHVzaCgncnBvcnQnKTsKICAgICAgICBzZHAucHVzaChjYW5kaWRhdGUucmVsYXRlZFBvcnQpOyAvLyB3YXM6IHJlbFBvcnQKICAgICAgfQogICAgICBpZiAoY2FuZGlkYXRlLnRjcFR5cGUgJiYgY2FuZGlkYXRlLnByb3RvY29sLnRvTG93ZXJDYXNlKCkgPT09ICd0Y3AnKSB7CiAgICAgICAgc2RwLnB1c2goJ3RjcHR5cGUnKTsKICAgICAgICBzZHAucHVzaChjYW5kaWRhdGUudGNwVHlwZSk7CiAgICAgIH0KICAgICAgcmV0dXJuICdjYW5kaWRhdGU6JyArIHNkcC5qb2luKCcgJyk7CiAgICB9OwoKICAgIC8vIFBhcnNlcyBhbiBydHBtYXAgbGluZSwgcmV0dXJucyBSVENSdHBDb2RkZWNQYXJhbWV0ZXJzLiBTYW1wbGUgaW5wdXQ6CiAgICAvLyBhPXJ0cG1hcDoxMTEgb3B1cy80ODAwMC8yCiAgICBTRFBVdGlscy5wYXJzZVJ0cE1hcCA9IGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoOSkuc3BsaXQoJyAnKTsKICAgICAgdmFyIHBhcnNlZCA9IHsKICAgICAgICBwYXlsb2FkVHlwZTogcGFyc2VJbnQocGFydHMuc2hpZnQoKSwgMTApIC8vIHdhczogaWQKICAgICAgfTsKCiAgICAgIHBhcnRzID0gcGFydHNbMF0uc3BsaXQoJy8nKTsKCiAgICAgIHBhcnNlZC5uYW1lID0gcGFydHNbMF07CiAgICAgIHBhcnNlZC5jbG9ja1JhdGUgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOyAvLyB3YXM6IGNsb2NrcmF0ZQogICAgICBwYXJzZWQubnVtQ2hhbm5lbHMgPSBwYXJ0cy5sZW5ndGggPT09IDMgPyBwYXJzZUludChwYXJ0c1syXSwgMTApIDogMTsgLy8gd2FzOiBjaGFubmVscwogICAgICByZXR1cm4gcGFyc2VkOwogICAgfTsKCiAgICAvLyBHZW5lcmF0ZSBhbiBhPXJ0cG1hcCBsaW5lIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yIFJUQ1J0cENvZGVjUGFyYW1ldGVycy4KICAgIFNEUFV0aWxzLndyaXRlUnRwTWFwID0gZnVuY3Rpb24oY29kZWMpIHsKICAgICAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7CiAgICAgIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTsKICAgICAgfQogICAgICByZXR1cm4gJ2E9cnRwbWFwOicgKyBwdCArICcgJyArIGNvZGVjLm5hbWUgKyAnLycgKyBjb2RlYy5jbG9ja1JhdGUgKwogICAgICAgICAgKGNvZGVjLm51bUNoYW5uZWxzICE9PSAxID8gJy8nICsgY29kZWMubnVtQ2hhbm5lbHMgOiAnJykgKyAnXHJcbic7CiAgICB9OwoKICAgIC8vIFBhcnNlcyBhbiBmdG1wIGxpbmUsIHJldHVybnMgZGljdGlvbmFyeS4gU2FtcGxlIGlucHV0OgogICAgLy8gYT1mbXRwOjk2IHZicj1vbjtjbmc9b24KICAgIC8vIEFsc28gZGVhbHMgd2l0aCB2YnI9b247IGNuZz1vbgogICAgU0RQVXRpbHMucGFyc2VGbXRwID0gZnVuY3Rpb24obGluZSkgewogICAgICB2YXIgcGFyc2VkID0ge307CiAgICAgIHZhciBrdjsKICAgICAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnOycpOwogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7CiAgICAgICAga3YgPSBwYXJ0c1tqXS50cmltKCkuc3BsaXQoJz0nKTsKICAgICAgICBwYXJzZWRba3ZbMF0udHJpbSgpXSA9IGt2WzFdOwogICAgICB9CiAgICAgIHJldHVybiBwYXJzZWQ7CiAgICB9OwoKICAgIC8vIEdlbmVyYXRlcyBhbiBhPWZ0bXAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuCiAgICBTRFBVdGlscy53cml0ZUZ0bXAgPSBmdW5jdGlvbihjb2RlYykgewogICAgICB2YXIgbGluZSA9ICcnOwogICAgICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTsKICAgICAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlOwogICAgICB9CiAgICAgIGlmIChjb2RlYy5wYXJhbWV0ZXJzICYmIGNvZGVjLnBhcmFtZXRlcnMubGVuZ3RoKSB7CiAgICAgICAgdmFyIHBhcmFtcyA9IFtdOwogICAgICAgIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24ocGFyYW0pIHsKICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtICsgJz0nICsgY29kZWMucGFyYW1ldGVyc1twYXJhbV0pOwogICAgICAgIH0pOwogICAgICAgIGxpbmUgKz0gJ2E9Zm10cDonICsgcHQgKyAnICcgKyBwYXJhbXMuam9pbignOycpICsgJ1xyXG4nOwogICAgICB9CiAgICAgIHJldHVybiBsaW5lOwogICAgfTsKCiAgICAvLyBQYXJzZXMgYW4gcnRjcC1mYiBsaW5lLCByZXR1cm5zIFJUQ1BSdGNwRmVlZGJhY2sgb2JqZWN0LiBTYW1wbGUgaW5wdXQ6CiAgICAvLyBhPXJ0Y3AtZmI6OTggbmFjayBycHNpCiAgICBTRFBVdGlscy5wYXJzZVJ0Y3BGYiA9IGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnICcpOwogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6IHBhcnRzLnNoaWZ0KCksCiAgICAgICAgcGFyYW1ldGVyOiBwYXJ0cy5qb2luKCcgJykKICAgICAgfTsKICAgIH07CiAgICAvLyBHZW5lcmF0ZSBhPXJ0Y3AtZmIgbGluZXMgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3IgUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLgogICAgU0RQVXRpbHMud3JpdGVSdGNwRmIgPSBmdW5jdGlvbihjb2RlYykgewogICAgICB2YXIgbGluZXMgPSAnJzsKICAgICAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7CiAgICAgIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTsKICAgICAgfQogICAgICBpZiAoY29kZWMucnRjcEZlZWRiYWNrICYmIGNvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGgpIHsKICAgICAgICAvLyBGSVhNRTogc3BlY2lhbCBoYW5kbGluZyBmb3IgdHJyLWludD8KICAgICAgICBjb2RlYy5ydGNwRmVlZGJhY2suZm9yRWFjaChmdW5jdGlvbihmYikgewogICAgICAgICAgbGluZXMgKz0gJ2E9cnRjcC1mYjonICsgcHQgKyAnICcgKyBmYi50eXBlICsgJyAnICsgZmIucGFyYW1ldGVyICsKICAgICAgICAgICAgICAnXHJcbic7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGxpbmVzOwogICAgfTsKCiAgICAvLyBQYXJzZXMgYW4gUkZDIDU1NzYgc3NyYyBtZWRpYSBhdHRyaWJ1dGUuIFNhbXBsZSBpbnB1dDoKICAgIC8vIGE9c3NyYzozNzM1OTI4NTU5IGNuYW1lOnNvbWV0aGluZwogICAgU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEgPSBmdW5jdGlvbihsaW5lKSB7CiAgICAgIHZhciBzcCA9IGxpbmUuaW5kZXhPZignICcpOwogICAgICB2YXIgcGFydHMgPSB7CiAgICAgICAgc3NyYzogbGluZS5zdWJzdHIoNywgc3AgLSA3KSwKICAgICAgfTsKICAgICAgdmFyIGNvbG9uID0gbGluZS5pbmRleE9mKCc6Jywgc3ApOwogICAgICBpZiAoY29sb24gPiAtMSkgewogICAgICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyKHNwICsgMSwgY29sb24gLSBzcCAtIDEpOwogICAgICAgIHBhcnRzLnZhbHVlID0gbGluZS5zdWJzdHIoY29sb24gKyAxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cihzcCArIDEpOwogICAgICB9CiAgICAgIHJldHVybiBwYXJ0czsKICAgIH07CgogICAgLy8gRXh0cmFjdHMgRFRMUyBwYXJhbWV0ZXJzIGZyb20gU0RQIG1lZGlhIHNlY3Rpb24gb3Igc2Vzc2lvbnBhcnQuCiAgICAvLyBGSVhNRTogZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXIgZnVuY3Rpb25zIHRoaXMgc2hvdWxkIG9ubHkKICAgIC8vICAgZ2V0IHRoZSBmaW5nZXJwcmludCBsaW5lIGFzIGlucHV0LiBTZWUgYWxzbyBnZXRJY2VQYXJhbWV0ZXJzLgogICAgU0RQVXRpbHMuZ2V0RHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7CiAgICAgIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTsKICAgICAgbGluZXMgPSBsaW5lcy5jb25jYXQoU0RQVXRpbHMuc3BsaXRMaW5lcyhzZXNzaW9ucGFydCkpOyAvLyBTZWFyY2ggaW4gc2Vzc2lvbiBwYXJ0LCB0b28uCiAgICAgIHZhciBmcExpbmUgPSBsaW5lcy5maWx0ZXIoZnVuY3Rpb24obGluZSkgewogICAgICAgIHJldHVybiBsaW5lLmluZGV4T2YoJ2E9ZmluZ2VycHJpbnQ6JykgPT09IDA7CiAgICAgIH0pWzBdLnN1YnN0cigxNCk7CiAgICAgIC8vIE5vdGU6IGE9c2V0dXAgbGluZSBpcyBpZ25vcmVkIHNpbmNlIHdlIHVzZSB0aGUgJ2F1dG8nIHJvbGUuCiAgICAgIHZhciBkdGxzUGFyYW1ldGVycyA9IHsKICAgICAgICByb2xlOiAnYXV0bycsCiAgICAgICAgZmluZ2VycHJpbnRzOiBbewogICAgICAgICAgYWxnb3JpdGhtOiBmcExpbmUuc3BsaXQoJyAnKVswXSwKICAgICAgICAgIHZhbHVlOiBmcExpbmUuc3BsaXQoJyAnKVsxXQogICAgICAgIH1dCiAgICAgIH07CiAgICAgIHJldHVybiBkdGxzUGFyYW1ldGVyczsKICAgIH07CgogICAgLy8gU2VyaWFsaXplcyBEVExTIHBhcmFtZXRlcnMgdG8gU0RQLgogICAgU0RQVXRpbHMud3JpdGVEdGxzUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcywgc2V0dXBUeXBlKSB7CiAgICAgIHZhciBzZHAgPSAnYT1zZXR1cDonICsgc2V0dXBUeXBlICsgJ1xyXG4nOwogICAgICBwYXJhbXMuZmluZ2VycHJpbnRzLmZvckVhY2goZnVuY3Rpb24oZnApIHsKICAgICAgICBzZHAgKz0gJ2E9ZmluZ2VycHJpbnQ6JyArIGZwLmFsZ29yaXRobSArICcgJyArIGZwLnZhbHVlICsgJ1xyXG4nOwogICAgICB9KTsKICAgICAgcmV0dXJuIHNkcDsKICAgIH07CiAgICAvLyBQYXJzZXMgSUNFIGluZm9ybWF0aW9uIGZyb20gU0RQIG1lZGlhIHNlY3Rpb24gb3Igc2Vzc2lvbnBhcnQuCiAgICAvLyBGSVhNRTogZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXIgZnVuY3Rpb25zIHRoaXMgc2hvdWxkIG9ubHkKICAgIC8vICAgZ2V0IHRoZSBpY2UtdWZyYWcgYW5kIGljZS1wd2QgbGluZXMgYXMgaW5wdXQuCiAgICBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkgewogICAgICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7CiAgICAgIGxpbmVzID0gbGluZXMuY29uY2F0KFNEUFV0aWxzLnNwbGl0TGluZXMoc2Vzc2lvbnBhcnQpKTsgLy8gU2VhcmNoIGluIHNlc3Npb24gcGFydCwgdG9vLgogICAgICB2YXIgaWNlUGFyYW1ldGVycyA9IHsKICAgICAgICB1c2VybmFtZUZyYWdtZW50OiBsaW5lcy5maWx0ZXIoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgcmV0dXJuIGxpbmUuaW5kZXhPZignYT1pY2UtdWZyYWc6JykgPT09IDA7CiAgICAgICAgfSlbMF0uc3Vic3RyKDEyKSwKICAgICAgICBwYXNzd29yZDogbGluZXMuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgIHJldHVybiBsaW5lLmluZGV4T2YoJ2E9aWNlLXB3ZDonKSA9PT0gMDsKICAgICAgICB9KVswXS5zdWJzdHIoMTApCiAgICAgIH07CiAgICAgIHJldHVybiBpY2VQYXJhbWV0ZXJzOwogICAgfTsKCiAgICAvLyBTZXJpYWxpemVzIElDRSBwYXJhbWV0ZXJzIHRvIFNEUC4KICAgIFNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICByZXR1cm4gJ2E9aWNlLXVmcmFnOicgKyBwYXJhbXMudXNlcm5hbWVGcmFnbWVudCArICdcclxuJyArCiAgICAgICAgICAnYT1pY2UtcHdkOicgKyBwYXJhbXMucGFzc3dvcmQgKyAnXHJcbic7CiAgICB9OwoKICAgIC8vIFBhcnNlcyB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gYW5kIHJldHVybnMgUlRDUnRwUGFyYW1ldGVycy4KICAgIFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikgewogICAgICB2YXIgZGVzY3JpcHRpb24gPSB7CiAgICAgICAgY29kZWNzOiBbXSwKICAgICAgICBoZWFkZXJFeHRlbnNpb25zOiBbXSwKICAgICAgICBmZWNNZWNoYW5pc21zOiBbXSwKICAgICAgICBydGNwOiBbXQogICAgICB9OwogICAgICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7CiAgICAgIHZhciBtbGluZSA9IGxpbmVzWzBdLnNwbGl0KCcgJyk7CiAgICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbWxpbmUubGVuZ3RoOyBpKyspIHsgLy8gZmluZCBhbGwgY29kZWNzIGZyb20gbWxpbmVbMy4uXQogICAgICAgIHZhciBwdCA9IG1saW5lW2ldOwogICAgICAgIHZhciBydHBtYXBsaW5lID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoCiAgICAgICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRwbWFwOicgKyBwdCArICcgJylbMF07CiAgICAgICAgaWYgKHJ0cG1hcGxpbmUpIHsKICAgICAgICAgIHZhciBjb2RlYyA9IFNEUFV0aWxzLnBhcnNlUnRwTWFwKHJ0cG1hcGxpbmUpOwogICAgICAgICAgdmFyIGZtdHBzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoCiAgICAgICAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1mbXRwOicgKyBwdCArICcgJyk7CiAgICAgICAgICAvLyBPbmx5IHRoZSBmaXJzdCBhPWZtdHA6PHB0PiBpcyBjb25zaWRlcmVkLgogICAgICAgICAgY29kZWMucGFyYW1ldGVycyA9IGZtdHBzLmxlbmd0aCA/IFNEUFV0aWxzLnBhcnNlRm10cChmbXRwc1swXSkgOiB7fTsKICAgICAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KAogICAgICAgICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRjcC1mYjonICsgcHQgKyAnICcpCiAgICAgICAgICAgIC5tYXAoU0RQVXRpbHMucGFyc2VSdGNwRmIpOwogICAgICAgICAgZGVzY3JpcHRpb24uY29kZWNzLnB1c2goY29kZWMpOwogICAgICAgIH0KICAgICAgfQogICAgICAvLyBGSVhNRTogcGFyc2UgaGVhZGVyRXh0ZW5zaW9ucywgZmVjTWVjaGFuaXNtcyBhbmQgcnRjcC4KICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uOwogICAgfTsKCiAgICAvLyBHZW5lcmF0ZXMgcGFydHMgb2YgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGRlc2NyaWJpbmcgdGhlIGNhcGFiaWxpdGllcyAvIHBhcmFtZXRlcnMuCiAgICBTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24oa2luZCwgY2FwcykgewogICAgICB2YXIgc2RwID0gJyc7CgogICAgICAvLyBCdWlsZCB0aGUgbWxpbmUuCiAgICAgIHNkcCArPSAnbT0nICsga2luZCArICcgJzsKICAgICAgc2RwICs9IGNhcHMuY29kZWNzLmxlbmd0aCA+IDAgPyAnOScgOiAnMCc7IC8vIHJlamVjdCBpZiBubyBjb2RlY3MuCiAgICAgIHNkcCArPSAnIFVEUC9UTFMvUlRQL1NBVlBGICc7CiAgICAgIHNkcCArPSBjYXBzLmNvZGVjcy5tYXAoZnVuY3Rpb24oY29kZWMpIHsKICAgICAgICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmV0dXJuIGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29kZWMucGF5bG9hZFR5cGU7CiAgICAgIH0pLmpvaW4oJyAnKSArICdcclxuJzsKCiAgICAgIHNkcCArPSAnYz1JTiBJUDQgMC4wLjAuMFxyXG4nOwogICAgICBzZHAgKz0gJ2E9cnRjcDo5IElOIElQNCAwLjAuMC4wXHJcbic7CgogICAgICAvLyBBZGQgYT1ydHBtYXAgbGluZXMgZm9yIGVhY2ggY29kZWMuIEFsc28gZm10cCBhbmQgcnRjcC1mYi4KICAgICAgY2Fwcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykgewogICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZVJ0cE1hcChjb2RlYyk7CiAgICAgICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRnRtcChjb2RlYyk7CiAgICAgICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRjcEZiKGNvZGVjKTsKICAgICAgfSk7CiAgICAgIC8vIEZJWE1FOiBhZGQgaGVhZGVyRXh0ZW5zaW9ucywgZmVjTWVjaGFuaXNtxZ8gYW5kIHJ0Y3AuCiAgICAgIHNkcCArPSAnYT1ydGNwLW11eFxyXG4nOwogICAgICByZXR1cm4gc2RwOwogICAgfTsKCiAgICBTRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICAvLyBGSVhNRTogc2Vzcy1pZCBzaG91bGQgYmUgYW4gTlRQIHRpbWVzdGFtcC4KICAgICAgcmV0dXJuICd2PTBcclxuJyArCiAgICAgICAgICAnbz10aGlzaXNhZGFwdGVyb3J0YyA4MTY5NjM5OTE1NjQ2OTQzMTM3IDIgSU4gSVA0IDEyNy4wLjAuMVxyXG4nICsKICAgICAgICAgICdzPS1cclxuJyArCiAgICAgICAgICAndD0wIDBcclxuJzsKICAgIH07CgogICAgU0RQVXRpbHMud3JpdGVNZWRpYVNlY3Rpb24gPSBmdW5jdGlvbih0cmFuc2NlaXZlciwgY2FwcywgdHlwZSwgc3RyZWFtKSB7CiAgICAgIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uKHRyYW5zY2VpdmVyLmtpbmQsIGNhcHMpOwoKICAgICAgLy8gTWFwIElDRSBwYXJhbWV0ZXJzICh1ZnJhZywgcHdkKSB0byBTRFAuCiAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMoCiAgICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKSk7CgogICAgICAvLyBNYXAgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC4KICAgICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMoCiAgICAgICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LmdldExvY2FsUGFyYW1ldGVycygpLAogICAgICAgICAgdHlwZSA9PT0gJ29mZmVyJyA/ICdhY3RwYXNzJyA6ICdhY3RpdmUnKTsKCiAgICAgIHNkcCArPSAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcclxuJzsKCiAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHsKICAgICAgICBzZHAgKz0gJ2E9c2VuZHJlY3ZcclxuJzsKICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHsKICAgICAgICBzZHAgKz0gJ2E9c2VuZG9ubHlcclxuJzsKICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikgewogICAgICAgIHNkcCArPSAnYT1yZWN2b25seVxyXG4nOwogICAgICB9IGVsc2UgewogICAgICAgIHNkcCArPSAnYT1pbmFjdGl2ZVxyXG4nOwogICAgICB9CgogICAgICAvLyBGSVhNRTogZm9yIFJUWCB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBTU1JDcy4gTm90IGltcGxlbWVudGVkIGluIEVkZ2UgeWV0LgogICAgICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7CiAgICAgICAgdmFyIG1zaWQgPSAnbXNpZDonICsgc3RyZWFtLmlkICsgJyAnICsKICAgICAgICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnRyYWNrLmlkICsgJ1xyXG4nOwogICAgICAgIHNkcCArPSAnYT0nICsgbXNpZDsKICAgICAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZFNzcmMgKyAnICcgKyBtc2lkOwogICAgICB9CiAgICAgIC8vIEZJWE1FOiB0aGlzIHNob3VsZCBiZSB3cml0dGVuIGJ5IHdyaXRlUnRwRGVzY3JpcHRpb24uCiAgICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kU3NyYyArICcgY25hbWU6JyArCiAgICAgICAgICBsb2NhbENOYW1lICsgJ1xyXG4nOwogICAgICByZXR1cm4gc2RwOwogICAgfTsKCiAgICAvLyBHZXRzIHRoZSBkaXJlY3Rpb24gZnJvbSB0aGUgbWVkaWFTZWN0aW9uIG9yIHRoZSBzZXNzaW9ucGFydC4KICAgIFNEUFV0aWxzLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHsKICAgICAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuCiAgICAgIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykgewogICAgICAgIHN3aXRjaCAobGluZXNbaV0pIHsKICAgICAgICAgIGNhc2UgJ2E9c2VuZHJlY3YnOgogICAgICAgICAgY2FzZSAnYT1zZW5kb25seSc6CiAgICAgICAgICBjYXNlICdhPXJlY3Zvbmx5JzoKICAgICAgICAgIGNhc2UgJ2E9aW5hY3RpdmUnOgogICAgICAgICAgICByZXR1cm4gbGluZXNbaV0uc3Vic3RyKDIpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoc2Vzc2lvbnBhcnQpIHsKICAgICAgICByZXR1cm4gU0RQVXRpbHMuZ2V0RGlyZWN0aW9uKHNlc3Npb25wYXJ0KTsKICAgICAgfQogICAgICByZXR1cm4gJ3NlbmRyZWN2JzsKICAgIH07CgogICAgLy8gT1JUQyBkZWZpbmVzIGFuIFJUQ0ljZUNhbmRpZGF0ZSBvYmplY3QgYnV0IG5vIGNvbnN0cnVjdG9yLgogICAgLy8gTm90IGltcGxlbWVudGVkIGluIEVkZ2UuCiAgICBpZiAoIXdpbmRvdy5SVENJY2VDYW5kaWRhdGUpIHsKICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGFyZ3MpIHsKICAgICAgICByZXR1cm4gYXJnczsKICAgICAgfTsKICAgIH0KICAgIC8vIE9SVEMgZG9lcyBub3QgaGF2ZSBhIHNlc3Npb24gZGVzY3JpcHRpb24gb2JqZWN0IGJ1dAogICAgLy8gb3RoZXIgYnJvd3NlcnMgKGkuZS4gQ2hyb21lKSB0aGF0IHdpbGwgc3VwcG9ydCBib3RoIFBDIGFuZCBPUlRDCiAgICAvLyBpbiB0aGUgZnV0dXJlIG1pZ2h0IGhhdmUgdGhpcyBkZWZpbmVkIGFscmVhZHkuCiAgICBpZiAoIXdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pIHsKICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGFyZ3MpIHsKICAgICAgICByZXR1cm4gYXJnczsKICAgICAgfTsKICAgIH0KCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25maWcpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgdGhpcy5vbmljZWNhbmRpZGF0ZSA9IG51bGw7CiAgICAgIHRoaXMub25hZGRzdHJlYW0gPSBudWxsOwogICAgICB0aGlzLm9ucmVtb3Zlc3RyZWFtID0gbnVsbDsKICAgICAgdGhpcy5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlID0gbnVsbDsKICAgICAgdGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IG51bGw7CiAgICAgIHRoaXMub25uZWdvdGlhdGlvbm5lZWRlZCA9IG51bGw7CiAgICAgIHRoaXMub25kYXRhY2hhbm5lbCA9IG51bGw7CgogICAgICB0aGlzLmxvY2FsU3RyZWFtcyA9IFtdOwogICAgICB0aGlzLnJlbW90ZVN0cmVhbXMgPSBbXTsKICAgICAgdGhpcy5nZXRMb2NhbFN0cmVhbXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYubG9jYWxTdHJlYW1zOyB9OwogICAgICB0aGlzLmdldFJlbW90ZVN0cmVhbXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYucmVtb3RlU3RyZWFtczsgfTsKCiAgICAgIHRoaXMubG9jYWxEZXNjcmlwdGlvbiA9IG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oewogICAgICAgIHR5cGU6ICcnLAogICAgICAgIHNkcDogJycKICAgICAgfSk7CiAgICAgIHRoaXMucmVtb3RlRGVzY3JpcHRpb24gPSBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHsKICAgICAgICB0eXBlOiAnJywKICAgICAgICBzZHA6ICcnCiAgICAgIH0pOwogICAgICB0aGlzLnNpZ25hbGluZ1N0YXRlID0gJ3N0YWJsZSc7CiAgICAgIHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlID0gJ25ldyc7CgogICAgICB0aGlzLmljZU9wdGlvbnMgPSB7CiAgICAgICAgZ2F0aGVyUG9saWN5OiAnYWxsJywKICAgICAgICBpY2VTZXJ2ZXJzOiBbXQogICAgICB9OwogICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kpIHsKICAgICAgICBzd2l0Y2ggKGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kpIHsKICAgICAgICAgIGNhc2UgJ2FsbCc6CiAgICAgICAgICBjYXNlICdyZWxheSc6CiAgICAgICAgICAgIHRoaXMuaWNlT3B0aW9ucy5nYXRoZXJQb2xpY3kgPSBjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgJ25vbmUnOgogICAgICAgICAgICAvLyBGSVhNRTogcmVtb3ZlIG9uY2UgaW1wbGVtZW50YXRpb24gYW5kIHNwZWMgaGF2ZSBhZGRlZCB0aGlzLgogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpY2VUcmFuc3BvcnRQb2xpY3kgIm5vbmUiIG5vdCBzdXBwb3J0ZWQnKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaWNlU2VydmVycykgewogICAgICAgIC8vIEVkZ2UgZG9lcyBub3QgbGlrZQogICAgICAgIC8vIDEpIHN0dW46CiAgICAgICAgLy8gMikgdHVybjogdGhhdCBkb2VzIG5vdCBoYXZlIGFsbCBvZiB0dXJuOmhvc3Q6cG9ydD90cmFuc3BvcnQ9dWRwCiAgICAgICAgLy8gMykgYW4gYXJyYXkgb2YgdXJscwogICAgICAgIGNvbmZpZy5pY2VTZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24oc2VydmVyKSB7CiAgICAgICAgICBpZiAoc2VydmVyLnVybHMpIHsKICAgICAgICAgICAgdmFyIHVybDsKICAgICAgICAgICAgaWYgKHR5cGVvZihzZXJ2ZXIudXJscykgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgdXJsID0gc2VydmVyLnVybHM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdXJsID0gc2VydmVyLnVybHNbMF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCd0cmFuc3BvcnQ9dWRwJykgIT09IC0xKSB7CiAgICAgICAgICAgICAgc2VsZi5pY2VTZXJ2ZXJzLnB1c2goewogICAgICAgICAgICAgICAgdXNlcm5hbWU6IHNlcnZlci51c2VybmFtZSwKICAgICAgICAgICAgICAgIGNyZWRlbnRpYWw6IHNlcnZlci5jcmVkZW50aWFsLAogICAgICAgICAgICAgICAgdXJsczogdXJsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLy8gcGVyLXRyYWNrIGljZUdhdGhlcnMsIGljZVRyYW5zcG9ydHMsIGR0bHNUcmFuc3BvcnRzLCBydHBTZW5kZXJzLCAuLi4KICAgICAgLy8gZXZlcnl0aGluZyB0aGF0IGlzIG5lZWRlZCB0byBkZXNjcmliZSBhIFNEUCBtLWxpbmUuCiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzID0gW107CgogICAgICAvLyBzaW5jZSB0aGUgaWNlR2F0aGVyZXIgaXMgY3VycmVudGx5IGNyZWF0ZWQgaW4gY3JlYXRlT2ZmZXIgYnV0IHdlCiAgICAgIC8vIG11c3Qgbm90IGVtaXQgY2FuZGlkYXRlcyB1bnRpbCBhZnRlciBzZXRMb2NhbERlc2NyaXB0aW9uIHdlIGJ1ZmZlcgogICAgICAvLyB0aGVtIGluIHRoaXMgYXJyYXkuCiAgICAgIHRoaXMuX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlciA9IFtdOwogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgLy8gRklYTUU6IG5lZWQgdG8gYXBwbHkgaWNlIGNhbmRpZGF0ZXMgaW4gYSB3YXkgd2hpY2ggaXMgYXN5bmMgYnV0IGluLW9yZGVyCiAgICAgIHRoaXMuX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlci5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgaWYgKHNlbGYub25pY2VjYW5kaWRhdGUgIT09IG51bGwpIHsKICAgICAgICAgIHNlbGYub25pY2VjYW5kaWRhdGUoZXZlbnQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlciA9IFtdOwogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAvLyBDbG9uZSBpcyBuZWNlc3NhcnkgZm9yIGxvY2FsIGRlbW9zIG1vc3RseSwgYXR0YWNoaW5nIGRpcmVjdGx5CiAgICAgIC8vIHRvIHR3byBkaWZmZXJlbnQgc2VuZGVycyBkb2VzIG5vdCB3b3JrIChidWlsZCAxMDU0NykuCiAgICAgIHRoaXMubG9jYWxTdHJlYW1zLnB1c2goc3RyZWFtLmNsb25lKCkpOwogICAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpOwogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICB2YXIgaWR4ID0gdGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pOwogICAgICBpZiAoaWR4ID4gLTEpIHsKICAgICAgICB0aGlzLmxvY2FsU3RyZWFtcy5zcGxpY2UoaWR4LCAxKTsKICAgICAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpOwogICAgICB9CiAgICB9OwoKICAgIC8vIERldGVybWluZXMgdGhlIGludGVyc2VjdGlvbiBvZiBsb2NhbCBhbmQgcmVtb3RlIGNhcGFiaWxpdGllcy4KICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2dldENvbW1vbkNhcGFiaWxpdGllcyA9CiAgICAgICAgZnVuY3Rpb24obG9jYWxDYXBhYmlsaXRpZXMsIHJlbW90ZUNhcGFiaWxpdGllcykgewogICAgICB2YXIgY29tbW9uQ2FwYWJpbGl0aWVzID0gewogICAgICAgIGNvZGVjczogW10sCiAgICAgICAgaGVhZGVyRXh0ZW5zaW9uczogW10sCiAgICAgICAgZmVjTWVjaGFuaXNtczogW10KICAgICAgfTsKICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24obENvZGVjKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB2YXIgckNvZGVjID0gcmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjc1tpXTsKICAgICAgICAgIGlmIChsQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSByQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpICYmCiAgICAgICAgICAgICAgbENvZGVjLmNsb2NrUmF0ZSA9PT0gckNvZGVjLmNsb2NrUmF0ZSAmJgogICAgICAgICAgICAgIGxDb2RlYy5udW1DaGFubmVscyA9PT0gckNvZGVjLm51bUNoYW5uZWxzKSB7CiAgICAgICAgICAgIC8vIHB1c2ggckNvZGVjIHNvIHdlIHJlcGx5IHdpdGggb2ZmZXJlciBwYXlsb2FkIHR5cGUKICAgICAgICAgICAgY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5wdXNoKHJDb2RlYyk7CgogICAgICAgICAgICAvLyBGSVhNRTogYWxzbyBuZWVkIHRvIGRldGVybWluZSBpbnRlcnNlY3Rpb24gYmV0d2VlbgogICAgICAgICAgICAvLyAucnRjcEZlZWRiYWNrIGFuZCAucGFyYW1ldGVycwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGxIZWFkZXJFeHRlbnNpb24pIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB2YXIgckhlYWRlckV4dGVuc2lvbiA9IHJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zW2ldOwogICAgICAgICAgaWYgKGxIZWFkZXJFeHRlbnNpb24udXJpID09PSBySGVhZGVyRXh0ZW5zaW9uLnVyaSkgewogICAgICAgICAgICBjb21tb25DYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKHJIZWFkZXJFeHRlbnNpb24pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgLy8gRklYTUU6IGZlY01lY2hhbmlzbXMKICAgICAgcmV0dXJuIGNvbW1vbkNhcGFiaWxpdGllczsKICAgIH07CgogICAgLy8gQ3JlYXRlIElDRSBnYXRoZXJlciwgSUNFIHRyYW5zcG9ydCBhbmQgRFRMUyB0cmFuc3BvcnQuCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyA9CiAgICAgICAgZnVuY3Rpb24obWlkLCBzZHBNTGluZUluZGV4KSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIGljZUdhdGhlcmVyID0gbmV3IFJUQ0ljZUdhdGhlcmVyKHNlbGYuaWNlT3B0aW9ucyk7CiAgICAgIHZhciBpY2VUcmFuc3BvcnQgPSBuZXcgUlRDSWNlVHJhbnNwb3J0KGljZUdhdGhlcmVyKTsKICAgICAgaWNlR2F0aGVyZXIub25sb2NhbGNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgIHZhciBldmVudCA9IHt9OwogICAgICAgIGV2ZW50LmNhbmRpZGF0ZSA9IHtzZHBNaWQ6IG1pZCwgc2RwTUxpbmVJbmRleDogc2RwTUxpbmVJbmRleH07CgogICAgICAgIHZhciBjYW5kID0gZXZ0LmNhbmRpZGF0ZTsKICAgICAgICAvLyBFZGdlIGVtaXRzIGFuIGVtcHR5IG9iamVjdCBmb3IgUlRDSWNlQ2FuZGlkYXRlQ29tcGxldGXigKUKICAgICAgICBpZiAoIWNhbmQgfHwgT2JqZWN0LmtleXMoY2FuZCkubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAvLyBwb2x5ZmlsbCBzaW5jZSBSVENJY2VHYXRoZXJlci5zdGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQgaW4gRWRnZSAxMDU0NyB5ZXQuCiAgICAgICAgICBpZiAoaWNlR2F0aGVyZXIuc3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBpY2VHYXRoZXJlci5zdGF0ZSA9ICdjb21wbGV0ZWQnOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEVtaXQgYSBjYW5kaWRhdGUgd2l0aCB0eXBlIGVuZE9mQ2FuZGlkYXRlcyB0byBtYWtlIHRoZSBzYW1wbGVzIHdvcmsuCiAgICAgICAgICAvLyBFZGdlIHJlcXVpcmVzIGFkZEljZUNhbmRpZGF0ZSB3aXRoIHRoaXMgZW1wdHkgY2FuZGlkYXRlIHRvIHN0YXJ0IGNoZWNraW5nLgogICAgICAgICAgLy8gVGhlIHJlYWwgc29sdXRpb24gaXMgdG8gc2lnbmFsIGVuZC1vZi1jYW5kaWRhdGVzIHRvIHRoZSBvdGhlciBzaWRlIHdoZW4KICAgICAgICAgIC8vIGdldHRpbmcgdGhlIG51bGwgY2FuZGlkYXRlIGJ1dCBzb21lIGFwcHMgKGxpa2UgdGhlIHNhbXBsZXMpIGRvbid0IGRvIHRoYXQuCiAgICAgICAgICBldmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlID0KICAgICAgICAgICAgICAnY2FuZGlkYXRlOjEgMSB1ZHAgMSAwLjAuMC4wIDkgdHlwIGVuZE9mQ2FuZGlkYXRlcyc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIFJUQ0ljZUNhbmRpZGF0ZSBkb2Vzbid0IGhhdmUgYSBjb21wb25lbnQsIG5lZWRzIHRvIGJlIGFkZGVkCiAgICAgICAgICBjYW5kLmNvbXBvbmVudCA9IGljZVRyYW5zcG9ydC5jb21wb25lbnQgPT09ICdSVENQJyA/IDIgOiAxOwogICAgICAgICAgZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSA9IFNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlKGNhbmQpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNvbXBsZXRlID0gc2VsZi50cmFuc2NlaXZlcnMuZXZlcnkoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHsKICAgICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5pY2VHYXRoZXJlciAmJgogICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLnN0YXRlID09PSAnY29tcGxldGVkJzsKICAgICAgICB9KTsKICAgICAgICAvLyBGSVhNRTogdXBkYXRlIC5sb2NhbERlc2NyaXB0aW9uIHdpdGggY2FuZGlkYXRlIGFuZCAocG90ZW50aWFsbHkpIGVuZC1vZi1jYW5kaWRhdGVzLgogICAgICAgIC8vICAgICBUbyBtYWtlIHRoaXMgaGFyZGVyLCB0aGUgZ2F0aGVyZXIgbWlnaHQgZW1pdCBjYW5kaWRhdGVzIGJlZm9yZSBsb2NhbGRlc2NyaXB0aW9uCiAgICAgICAgLy8gICAgIGlzIHNldC4gVG8gbWFrZSB0aGluZ3Mgd29yc2UsIGdhdGhlci5nZXRMb2NhbENhbmRpZGF0ZXMgc3RpbGwgZXJyb3JzIGluCiAgICAgICAgLy8gICAgIEVkZ2UgMTA1NDcgd2hlbiBubyBjYW5kaWRhdGVzIGhhdmUgYmVlbiBnYXRoZXJlZCB5ZXQuCgogICAgICAgIGlmIChzZWxmLm9uaWNlY2FuZGlkYXRlICE9PSBudWxsKSB7CiAgICAgICAgICAvLyBFbWl0IGNhbmRpZGF0ZSBpZiBsb2NhbERlc2NyaXB0aW9uIGlzIHNldC4KICAgICAgICAgIC8vIEFsc28gZW1pdHMgbnVsbCBjYW5kaWRhdGUgd2hlbiBhbGwgZ2F0aGVyZXJzIGFyZSBjb21wbGV0ZS4KICAgICAgICAgIGlmIChzZWxmLmxvY2FsRGVzY3JpcHRpb24gJiYgc2VsZi5sb2NhbERlc2NyaXB0aW9uLnR5cGUgPT09ICcnKSB7CiAgICAgICAgICAgIHNlbGYuX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlci5wdXNoKGV2ZW50KTsKICAgICAgICAgICAgaWYgKGNvbXBsZXRlKSB7CiAgICAgICAgICAgICAgc2VsZi5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLnB1c2goe30pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWxmLm9uaWNlY2FuZGlkYXRlKGV2ZW50KTsKICAgICAgICAgICAgaWYgKGNvbXBsZXRlKSB7CiAgICAgICAgICAgICAgc2VsZi5vbmljZWNhbmRpZGF0ZSh7fSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CiAgICAgIGljZVRyYW5zcG9ydC5vbmljZXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7CiAgICAgIH07CgogICAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IG5ldyBSVENEdGxzVHJhbnNwb3J0KGljZVRyYW5zcG9ydCk7CiAgICAgIGR0bHNUcmFuc3BvcnQub25kdGxzc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICBzZWxmLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTsKICAgICAgfTsKICAgICAgZHRsc1RyYW5zcG9ydC5vbmVycm9yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gb25lcnJvciBkb2VzIG5vdCBzZXQgc3RhdGUgdG8gZmFpbGVkIGJ5IGl0c2VsZi4KICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXRlID0gJ2ZhaWxlZCc7CiAgICAgICAgc2VsZi5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7CiAgICAgIH07CgogICAgICByZXR1cm4gewogICAgICAgIGljZUdhdGhlcmVyOiBpY2VHYXRoZXJlciwKICAgICAgICBpY2VUcmFuc3BvcnQ6IGljZVRyYW5zcG9ydCwKICAgICAgICBkdGxzVHJhbnNwb3J0OiBkdGxzVHJhbnNwb3J0CiAgICAgIH07CiAgICB9OwoKICAgIC8vIFN0YXJ0IHRoZSBSVFAgU2VuZGVyIGFuZCBSZWNlaXZlciBmb3IgYSB0cmFuc2NlaXZlci4KICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3RyYW5zY2VpdmUgPSBmdW5jdGlvbih0cmFuc2NlaXZlciwKICAgICAgICBzZW5kLCByZWN2KSB7CiAgICAgIHZhciBwYXJhbXMgPSB0aGlzLl9nZXRDb21tb25DYXBhYmlsaXRpZXModHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpOwogICAgICBpZiAoc2VuZCAmJiB0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHsKICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gW3sKICAgICAgICAgIHNzcmM6IHRyYW5zY2VpdmVyLnNlbmRTc3JjCiAgICAgICAgfV07CiAgICAgICAgcGFyYW1zLnJ0Y3AgPSB7CiAgICAgICAgICBjbmFtZTogbG9jYWxDTmFtZSwKICAgICAgICAgIHNzcmM6IHRyYW5zY2VpdmVyLnJlY3ZTc3JjCiAgICAgICAgfTsKICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc2VuZChwYXJhbXMpOwogICAgICB9CiAgICAgIGlmIChyZWN2ICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7CiAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IFt7CiAgICAgICAgICBzc3JjOiB0cmFuc2NlaXZlci5yZWN2U3NyYwogICAgICAgIH1dOwogICAgICAgIHBhcmFtcy5ydGNwID0gewogICAgICAgICAgY25hbWU6IHRyYW5zY2VpdmVyLmNuYW1lLAogICAgICAgICAgc3NyYzogdHJhbnNjZWl2ZXIuc2VuZFNzcmMKICAgICAgICB9OwogICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnJlY2VpdmUocGFyYW1zKTsKICAgICAgfQogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb24gPQogICAgICAgIGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicpIHsKICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdPZmZlcikgewogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnRyYW5zY2VpdmVycyA9IHRoaXMuX3BlbmRpbmdPZmZlcjsKICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nT2ZmZXI7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInKSB7CiAgICAgICAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhzZWxmLnJlbW90ZURlc2NyaXB0aW9uLnNkcCk7CiAgICAgICAgdmFyIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTsKICAgICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkgewogICAgICAgICAgdmFyIHRyYW5zY2VpdmVyID0gc2VsZi50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07CiAgICAgICAgICB2YXIgaWNlR2F0aGVyZXIgPSB0cmFuc2NlaXZlci5pY2VHYXRoZXJlcjsKICAgICAgICAgIHZhciBpY2VUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQ7CiAgICAgICAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQ7CiAgICAgICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllczsKICAgICAgICAgIHZhciByZW1vdGVDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXM7CiAgICAgICAgICB2YXIgcmVqZWN0ZWQgPSBtZWRpYVNlY3Rpb24uc3BsaXQoJ1xuJywgMSlbMF0KICAgICAgICAgICAgICAuc3BsaXQoJyAnLCAyKVsxXSA9PT0gJzAnOwoKICAgICAgICAgIGlmICghcmVqZWN0ZWQpIHsKICAgICAgICAgICAgdmFyIHJlbW90ZUljZVBhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbiwKICAgICAgICAgICAgICAgIHNlc3Npb25wYXJ0KTsKICAgICAgICAgICAgaWNlVHJhbnNwb3J0LnN0YXJ0KGljZUdhdGhlcmVyLCByZW1vdGVJY2VQYXJhbWV0ZXJzLCAnY29udHJvbGxlZCcpOwoKICAgICAgICAgICAgdmFyIHJlbW90ZUR0bHNQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0RHRsc1BhcmFtZXRlcnMobWVkaWFTZWN0aW9uLAogICAgICAgICAgICAgIHNlc3Npb25wYXJ0KTsKICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGFydChyZW1vdGVEdGxzUGFyYW1ldGVycyk7CgogICAgICAgICAgICAvLyBDYWxjdWxhdGUgaW50ZXJzZWN0aW9uIG9mIGNhcGFiaWxpdGllcy4KICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHNlbGYuX2dldENvbW1vbkNhcGFiaWxpdGllcyhsb2NhbENhcGFiaWxpdGllcywKICAgICAgICAgICAgICAgIHJlbW90ZUNhcGFiaWxpdGllcyk7CgogICAgICAgICAgICAvLyBTdGFydCB0aGUgUlRDUnRwU2VuZGVyLiBUaGUgUlRDUnRwUmVjZWl2ZXIgZm9yIHRoaXMgdHJhbnNjZWl2ZXIKICAgICAgICAgICAgLy8gaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGluIHNldFJlbW90ZURlc2NyaXB0aW9uLgogICAgICAgICAgICBzZWxmLl90cmFuc2NlaXZlKHRyYW5zY2VpdmVyLAogICAgICAgICAgICAgICAgcGFyYW1zLmNvZGVjcy5sZW5ndGggPiAwLAogICAgICAgICAgICAgICAgZmFsc2UpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aGlzLmxvY2FsRGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsKICAgICAgc3dpdGNoIChkZXNjcmlwdGlvbi50eXBlKSB7CiAgICAgICAgY2FzZSAnb2ZmZXInOgogICAgICAgICAgdGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ2hhdmUtbG9jYWwtb2ZmZXInKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ2Fuc3dlcic6CiAgICAgICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnc3RhYmxlJyk7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5zdXBwb3J0ZWQgdHlwZSAiJyArIGRlc2NyaXB0aW9uLnR5cGUgKyAnIicpOwogICAgICB9CgogICAgICAvLyBJZiBhIHN1Y2Nlc3MgY2FsbGJhY2sgd2FzIHByb3ZpZGVkLCBlbWl0IElDRSBjYW5kaWRhdGVzIGFmdGVyIGl0IGhhcyBiZWVuCiAgICAgIC8vIGV4ZWN1dGVkLiBPdGhlcndpc2UsIGVtaXQgY2FsbGJhY2sgYWZ0ZXIgdGhlIFByb21pc2UgaXMgcmVzb2x2ZWQuCiAgICAgIHZhciBoYXNDYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmCiAgICAgICAgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJzsKICAgICAgaWYgKGhhc0NhbGxiYWNrKSB7CiAgICAgICAgdmFyIGNiID0gYXJndW1lbnRzWzFdOwogICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgY2IoKTsKICAgICAgICAgIHNlbGYuX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMoKTsKICAgICAgICB9LCAwKTsKICAgICAgfQogICAgICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpOwogICAgICBwLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFoYXNDYWxsYmFjaykgewogICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoc2VsZi5fZW1pdEJ1ZmZlcmVkQ2FuZGlkYXRlcy5iaW5kKHNlbGYpLCAwKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gcDsKICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9CiAgICAgICAgZnVuY3Rpb24oZGVzY3JpcHRpb24pIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgc3RyZWFtID0gbmV3IE1lZGlhU3RyZWFtKCk7CiAgICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoZGVzY3JpcHRpb24uc2RwKTsKICAgICAgdmFyIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTsKICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNkcE1MaW5lSW5kZXgpIHsKICAgICAgICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7CiAgICAgICAgdmFyIG1saW5lID0gbGluZXNbMF0uc3Vic3RyKDIpLnNwbGl0KCcgJyk7CiAgICAgICAgdmFyIGtpbmQgPSBtbGluZVswXTsKICAgICAgICB2YXIgcmVqZWN0ZWQgPSBtbGluZVsxXSA9PT0gJzAnOwogICAgICAgIHZhciBkaXJlY3Rpb24gPSBTRFBVdGlscy5nZXREaXJlY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7CgogICAgICAgIHZhciB0cmFuc2NlaXZlcjsKICAgICAgICB2YXIgaWNlR2F0aGVyZXI7CiAgICAgICAgdmFyIGljZVRyYW5zcG9ydDsKICAgICAgICB2YXIgZHRsc1RyYW5zcG9ydDsKICAgICAgICB2YXIgcnRwU2VuZGVyOwogICAgICAgIHZhciBydHBSZWNlaXZlcjsKICAgICAgICB2YXIgc2VuZFNzcmM7CiAgICAgICAgdmFyIHJlY3ZTc3JjOwogICAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllczsKCiAgICAgICAgLy8gRklYTUU6IGVuc3VyZSB0aGUgbWVkaWFTZWN0aW9uIGhhcyBydGNwLW11eCBzZXQuCiAgICAgICAgdmFyIHJlbW90ZUNhcGFiaWxpdGllcyA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pOwogICAgICAgIHZhciByZW1vdGVJY2VQYXJhbWV0ZXJzOwogICAgICAgIHZhciByZW1vdGVEdGxzUGFyYW1ldGVyczsKICAgICAgICBpZiAoIXJlamVjdGVkKSB7CiAgICAgICAgICByZW1vdGVJY2VQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sCiAgICAgICAgICAgICAgc2Vzc2lvbnBhcnQpOwogICAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sCiAgICAgICAgICAgICAgc2Vzc2lvbnBhcnQpOwogICAgICAgIH0KICAgICAgICB2YXIgbWlkID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1taWQ6JylbMF0uc3Vic3RyKDYpOwoKICAgICAgICB2YXIgY25hbWU7CiAgICAgICAgLy8gR2V0cyB0aGUgZmlyc3QgU1NSQy4gTm90ZSB0aGF0IHdpdGggUlRYIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlIFNTUkNzLgogICAgICAgIHZhciByZW1vdGVTc3JjID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zc3JjOicpCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihvYmopIHsKICAgICAgICAgICAgICByZXR1cm4gb2JqLmF0dHJpYnV0ZSA9PT0gJ2NuYW1lJzsKICAgICAgICAgICAgfSlbMF07CiAgICAgICAgaWYgKHJlbW90ZVNzcmMpIHsKICAgICAgICAgIHJlY3ZTc3JjID0gcGFyc2VJbnQocmVtb3RlU3NyYy5zc3JjLCAxMCk7CiAgICAgICAgICBjbmFtZSA9IHJlbW90ZVNzcmMudmFsdWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykgewogICAgICAgICAgdmFyIHRyYW5zcG9ydHMgPSBzZWxmLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyhtaWQsIHNkcE1MaW5lSW5kZXgpOwoKICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzID0gUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpOwogICAgICAgICAgc2VuZFNzcmMgPSAoMiAqIHNkcE1MaW5lSW5kZXggKyAyKSAqIDEwMDE7CgogICAgICAgICAgcnRwUmVjZWl2ZXIgPSBuZXcgUlRDUnRwUmVjZWl2ZXIodHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0LCBraW5kKTsKCiAgICAgICAgICAvLyBGSVhNRTogbm90IGNvcnJlY3Qgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgc3RyZWFtcyBidXQgdGhhdCBpcwogICAgICAgICAgLy8gbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgaW4gdGhpcyBzaGltLgogICAgICAgICAgc3RyZWFtLmFkZFRyYWNrKHJ0cFJlY2VpdmVyLnRyYWNrKTsKCiAgICAgICAgICAvLyBGSVhNRTogbG9vayBhdCBkaXJlY3Rpb24uCiAgICAgICAgICBpZiAoc2VsZi5sb2NhbFN0cmVhbXMubGVuZ3RoID4gMCAmJgogICAgICAgICAgICAgIHNlbGYubG9jYWxTdHJlYW1zWzBdLmdldFRyYWNrcygpLmxlbmd0aCA+PSBzZHBNTGluZUluZGV4KSB7CiAgICAgICAgICAgIC8vIEZJWE1FOiBhY3R1YWxseSBtb3JlIGNvbXBsaWNhdGVkLCBuZWVkcyB0byBtYXRjaCB0eXBlcyBldGMKICAgICAgICAgICAgdmFyIGxvY2FsdHJhY2sgPSBzZWxmLmxvY2FsU3RyZWFtc1swXS5nZXRUcmFja3MoKVtzZHBNTGluZUluZGV4XTsKICAgICAgICAgICAgcnRwU2VuZGVyID0gbmV3IFJUQ1J0cFNlbmRlcihsb2NhbHRyYWNrLCB0cmFuc3BvcnRzLmR0bHNUcmFuc3BvcnQpOwogICAgICAgICAgfQoKICAgICAgICAgIHNlbGYudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdID0gewogICAgICAgICAgICBpY2VHYXRoZXJlcjogdHJhbnNwb3J0cy5pY2VHYXRoZXJlciwKICAgICAgICAgICAgaWNlVHJhbnNwb3J0OiB0cmFuc3BvcnRzLmljZVRyYW5zcG9ydCwKICAgICAgICAgICAgZHRsc1RyYW5zcG9ydDogdHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0LAogICAgICAgICAgICBsb2NhbENhcGFiaWxpdGllczogbG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICAgIHJlbW90ZUNhcGFiaWxpdGllczogcmVtb3RlQ2FwYWJpbGl0aWVzLAogICAgICAgICAgICBydHBTZW5kZXI6IHJ0cFNlbmRlciwKICAgICAgICAgICAgcnRwUmVjZWl2ZXI6IHJ0cFJlY2VpdmVyLAogICAgICAgICAgICBraW5kOiBraW5kLAogICAgICAgICAgICBtaWQ6IG1pZCwKICAgICAgICAgICAgY25hbWU6IGNuYW1lLAogICAgICAgICAgICBzZW5kU3NyYzogc2VuZFNzcmMsCiAgICAgICAgICAgIHJlY3ZTc3JjOiByZWN2U3NyYwogICAgICAgICAgfTsKICAgICAgICAgIC8vIFN0YXJ0IHRoZSBSVENSdHBSZWNlaXZlciBub3cuIFRoZSBSVFBTZW5kZXIgaXMgc3RhcnRlZCBpbiBzZXRMb2NhbERlc2NyaXB0aW9uLgogICAgICAgICAgc2VsZi5fdHJhbnNjZWl2ZShzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSwKICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgICBkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAnc2VuZG9ubHknKTsKICAgICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInICYmICFyZWplY3RlZCkgewogICAgICAgICAgdHJhbnNjZWl2ZXIgPSBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XTsKICAgICAgICAgIGljZUdhdGhlcmVyID0gdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXI7CiAgICAgICAgICBpY2VUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQ7CiAgICAgICAgICBkdGxzVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydDsKICAgICAgICAgIHJ0cFNlbmRlciA9IHRyYW5zY2VpdmVyLnJ0cFNlbmRlcjsKICAgICAgICAgIHJ0cFJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7CiAgICAgICAgICBzZW5kU3NyYyA9IHRyYW5zY2VpdmVyLnNlbmRTc3JjOwogICAgICAgICAgLy9yZWN2U3NyYyA9IHRyYW5zY2VpdmVyLnJlY3ZTc3JjOwogICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllczsKCiAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5yZWN2U3NyYyA9IHJlY3ZTc3JjOwogICAgICAgICAgc2VsZi50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucmVtb3RlQ2FwYWJpbGl0aWVzID0KICAgICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXM7CiAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5jbmFtZSA9IGNuYW1lOwoKICAgICAgICAgIGljZVRyYW5zcG9ydC5zdGFydChpY2VHYXRoZXJlciwgcmVtb3RlSWNlUGFyYW1ldGVycywgJ2NvbnRyb2xsaW5nJyk7CiAgICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXJ0KHJlbW90ZUR0bHNQYXJhbWV0ZXJzKTsKCiAgICAgICAgICBzZWxmLl90cmFuc2NlaXZlKHRyYW5zY2VpdmVyLAogICAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdyZWN2b25seScsCiAgICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5Jyk7CgogICAgICAgICAgaWYgKHJ0cFJlY2VpdmVyICYmCiAgICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpKSB7CiAgICAgICAgICAgIHN0cmVhbS5hZGRUcmFjayhydHBSZWNlaXZlci50cmFjayk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBGSVhNRTogYWN0dWFsbHkgdGhlIHJlY2VpdmVyIHNob3VsZCBiZSBjcmVhdGVkIGxhdGVyLgogICAgICAgICAgICBkZWxldGUgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHRoaXMucmVtb3RlRGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsKICAgICAgc3dpdGNoIChkZXNjcmlwdGlvbi50eXBlKSB7CiAgICAgICAgY2FzZSAnb2ZmZXInOgogICAgICAgICAgdGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ2hhdmUtcmVtb3RlLW9mZmVyJyk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdhbnN3ZXInOgogICAgICAgICAgdGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ3N0YWJsZScpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Vuc3VwcG9ydGVkIHR5cGUgIicgKyBkZXNjcmlwdGlvbi50eXBlICsgJyInKTsKICAgICAgfQogICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICBpZiAoc2VsZi5vbmFkZHN0cmVhbSAhPT0gbnVsbCAmJiBzdHJlYW0uZ2V0VHJhY2tzKCkubGVuZ3RoKSB7CiAgICAgICAgICBzZWxmLnJlbW90ZVN0cmVhbXMucHVzaChzdHJlYW0pOwogICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYub25hZGRzdHJlYW0oe3N0cmVhbTogc3RyZWFtfSk7CiAgICAgICAgICB9LCAwKTsKICAgICAgICB9CiAgICAgIH0sIDApOwogICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1sxXSwgMCk7CiAgICAgIH0KICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHsKICAgICAgICAvKiBub3QgeWV0CiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyKSB7CiAgICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5jbG9zZSgpOwogICAgICAgIH0KICAgICAgICAqLwogICAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQpIHsKICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdG9wKCk7CiAgICAgICAgfQogICAgICAgIGlmICh0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0KSB7CiAgICAgICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LnN0b3AoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikgewogICAgICAgICAgdHJhbnNjZWl2ZXIucnRwU2VuZGVyLnN0b3AoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7CiAgICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci5zdG9wKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgLy8gRklYTUU6IGNsZWFuIHVwIHRyYWNrcywgbG9jYWwgc3RyZWFtcywgcmVtb3RlIHN0cmVhbXMsIGV0YwogICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnY2xvc2VkJyk7CiAgICB9OwoKICAgIC8vIFVwZGF0ZSB0aGUgc2lnbmFsaW5nIHN0YXRlLgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlU2lnbmFsaW5nU3RhdGUgPQogICAgICAgIGZ1bmN0aW9uKG5ld1N0YXRlKSB7CiAgICAgIHRoaXMuc2lnbmFsaW5nU3RhdGUgPSBuZXdTdGF0ZTsKICAgICAgaWYgKHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZSAhPT0gbnVsbCkgewogICAgICAgIHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZSgpOwogICAgICB9CiAgICB9OwoKICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRvIGZpcmUgdGhlIG5lZ290aWF0aW9ubmVlZGVkIGV2ZW50LgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQgPQogICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAvLyBGaXJlIGF3YXkgKGZvciBub3cpLgogICAgICBpZiAodGhpcy5vbm5lZ290aWF0aW9ubmVlZGVkICE9PSBudWxsKSB7CiAgICAgICAgdGhpcy5vbm5lZ290aWF0aW9ubmVlZGVkKCk7CiAgICAgIH0KICAgIH07CgogICAgLy8gVXBkYXRlIHRoZSBjb25uZWN0aW9uIHN0YXRlLgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlID0KICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgbmV3U3RhdGU7CiAgICAgIHZhciBzdGF0ZXMgPSB7CiAgICAgICAgJ25ldyc6IDAsCiAgICAgICAgY2xvc2VkOiAwLAogICAgICAgIGNvbm5lY3Rpbmc6IDAsCiAgICAgICAgY2hlY2tpbmc6IDAsCiAgICAgICAgY29ubmVjdGVkOiAwLAogICAgICAgIGNvbXBsZXRlZDogMCwKICAgICAgICBmYWlsZWQ6IDAKICAgICAgfTsKICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgIHN0YXRlc1t0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuc3RhdGVdKys7CiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RhdGVdKys7CiAgICAgIH0pOwogICAgICAvLyBJQ0VUcmFuc3BvcnQuY29tcGxldGVkIGFuZCBjb25uZWN0ZWQgYXJlIHRoZSBzYW1lIGZvciB0aGlzIHB1cnBvc2UuCiAgICAgIHN0YXRlcy5jb25uZWN0ZWQgKz0gc3RhdGVzLmNvbXBsZXRlZDsKCiAgICAgIG5ld1N0YXRlID0gJ25ldyc7CiAgICAgIGlmIChzdGF0ZXMuZmFpbGVkID4gMCkgewogICAgICAgIG5ld1N0YXRlID0gJ2ZhaWxlZCc7CiAgICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RpbmcgPiAwIHx8IHN0YXRlcy5jaGVja2luZyA+IDApIHsKICAgICAgICBuZXdTdGF0ZSA9ICdjb25uZWN0aW5nJzsKICAgICAgfSBlbHNlIGlmIChzdGF0ZXMuZGlzY29ubmVjdGVkID4gMCkgewogICAgICAgIG5ld1N0YXRlID0gJ2Rpc2Nvbm5lY3RlZCc7CiAgICAgIH0gZWxzZSBpZiAoc3RhdGVzLm5ldyA+IDApIHsKICAgICAgICBuZXdTdGF0ZSA9ICduZXcnOwogICAgICB9IGVsc2UgaWYgKHN0YXRlcy5jb25uZWN0aW5nID4gMCB8fCBzdGF0ZXMuY29tcGxldGVkID4gMCkgewogICAgICAgIG5ld1N0YXRlID0gJ2Nvbm5lY3RlZCc7CiAgICAgIH0KCiAgICAgIGlmIChuZXdTdGF0ZSAhPT0gc2VsZi5pY2VDb25uZWN0aW9uU3RhdGUpIHsKICAgICAgICBzZWxmLmljZUNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlOwogICAgICAgIGlmICh0aGlzLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlICE9PSBudWxsKSB7CiAgICAgICAgICB0aGlzLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBpZiAodGhpcy5fcGVuZGluZ09mZmVyKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVPZmZlciBjYWxsZWQgd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIG9mZmVyLicpOwogICAgICB9CiAgICAgIHZhciBvZmZlck9wdGlvbnM7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdmdW5jdGlvbicpIHsKICAgICAgICBvZmZlck9wdGlvbnMgPSBhcmd1bWVudHNbMF07CiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykgewogICAgICAgIG9mZmVyT3B0aW9ucyA9IGFyZ3VtZW50c1syXTsKICAgICAgfQoKICAgICAgdmFyIHRyYWNrcyA9IFtdOwogICAgICB2YXIgbnVtQXVkaW9UcmFja3MgPSAwOwogICAgICB2YXIgbnVtVmlkZW9UcmFja3MgPSAwOwogICAgICAvLyBEZWZhdWx0IHRvIHNlbmRyZWN2LgogICAgICBpZiAodGhpcy5sb2NhbFN0cmVhbXMubGVuZ3RoKSB7CiAgICAgICAgbnVtQXVkaW9UcmFja3MgPSB0aGlzLmxvY2FsU3RyZWFtc1swXS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aDsKICAgICAgICBudW1WaWRlb1RyYWNrcyA9IHRoaXMubG9jYWxTdHJlYW1zWzBdLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoOwogICAgICB9CiAgICAgIC8vIERldGVybWluZSBudW1iZXIgb2YgYXVkaW8gYW5kIHZpZGVvIHRyYWNrcyB3ZSBuZWVkIHRvIHNlbmQvcmVjdi4KICAgICAgaWYgKG9mZmVyT3B0aW9ucykgewogICAgICAgIC8vIFJlamVjdCBDaHJvbWUgbGVnYWN5IGNvbnN0cmFpbnRzLgogICAgICAgIGlmIChvZmZlck9wdGlvbnMubWFuZGF0b3J5IHx8IG9mZmVyT3B0aW9ucy5vcHRpb25hbCkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigKICAgICAgICAgICAgICAnTGVnYWN5IG1hbmRhdG9yeS9vcHRpb25hbCBjb25zdHJhaW50cyBub3Qgc3VwcG9ydGVkLicpOwogICAgICAgIH0KICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgbnVtQXVkaW9UcmFja3MgPSBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbzsKICAgICAgICB9CiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIG51bVZpZGVvVHJhY2tzID0gb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW87CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0aGlzLmxvY2FsU3RyZWFtcy5sZW5ndGgpIHsKICAgICAgICAvLyBQdXNoIGxvY2FsIHN0cmVhbXMuCiAgICAgICAgdGhpcy5sb2NhbFN0cmVhbXNbMF0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykgewogICAgICAgICAgdHJhY2tzLnB1c2goewogICAgICAgICAgICBraW5kOiB0cmFjay5raW5kLAogICAgICAgICAgICB0cmFjazogdHJhY2ssCiAgICAgICAgICAgIHdhbnRSZWNlaXZlOiB0cmFjay5raW5kID09PSAnYXVkaW8nID8KICAgICAgICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID4gMCA6IG51bVZpZGVvVHJhY2tzID4gMAogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ2F1ZGlvJykgewogICAgICAgICAgICBudW1BdWRpb1RyYWNrcy0tOwogICAgICAgICAgfSBlbHNlIGlmICh0cmFjay5raW5kID09PSAndmlkZW8nKSB7CiAgICAgICAgICAgIG51bVZpZGVvVHJhY2tzLS07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgLy8gQ3JlYXRlIE0tbGluZXMgZm9yIHJlY3Zvbmx5IHN0cmVhbXMuCiAgICAgIHdoaWxlIChudW1BdWRpb1RyYWNrcyA+IDAgfHwgbnVtVmlkZW9UcmFja3MgPiAwKSB7CiAgICAgICAgaWYgKG51bUF1ZGlvVHJhY2tzID4gMCkgewogICAgICAgICAgdHJhY2tzLnB1c2goewogICAgICAgICAgICBraW5kOiAnYXVkaW8nLAogICAgICAgICAgICB3YW50UmVjZWl2ZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgICBudW1BdWRpb1RyYWNrcy0tOwogICAgICAgIH0KICAgICAgICBpZiAobnVtVmlkZW9UcmFja3MgPiAwKSB7CiAgICAgICAgICB0cmFja3MucHVzaCh7CiAgICAgICAgICAgIGtpbmQ6ICd2aWRlbycsCiAgICAgICAgICAgIHdhbnRSZWNlaXZlOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICAgIG51bVZpZGVvVHJhY2tzLS07CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVTZXNzaW9uQm9pbGVycGxhdGUoKTsKICAgICAgdmFyIHRyYW5zY2VpdmVycyA9IFtdOwogICAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbihtbGluZSwgc2RwTUxpbmVJbmRleCkgewogICAgICAgIC8vIEZvciBlYWNoIHRyYWNrLCBjcmVhdGUgYW4gaWNlIGdhdGhlcmVyLCBpY2UgdHJhbnNwb3J0LCBkdGxzIHRyYW5zcG9ydCwKICAgICAgICAvLyBwb3RlbnRpYWxseSBydHBzZW5kZXIgYW5kIHJ0cHJlY2VpdmVyLgogICAgICAgIHZhciB0cmFjayA9IG1saW5lLnRyYWNrOwogICAgICAgIHZhciBraW5kID0gbWxpbmUua2luZDsKICAgICAgICB2YXIgbWlkID0gZ2VuZXJhdGVJZGVudGlmaWVyKCk7CgogICAgICAgIHZhciB0cmFuc3BvcnRzID0gc2VsZi5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHMobWlkLCBzZHBNTGluZUluZGV4KTsKCiAgICAgICAgdmFyIGxvY2FsQ2FwYWJpbGl0aWVzID0gUlRDUnRwU2VuZGVyLmdldENhcGFiaWxpdGllcyhraW5kKTsKICAgICAgICB2YXIgcnRwU2VuZGVyOwogICAgICAgIHZhciBydHBSZWNlaXZlcjsKCiAgICAgICAgLy8gZ2VuZXJhdGUgYW4gc3NyYyBub3csIHRvIGJlIHVzZWQgbGF0ZXIgaW4gcnRwU2VuZGVyLnNlbmQKICAgICAgICB2YXIgc2VuZFNzcmMgPSAoMiAqIHNkcE1MaW5lSW5kZXggKyAxKSAqIDEwMDE7CiAgICAgICAgaWYgKHRyYWNrKSB7CiAgICAgICAgICBydHBTZW5kZXIgPSBuZXcgUlRDUnRwU2VuZGVyKHRyYWNrLCB0cmFuc3BvcnRzLmR0bHNUcmFuc3BvcnQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1saW5lLndhbnRSZWNlaXZlKSB7CiAgICAgICAgICBydHBSZWNlaXZlciA9IG5ldyBSVENSdHBSZWNlaXZlcih0cmFuc3BvcnRzLmR0bHNUcmFuc3BvcnQsIGtpbmQpOwogICAgICAgIH0KCiAgICAgICAgdHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdID0gewogICAgICAgICAgaWNlR2F0aGVyZXI6IHRyYW5zcG9ydHMuaWNlR2F0aGVyZXIsCiAgICAgICAgICBpY2VUcmFuc3BvcnQ6IHRyYW5zcG9ydHMuaWNlVHJhbnNwb3J0LAogICAgICAgICAgZHRsc1RyYW5zcG9ydDogdHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0LAogICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXM6IGxvY2FsQ2FwYWJpbGl0aWVzLAogICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzOiBudWxsLAogICAgICAgICAgcnRwU2VuZGVyOiBydHBTZW5kZXIsCiAgICAgICAgICBydHBSZWNlaXZlcjogcnRwUmVjZWl2ZXIsCiAgICAgICAgICBraW5kOiBraW5kLAogICAgICAgICAgbWlkOiBtaWQsCiAgICAgICAgICBzZW5kU3NyYzogc2VuZFNzcmMsCiAgICAgICAgICByZWN2U3NyYzogbnVsbAogICAgICAgIH07CiAgICAgICAgdmFyIHRyYW5zY2VpdmVyID0gdHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdOwogICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwKICAgICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsICdvZmZlcicsIHNlbGYubG9jYWxTdHJlYW1zWzBdKTsKICAgICAgfSk7CgogICAgICB0aGlzLl9wZW5kaW5nT2ZmZXIgPSB0cmFuc2NlaXZlcnM7CiAgICAgIHZhciBkZXNjID0gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7CiAgICAgICAgdHlwZTogJ29mZmVyJywKICAgICAgICBzZHA6IHNkcAogICAgICB9KTsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1swXSwgMCwgZGVzYyk7CiAgICAgIH0KICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTsKICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgYW5zd2VyT3B0aW9uczsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGFuc3dlck9wdGlvbnMgPSBhcmd1bWVudHNbMF07CiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykgewogICAgICAgIGFuc3dlck9wdGlvbnMgPSBhcmd1bWVudHNbMl07CiAgICAgIH0KCiAgICAgIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSgpOwogICAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7CiAgICAgICAgLy8gQ2FsY3VsYXRlIGludGVyc2VjdGlvbiBvZiBjYXBhYmlsaXRpZXMuCiAgICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IHNlbGYuX2dldENvbW1vbkNhcGFiaWxpdGllcygKICAgICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyk7CgogICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgY29tbW9uQ2FwYWJpbGl0aWVzLAogICAgICAgICAgICAnYW5zd2VyJywgc2VsZi5sb2NhbFN0cmVhbXNbMF0pOwogICAgICB9KTsKCiAgICAgIHZhciBkZXNjID0gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7CiAgICAgICAgdHlwZTogJ2Fuc3dlcicsCiAgICAgICAgc2RwOiBzZHAKICAgICAgfSk7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMF0sIDAsIGRlc2MpOwogICAgICB9CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVzYyk7CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7CiAgICAgIHZhciBtTGluZUluZGV4ID0gY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXg7CiAgICAgIGlmIChjYW5kaWRhdGUuc2RwTWlkKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYW5zY2VpdmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHRoaXMudHJhbnNjZWl2ZXJzW2ldLm1pZCA9PT0gY2FuZGlkYXRlLnNkcE1pZCkgewogICAgICAgICAgICBtTGluZUluZGV4ID0gaTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHZhciB0cmFuc2NlaXZlciA9IHRoaXMudHJhbnNjZWl2ZXJzW21MaW5lSW5kZXhdOwogICAgICBpZiAodHJhbnNjZWl2ZXIpIHsKICAgICAgICB2YXIgY2FuZCA9IE9iamVjdC5rZXlzKGNhbmRpZGF0ZS5jYW5kaWRhdGUpLmxlbmd0aCA+IDAgPwogICAgICAgICAgICBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShjYW5kaWRhdGUuY2FuZGlkYXRlKSA6IHt9OwogICAgICAgIC8vIElnbm9yZSBDaHJvbWUncyBpbnZhbGlkIGNhbmRpZGF0ZXMgc2luY2UgRWRnZSBkb2VzIG5vdCBsaWtlIHRoZW0uCiAgICAgICAgaWYgKGNhbmQucHJvdG9jb2wgPT09ICd0Y3AnICYmIGNhbmQucG9ydCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBJZ25vcmUgUlRDUCBjYW5kaWRhdGVzLCB3ZSBhc3N1bWUgUlRDUC1NVVguCiAgICAgICAgaWYgKGNhbmQuY29tcG9uZW50ICE9PSAnMScpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgLy8gQSBkaXJ0eSBoYWNrIHRvIG1ha2Ugc2FtcGxlcyB3b3JrLgogICAgICAgIGlmIChjYW5kLnR5cGUgPT09ICdlbmRPZkNhbmRpZGF0ZXMnKSB7CiAgICAgICAgICBjYW5kID0ge307CiAgICAgICAgfQogICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoY2FuZCk7CiAgICAgIH0KICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMV0sIDApOwogICAgICB9CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgcHJvbWlzZXMgPSBbXTsKICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgIFsncnRwU2VuZGVyJywgJ3J0cFJlY2VpdmVyJywgJ2ljZUdhdGhlcmVyJywgJ2ljZVRyYW5zcG9ydCcsCiAgICAgICAgICAgICdkdGxzVHJhbnNwb3J0J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgICAgICAgIGlmICh0cmFuc2NlaXZlclttZXRob2RdKSB7CiAgICAgICAgICAgIHByb21pc2VzLnB1c2godHJhbnNjZWl2ZXJbbWV0aG9kXS5nZXRTdGF0cygpKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicgJiYKICAgICAgICAgIGFyZ3VtZW50c1sxXTsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHsKICAgICAgICB2YXIgcmVzdWx0cyA9IHt9OwogICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgcmVzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbihpZCkgewogICAgICAgICAgICAgIHJlc3VsdHNbaWRdID0gcmVzdWx0W2lkXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGlmIChjYikgewogICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjYiwgMCwgcmVzdWx0cyk7CiAgICAgICAgICB9CiAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH07CiAgfQp9IGVsc2UgewogIHdlYnJ0Y1V0aWxzLmxvZygnQnJvd3NlciBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgV2ViUlRDLWNhcGFibGUnKTsKfQoKLy8gUG9seWZpbGwgb250cmFjayBvbiBicm93c2VycyB0aGF0IGRvbid0IHlldCBoYXZlIGl0CmlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiYgISgnb250cmFjaycgaW4KICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdvbnRyYWNrJywgewogICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX29udHJhY2s7IH0sCiAgICBzZXQ6IGZ1bmN0aW9uKGYpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBpZiAodGhpcy5fb250cmFjaykgewogICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrKTsKICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIHRoaXMuX29udHJhY2twb2x5KTsKICAgICAgfQogICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb250cmFjayA9IGYpOwogICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIHRoaXMuX29udHJhY2twb2x5ID0gZnVuY3Rpb24oZSkgewogICAgICAgIGlmICh3ZWJydGNEZXRlY3RlZEJyb3dzZXIgPT09ICdjaHJvbWUnKSB7CiAgICAgICAgICAvLyBvbmFkZHN0cmVhbSBkb2VzIG5vdCBmaXJlIHdoZW4gYSB0cmFjayBpcyBhZGRlZCB0byBhbiBleGlzdGluZyBzdHJlYW0uCiAgICAgICAgICAvLyBidXQgc3RyZWFtLm9uYWRkdHJhY2sgaXMgaW1wbGVtZW50ZWQgc28gd2UgdXNlIHRo44GfdAogICAgICAgICAgZS5zdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcignYWRkdHJhY2snLCBmdW5jdGlvbih0ZSkgewogICAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7CiAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdGUudHJhY2s7CiAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0ge3RyYWNrOiB0ZS50cmFja307CiAgICAgICAgICAgIGV2ZW50LnN0cmVhbXMgPSBbZS5zdHJlYW1dOwogICAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGUuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHsKICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgndHJhY2snKTsKICAgICAgICAgIGV2ZW50LnRyYWNrID0gdHJhY2s7CiAgICAgICAgICBldmVudC5yZWNlaXZlciA9IHt0cmFjazogdHJhY2t9OwogICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07CiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgIH0uYmluZCh0aGlzKSk7CiAgICB9CiAgfSk7Cn0KCi8vIFJldHVybnMgdGhlIHJlc3VsdCBvZiBnZXRVc2VyTWVkaWEgYXMgYSBQcm9taXNlLgpmdW5jdGlvbiByZXF1ZXN0VXNlck1lZGlhKGNvbnN0cmFpbnRzKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzLCByZXNvbHZlLCByZWplY3QpOwogIH0pOwp9Cgp2YXIgd2VicnRjVGVzdGluZyA9IHt9Owp0cnkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3ZWJydGNUZXN0aW5nLCAndmVyc2lvbicsIHsKICAgIHNldDogZnVuY3Rpb24odmVyc2lvbikgewogICAgICB3ZWJydGNEZXRlY3RlZFZlcnNpb24gPSB2ZXJzaW9uOwogICAgfQogIH0pOwp9IGNhdGNoIChlKSB7fQoKaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7CiAgdmFyIFJUQ1BlZXJDb25uZWN0aW9uOwogIHZhciBSVENJY2VDYW5kaWRhdGU7CiAgdmFyIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbjsKICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIFJUQ1BlZXJDb25uZWN0aW9uID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uOwogICAgUlRDSWNlQ2FuZGlkYXRlID0gd2luZG93LlJUQ0ljZUNhbmRpZGF0ZTsKICAgIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiA9IHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb247CiAgfQogIG1vZHVsZS5leHBvcnRzID0gewogICAgUlRDUGVlckNvbm5lY3Rpb246IFJUQ1BlZXJDb25uZWN0aW9uLAogICAgUlRDSWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUsCiAgICBSVENTZXNzaW9uRGVzY3JpcHRpb246IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiwKICAgIGdldFVzZXJNZWRpYTogZ2V0VXNlck1lZGlhLAogICAgYXR0YWNoTWVkaWFTdHJlYW06IGF0dGFjaE1lZGlhU3RyZWFtLAogICAgcmVhdHRhY2hNZWRpYVN0cmVhbTogcmVhdHRhY2hNZWRpYVN0cmVhbSwKICAgIHdlYnJ0Y0RldGVjdGVkQnJvd3Nlcjogd2VicnRjRGV0ZWN0ZWRCcm93c2VyLAogICAgd2VicnRjRGV0ZWN0ZWRWZXJzaW9uOiB3ZWJydGNEZXRlY3RlZFZlcnNpb24sCiAgICB3ZWJydGNNaW5pbXVtVmVyc2lvbjogd2VicnRjTWluaW11bVZlcnNpb24sCiAgICB3ZWJydGNUZXN0aW5nOiB3ZWJydGNUZXN0aW5nLAogICAgd2VicnRjVXRpbHM6IHdlYnJ0Y1V0aWxzCiAgICAvL3JlcXVlc3RVc2VyTWVkaWE6IG5vdCBleHBvc2VkIG9uIHB1cnBvc2UuCiAgICAvL3RyYWNlOiBub3QgZXhwb3NlZCBvbiBwdXJwb3NlLgogIH07Cn0gZWxzZSBpZiAoKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSAmJiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJykpIHsKICAvLyBFeHBvc2Ugb2JqZWN0cyBhbmQgZnVuY3Rpb25zIHdoZW4gUmVxdWlyZUpTIGlzIGRvaW5nIHRoZSBsb2FkaW5nLgogIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBSVENQZWVyQ29ubmVjdGlvbjogd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLAogICAgICBSVENJY2VDYW5kaWRhdGU6IHdpbmRvdy5SVENJY2VDYW5kaWRhdGUsCiAgICAgIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbjogd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiwKICAgICAgZ2V0VXNlck1lZGlhOiBnZXRVc2VyTWVkaWEsCiAgICAgIGF0dGFjaE1lZGlhU3RyZWFtOiBhdHRhY2hNZWRpYVN0cmVhbSwKICAgICAgcmVhdHRhY2hNZWRpYVN0cmVhbTogcmVhdHRhY2hNZWRpYVN0cmVhbSwKICAgICAgd2VicnRjRGV0ZWN0ZWRCcm93c2VyOiB3ZWJydGNEZXRlY3RlZEJyb3dzZXIsCiAgICAgIHdlYnJ0Y0RldGVjdGVkVmVyc2lvbjogd2VicnRjRGV0ZWN0ZWRWZXJzaW9uLAogICAgICB3ZWJydGNNaW5pbXVtVmVyc2lvbjogd2VicnRjTWluaW11bVZlcnNpb24sCiAgICAgIHdlYnJ0Y1Rlc3Rpbmc6IHdlYnJ0Y1Rlc3RpbmcsCiAgICAgIHdlYnJ0Y1V0aWxzOiB3ZWJydGNVdGlscwogICAgICAvL3JlcXVlc3RVc2VyTWVkaWE6IG5vdCBleHBvc2VkIG9uIHB1cnBvc2UuCiAgICAgIC8vdHJhY2U6IG5vdCBleHBvc2VkIG9uIHB1cnBvc2UuCiAgICB9OwogIH0pOwp9Cgp9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7CgpyZXF1aXJlKCd3ZWJydGMtYWRhcHRlci10ZXN0Jyk7Cgp2YXIgX0V2ZW50RW1pdHRlcjIgPSByZXF1aXJlKCcuLi91dGlscy9FdmVudEVtaXR0ZXInKTsKCnZhciBfRXZlbnRFbWl0dGVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0V2ZW50RW1pdHRlcjIpOwoKdmFyIF9jb25uZWN0aW9uID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uJyk7Cgp2YXIgX2Nvbm5lY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29ubmVjdGlvbik7Cgp2YXIgX3BlZXIgPSByZXF1aXJlKCcuL3BlZXInKTsKCnZhciBfcGVlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wZWVyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikgPyBjYWxsIDogc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgovKiBqc2hpbnQgdW5kZWY6IHRydWUgKi8KLyogZ2xvYmFscyBSVENQZWVyQ29ubmVjdGlvbiAqLwovKiBnbG9iYWxzIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiAqLwovKiBnbG9iYWxzIFJUQ0ljZUNhbmRpZGF0ZSAqLwoKdmFyIENvbm5lY3Rpb25Db250cm9sbGVyID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHsKICBfaW5oZXJpdHMoQ29ubmVjdGlvbkNvbnRyb2xsZXIsIF9FdmVudEVtaXR0ZXIpOwoKICBmdW5jdGlvbiBDb25uZWN0aW9uQ29udHJvbGxlcihzeW5jaGVyLCBkb21haW4sIGNvbmZpZ3VyYXRpb24pIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0aW9uQ29udHJvbGxlcik7CgogICAgaWYgKCFzeW5jaGVyKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzeW5jaGVyIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwogICAgaWYgKCFkb21haW4pIHRocm93IG5ldyBFcnJvcignVGhlIGRvbWFpbiBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKICAgIGlmICghY29uZmlndXJhdGlvbikgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29uZmlndXJhdGlvbiBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKCiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbm5lY3Rpb25Db250cm9sbGVyKS5jYWxsKHRoaXMpKTsKCiAgICB2YXIgX3RoaXMgPSBfdGhpczI7CgogICAgX3RoaXMuc3luY2hlciA9IHN5bmNoZXI7CiAgICBfdGhpcy5tb2RlID0gJ29mZmVyJzsKCiAgICBfdGhpcy5fb2JqZWN0RGVzY1VSTCA9ICdoeXBlcnR5LWNhdGFsb2d1ZTovLycgKyBkb21haW4gKyAnLy53ZWxsLWtub3duL2RhdGFzY2hlbWFzL0Zha2VEYXRhU2NoZW1hJzsKCiAgICBjb25zb2xlLmluZm8oY29uZmlndXJhdGlvbik7CiAgICBjb25zb2xlLmluZm8oY29uZmlndXJhdGlvbik7CgogICAgX3RoaXMubWVkaWFDb25zdHJhaW50cyA9IGNvbmZpZ3VyYXRpb24ubWVkaWFDb25zdHJhaW50czsKICAgIF90aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uLndlYnJ0YzsKCiAgICAvLyBQcmVwYXJlIHRoZSBQZWVyQ29ubmVjdGlvbgogICAgdmFyIHBlZXJDb25uZWN0aW9uID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKF90aGlzLmNvbmZpZ3VyYXRpb24pOwoKICAgIHBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3NpZ25hbGluZ3N0YXRlY2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7CgogICAgICBjb25zb2xlLmluZm8oJ3NpZ25hbGluZ3N0YXRlY2hhbmdlJywgZXZlbnQuY3VycmVudFRhcmdldC5zaWduYWxpbmdTdGF0ZSk7CgogICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5zaWduYWxpbmdTdGF0ZSA9PT0gJ2hhdmUtbG9jYWwtb2ZmZXInKSB7CiAgICAgICAgX3RoaXMudHJpZ2dlcignY29udHJvbGxlcjpzdGF0ZTpjaGFuZ2UnLCBfdGhpcy5tb2RlKTsKICAgICAgfQoKICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuc2lnbmFsaW5nU3RhdGUgPT09ICdoYXZlLXJlbW90ZS1vZmZlcicpIHsKICAgICAgICBfdGhpcy5tb2RlID0gJ2Fuc3dlcic7CiAgICAgICAgX3RoaXMudHJpZ2dlcignY29udHJvbGxlcjpzdGF0ZTpjaGFuZ2UnLCBfdGhpcy5tb2RlKTsKICAgICAgfQogICAgfSk7CgogICAgcGVlckNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGNvbnNvbGUuaW5mbygnaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgZXZlbnQuY3VycmVudFRhcmdldC5pY2VDb25uZWN0aW9uU3RhdGUpOwogICAgICB2YXIgZGF0YSA9IF90aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIuZGF0YTsKICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2Nvbm5lY3Rpb24nKSkgewogICAgICAgIGRhdGEuY29ubmVjdGlvbi5zdGF0dXMgPSBldmVudC5jdXJyZW50VGFyZ2V0LmljZUNvbm5lY3Rpb25TdGF0ZTsKICAgICAgfQogICAgfSk7CgogICAgcGVlckNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignaWNlY2FuZGlkYXRlJywgZnVuY3Rpb24gKGV2ZW50KSB7CgogICAgICBpZiAoIWV2ZW50LmNhbmRpZGF0ZSkgcmV0dXJuOwoKICAgICAgdmFyIGljZWNhbmRpZGF0ZSA9IHsKICAgICAgICB0eXBlOiAnY2FuZGlkYXRlJywKICAgICAgICBjYW5kaWRhdGU6IGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUsCiAgICAgICAgc2RwTWlkOiBldmVudC5jYW5kaWRhdGUuc2RwTWlkLAogICAgICAgIHNkcE1MaW5lSW5kZXg6IGV2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4CiAgICAgIH07CgogICAgICB2YXIgZGF0YSA9IF90aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIuZGF0YTsKCiAgICAgIGlmIChfdGhpcy5tb2RlID09PSAnb2ZmZXInKSB7CiAgICAgICAgZGF0YS5jb25uZWN0aW9uLm93bmVyUGVlci5pY2VDYW5kaWRhdGVzLnB1c2goaWNlY2FuZGlkYXRlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkYXRhLnBlZXIuaWNlQ2FuZGlkYXRlcy5wdXNoKGljZWNhbmRpZGF0ZSk7CiAgICAgIH0KICAgIH0pOwoKICAgIC8vIEFkZCBzdHJlYW0gdG8gUGVlckNvbm5lY3Rpb24KICAgIHBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHN0cmVhbScsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBjb25zb2xlLmluZm8oJ0FkZCBTdHJlYW06ICcsIGV2ZW50KTsKICAgICAgX3RoaXMudHJpZ2dlcignc3RyZWFtOmFkZGVkJywgZXZlbnQpOwogICAgfSk7CgogICAgX3RoaXMucGVlckNvbm5lY3Rpb24gPSBwZWVyQ29ubmVjdGlvbjsKCiAgICByZXR1cm4gX3RoaXMyOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENvbm5lY3Rpb25Db250cm9sbGVyLCBbewogICAga2V5OiAnY2hhbmdlUGVlckluZm9ybWF0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VQZWVySW5mb3JtYXRpb24oZGF0YU9iamVjdE9ic2VydmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhID0gZGF0YU9iamVjdE9ic2VydmVyLmRhdGE7CiAgICAgIHZhciBpc093bmVyID0gZGF0YS5oYXNPd25Qcm9wZXJ0eSgnY29ubmVjdGlvbicpOwoKICAgICAgdmFyIHBlZXJEYXRhID0gaXNPd25lciA/IGRhdGEuY29ubmVjdGlvbi5vd25lclBlZXIgOiBkYXRhLnBlZXI7CgogICAgICBjb25zb2xlLmluZm8oJ1BlZXIgRGF0YTonLCBKU09OLnN0cmluZ2lmeShwZWVyRGF0YSkpOwoKICAgICAgaWYgKHBlZXJEYXRhLmhhc093blByb3BlcnR5KCdjb25uZWN0aW9uRGVzY3JpcHRpb24nKSkgewogICAgICAgIF90aGlzLnByb2Nlc3NQZWVySW5mb3JtYXRpb24ocGVlckRhdGEuY29ubmVjdGlvbkRlc2NyaXB0aW9uKTsKICAgICAgfQoKICAgICAgaWYgKHBlZXJEYXRhLmhhc093blByb3BlcnR5KCdpY2VDYW5kaWRhdGVzJykpIHsKICAgICAgICBwZWVyRGF0YS5pY2VDYW5kaWRhdGVzLmZvckVhY2goZnVuY3Rpb24gKGljZSkgewogICAgICAgICAgX3RoaXMucHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihpY2UpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBkYXRhT2JqZWN0T2JzZXJ2ZXIub25DaGFuZ2UoJyonLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBjb25zb2xlLmluZm8oJ09ic2VydmVyIG9uIGNoYW5nZSBtZXNzYWdlOiAnLCBldmVudCk7CiAgICAgICAgX3RoaXMucHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihldmVudC5kYXRhKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncHJvY2Vzc1BlZXJJbmZvcm1hdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmluZm8oSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwoKICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ29mZmVyJyB8fCBkYXRhLnR5cGUgPT09ICdhbnN3ZXInKSB7CiAgICAgICAgY29uc29sZS5pbmZvKCdQcm9jZXNzIENvbm5lY3Rpb24gRGVzY3JpcHRpb246ICcsIGRhdGEuc2RwKTsKICAgICAgICBfdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGRhdGEpLCBfdGhpcy5yZW1vdGVEZXNjcmlwdGlvblN1Y2Nlc3MsIF90aGlzLnJlbW90ZURlc2NyaXB0aW9uRXJyb3IpOwogICAgICB9CgogICAgICBpZiAoZGF0YS50eXBlID09PSAnY2FuZGlkYXRlJykgewogICAgICAgIGNvbnNvbGUuaW5mbygnUHJvY2VzcyBJY2UgQ2FuZGlkYXRlOiAnLCBkYXRhKTsKICAgICAgICBfdGhpcy5wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUobmV3IFJUQ0ljZUNhbmRpZGF0ZSh7IGNhbmRpZGF0ZTogZGF0YS5jYW5kaWRhdGUgfSksIF90aGlzLnJlbW90ZURlc2NyaXB0aW9uU3VjY2VzcywgX3RoaXMucmVtb3RlRGVzY3JpcHRpb25FcnJvcik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZW1vdGVEZXNjcmlwdGlvblN1Y2Nlc3MnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW90ZURlc2NyaXB0aW9uU3VjY2VzcygpIHsKICAgICAgY29uc29sZS5pbmZvKCdyZW1vdGUgc3VjY2VzcycpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3JlbW90ZURlc2NyaXB0aW9uRXJyb3InLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW90ZURlc2NyaXB0aW9uRXJyb3IoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcignZXJyb3I6ICcsIGVycm9yKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjcmVhdGVPZmZlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlT2ZmZXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5wZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcihmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHsKICAgICAgICBfdGhpcy5vbkxvY2FsU2Vzc2lvbkNyZWF0ZWQoZGVzY3JpcHRpb24pOwogICAgICB9LCBfdGhpcy5pbmZvRXJyb3IsIF90aGlzLm1lZGlhQ29uc3RyYWludHMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NyZWF0ZUFuc3dlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQW5zd2VyKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMucGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKGZ1bmN0aW9uIChkZXNjcmlwdGlvbikgewogICAgICAgIF90aGlzLm9uTG9jYWxTZXNzaW9uQ3JlYXRlZChkZXNjcmlwdGlvbik7CiAgICAgIH0sIF90aGlzLmluZm9FcnJvcik7CiAgICB9CiAgfSwgewogICAga2V5OiAnb25Mb2NhbFNlc3Npb25DcmVhdGVkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkxvY2FsU2Vzc2lvbkNyZWF0ZWQoZGVzY3JpcHRpb24pIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uLCBmdW5jdGlvbiAoKSB7CgogICAgICAgIHZhciBkYXRhID0gX3RoaXMuX2RhdGFPYmplY3RSZXBvcnRlci5kYXRhOwogICAgICAgIHZhciBzZHBDb25uZWN0aW9uID0gewogICAgICAgICAgc2RwOiBkZXNjcmlwdGlvbi5zZHAsCiAgICAgICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlCiAgICAgICAgfTsKCiAgICAgICAgaWYgKF90aGlzLm1vZGUgPT09ICdvZmZlcicpIHsKICAgICAgICAgIGRhdGEuY29ubmVjdGlvbi5vd25lclBlZXIuY29ubmVjdGlvbkRlc2NyaXB0aW9uID0gc2RwQ29ubmVjdGlvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGF0YS5wZWVyLmNvbm5lY3Rpb25EZXNjcmlwdGlvbiA9IHNkcENvbm5lY3Rpb247CiAgICAgICAgfQogICAgICB9LCBfdGhpcy5pbmZvRXJyb3IpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2luZm9FcnJvcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mb0Vycm9yKGVycikgewogICAgICBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpLCBlcnIpOwogICAgfQoKICAgIC8qKg0KICAgICAqIFVzZWQgdG8gYWNjZXB0IGFuIGluY29taW5nIGNvbm5lY3Rpb24gcmVxdWVzdC4NCiAgICAgKiBAbWV0aG9kIGFjY2VwdA0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FjY2VwdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWNjZXB0KHN0cmVhbSkgewogICAgICAvLyBUT0RPOiBQYXNzIGFyZ3VtZW50IG9wdGlvbnMgYXMgYSBzdHJlYW0sIGJlY2F1c2UgaXMgc3BlY2lmaWMgb2YgaW1wbGVtZW50YXRpb247CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgc3luY2hlciA9IF90aGlzLnN5bmNoZXI7CgogICAgICBjb25zb2xlLmxvZygnUmVtb3RlIFBlZXIgSW5mb3JtYXRpb246ICcsIF90aGlzLl9yZW1vdGVQZWVySW5mb3JtYXRpb24pOwogICAgICB2YXIgcmVtb3RlUGVlciA9IF90aGlzLl9yZW1vdGVQZWVySW5mb3JtYXRpb24uZnJvbTsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHRyeSB7CgogICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU3luY2hlciBDcmVhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcbicpOwogICAgICAgICAgc3luY2hlci5jcmVhdGUoX3RoaXMuX29iamVjdERlc2NVUkwsIFtyZW1vdGVQZWVyXSwge30pLnRoZW4oZnVuY3Rpb24gKGRhdGFPYmplY3RSZXBvcnRlcikgewogICAgICAgICAgICBjb25zb2xlLmluZm8oJzIuIFJldHVybiB0aGUgRGF0YSBPYmplY3QgUmVwb3J0ZXIgJywgZGF0YU9iamVjdFJlcG9ydGVyKTsKCiAgICAgICAgICAgIF90aGlzLnN0cmVhbSA9IHN0cmVhbTsKICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdFJlcG9ydGVyID0gZGF0YU9iamVjdFJlcG9ydGVyOwogICAgICAgICAgICByZXNvbHZlKCdhY2NlcHRlZCcpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJlamVjdCgnZXJyb3IgYWNjZXB0aW5nIGNvbm5lY3Rpb24nKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogVXNlZCB0byBkZWNsaW5lIGFuIGluY29taW5nIGNvbm5lY3Rpb24gcmVxdWVzdC4NCiAgICAqIEBtZXRob2QgZGVjbGluZQ0KICAgICogQHJldHVybiB7UHJvbWlzZX0NCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWNsaW5lJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNsaW5lKCkgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHN5bmNoZXIgPSBfdGhpcy5zeW5jaGVyOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdzeW5jaGVyOiAnLCBzeW5jaGVyKTsKICAgICAgICAgIHJlc29sdmUoJ0RlY2xpbmVkJyk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgICogVXNlZCB0byBjbG9zZSBhbiBleGlzdGluZyBjb25uZWN0aW9uIGluc3RhbmNlLg0KICAgICAqIEBtZXRob2QgZGlzY29ubmVjdA0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2Nvbm5lY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7CgogICAgICAvLyBUT0RPOiBvcHRpbWl6ZSB0aGUgZGlzY29ubmVjdCBmdW5jdGlvbgoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHRyeSB7CgogICAgICAgICAgX3RoaXMucGVlckNvbm5lY3Rpb24uY2xvc2UoKTsKCiAgICAgICAgICByZXNvbHZlKHRydWUpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJlamVjdCgnZXJyb3IgZGlzY29ubmVjdGluZyBjb25uZWN0aW9uJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBVc2VkIHRvIGFkZC9pbnZpdGUgbmV3IHBlZXJzIG9uIGFuIGV4aXN0aW5nIGNvbm5lY3Rpb24gaW5zdGFuY2UgKGZvciBtdWx0aXBhcnR5IGNvbm5lY3Rpb25zKS4NCiAgICAgKiBAbWV0aG9kIGFkZFBlZXINCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRQZWVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQZWVyKCkge30KCiAgICAvKioNCiAgICAgKiBVc2VkIHRvIHJlbW92ZSBhIHBlZXIgZnJvbSBhbiBleGlzdGluZyBjb25uZWN0aW9uIGluc3RhbmNlLg0KICAgICAqIEBtZXRob2QgcmVtb3ZlUGVlcg0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9DQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZVBlZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVBlZXIoKSB7fQoKICAgIC8vIFBlZXIgQWN0aW9ucwoKICB9LCB7CiAgICBrZXk6ICdkaXNhYmxlTWljJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlTWljKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBsb2NhbFN0cmVhbSA9IF90aGlzLnBlZXJDb25uZWN0aW9uLmdldExvY2FsU3RyZWFtcygpWzBdOwogICAgICAgICAgdmFyIGF1ZGlvVHJhY2sgPSBsb2NhbFN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdOwoKICAgICAgICAgIGF1ZGlvVHJhY2suZW5hYmxlZCA9IGF1ZGlvVHJhY2suZW5hYmxlZCA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICAgIHJlc29sdmUoYXVkaW9UcmFjay5lbmFibGVkKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkaXNhYmxlQ2FtJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlQ2FtKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBsb2NhbFN0cmVhbSA9IF90aGlzLnBlZXJDb25uZWN0aW9uLmdldExvY2FsU3RyZWFtcygpWzBdOwogICAgICAgICAgdmFyIHZpZGVvVHJhY2sgPSBsb2NhbFN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdOwoKICAgICAgICAgIHZpZGVvVHJhY2suZW5hYmxlZCA9IHZpZGVvVHJhY2suZW5hYmxlZCA/IGZhbHNlIDogdHJ1ZTsKCiAgICAgICAgICByZXNvbHZlKHZpZGVvVHJhY2suZW5hYmxlZCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnbXV0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gbXV0ZSgpIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIHJlbW90ZVN0cmVhbSA9IF90aGlzLnBlZXJDb25uZWN0aW9uLmdldFJlbW90ZVN0cmVhbXMoKVswXTsKICAgICAgICAgIHZhciBhdWRpb1RyYWNrID0gcmVtb3RlU3RyZWFtLmdldEF1ZGlvVHJhY2tzKClbMF07CgogICAgICAgICAgYXVkaW9UcmFjay5lbmFibGVkID0gYXVkaW9UcmFjay5lbmFibGVkID8gZmFsc2UgOiB0cnVlOwoKICAgICAgICAgIHJlc29sdmUoYXVkaW9UcmFjay5lbmFibGVkKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzdHJlYW0nLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobWVkaWFTdHJlYW0pIHsKICAgICAgaWYgKCFtZWRpYVN0cmVhbSkgdGhyb3cgbmV3IEVycm9yKCdUaGUgbWVkaWFTdHJlYW0gaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBjb25zb2xlLmluZm8oJ3NldCBzdHJlYW06ICcsIG1lZGlhU3RyZWFtKTsKICAgICAgX3RoaXMucGVlckNvbm5lY3Rpb24uYWRkU3RyZWFtKG1lZGlhU3RyZWFtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRMb2NhbFN0cmVhbXMnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5wZWVyQ29ubmVjdGlvbi5nZXRMb2NhbFN0cmVhbXMoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRSZW1vdGVTdHJlYW1zJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMucGVlckNvbm5lY3Rpb24uZ2V0UmVtb3RlU3RyZWFtcygpOwogICAgfQoKICAgIC8qKg0KICAgICAqIFNldCBSZW1vdGUgcGVlciBpbmZvcm1hdGlvbiwgbGlrZSBIeXBlcnR5Lg0KICAgICAqIEBwYXJhbSAge09iamVjdH0gcmVtb3RlUGVlckluZm9ybWF0aW9uIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwZWVyOw0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZW1vdGVQZWVySW5mb3JtYXRpb24nLAogICAgc2V0OiBmdW5jdGlvbiBzZXQocmVtb3RlUGVlckluZm9ybWF0aW9uKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9yZW1vdGVQZWVySW5mb3JtYXRpb24gPSByZW1vdGVQZWVySW5mb3JtYXRpb247CiAgICB9CgogICAgLyoqDQogICAgICogR2V0IGluZm9ybWF0aW9uIHJlbGF0aXZlIHRvIHRoZSBSZW1vdGUgUGVlcjsNCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHJlbW90ZVBlZXJJbmZvcm1hdGlvbjsNCiAgICAgKi8KICAgICwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX3JlbW90ZVBlZXJJbmZvcm1hdGlvbjsKICAgIH0KCiAgICAvKioNCiAgICAqIFNldCB0aGUgZGF0YU9iamVjdCBpbiB0aGUgY29udHJvbGxlcg0KICAgICogQHBhcmFtIHtDb25uZWN0aW9uRGF0YU9iamVjdH0gZGF0YU9iamVjdCAtIGhhdmUgYWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzeW5jaGVyIG9iamVjdDsNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkYXRhT2JqZWN0UmVwb3J0ZXInLAogICAgc2V0OiBmdW5jdGlvbiBzZXQoZGF0YU9iamVjdFJlcG9ydGVyKSB7CiAgICAgIGlmICghZGF0YU9iamVjdFJlcG9ydGVyKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBEYXRhIE9iamVjdCBSZXBvcnRlciBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIgPSBkYXRhT2JqZWN0UmVwb3J0ZXI7CgogICAgICB2YXIgZGF0YSA9IF90aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIuZGF0YTsKCiAgICAgIGRhdGFPYmplY3RSZXBvcnRlci5vblN1YnNjcmlwdGlvbihmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBldmVudC5hY2NlcHQoKTsKICAgICAgfSk7CgogICAgICBpZiAoX3RoaXMubW9kZSA9PT0gJ29mZmVyJykgewogICAgICAgIGRhdGEuY29ubmVjdGlvbiA9IF9jb25uZWN0aW9uMi5kZWZhdWx0OwoKICAgICAgICBfdGhpcy5jcmVhdGVPZmZlcigpOwogICAgICB9IGVsc2UgewogICAgICAgIGRhdGEucGVlciA9IF9wZWVyMi5kZWZhdWx0OwoKICAgICAgICBfdGhpcy5jcmVhdGVBbnN3ZXIoKTsKICAgICAgfQoKICAgICAgY29uc29sZS5kZWJ1ZyhfdGhpcy5fZGF0YU9iamVjdFJlcG9ydGVyKTsKICAgIH0KCiAgICAvKioNCiAgICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbiB0aGUgY29udHJvbGxlcg0KICAgICogQHJldHVybiB7Q29ubmVjdGlvbkRhdGFPYmplY3R9IGRhdGFPYmplY3QNCiAgICAqLwogICAgLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fZGF0YU9iamVjdFJlcG9ydGVyOwogICAgfQoKICAgIC8qKg0KICAgICogU2V0IHRoZSBkYXRhT2JqZWN0IGluIHRoZSBjb250cm9sbGVyDQogICAgKiBAcGFyYW0ge0Nvbm5lY3Rpb25EYXRhT2JqZWN0fSBkYXRhT2JqZWN0IC0gaGF2ZSBhbGwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5bmNoZXIgb2JqZWN0Ow0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2RhdGFPYmplY3RPYnNlcnZlcicsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChkYXRhT2JqZWN0T2JzZXJ2ZXIpIHsKICAgICAgaWYgKCFkYXRhT2JqZWN0T2JzZXJ2ZXIpIHRocm93IG5ldyBFcnJvcignVGhlIERhdGEgT2JqZWN0IE9ic2VydmVyIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuX2RhdGFPYmplY3RPYnNlcnZlciA9IGRhdGFPYmplY3RPYnNlcnZlcjsKICAgICAgX3RoaXMuY2hhbmdlUGVlckluZm9ybWF0aW9uKGRhdGFPYmplY3RPYnNlcnZlcik7CiAgICB9CgogICAgLyoqDQogICAgKiByZXR1cm4gdGhlIGRhdGFPYmplY3QgaW4gdGhlIGNvbnRyb2xsZXINCiAgICAqIEByZXR1cm4ge0Nvbm5lY3Rpb25EYXRhT2JqZWN0fSBkYXRhT2JqZWN0DQogICAgKi8KICAgICwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2RhdGFPYmplY3RPYnNlcnZlcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBDb25uZWN0aW9uQ29udHJvbGxlcjsKfShfRXZlbnRFbWl0dGVyMy5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IENvbm5lY3Rpb25Db250cm9sbGVyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy9FdmVudEVtaXR0ZXIiOjgsIi4vY29ubmVjdGlvbiI6NiwiLi9wZWVyIjo3LCJ3ZWJydGMtYWRhcHRlci10ZXN0IjozfV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZhdGU7Cgp2YXIgX0h5cGVydHlEaXNjb3ZlcnkgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L0h5cGVydHlEaXNjb3ZlcnknKTsKCnZhciBfSHlwZXJ0eURpc2NvdmVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IeXBlcnR5RGlzY292ZXJ5KTsKCnZhciBfU3luY2hlciA9IHJlcXVpcmUoJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvU3luY2hlcicpOwoKdmFyIF9FdmVudEVtaXR0ZXIyID0gcmVxdWlyZSgnLi4vdXRpbHMvRXZlbnRFbWl0dGVyJyk7Cgp2YXIgX0V2ZW50RW1pdHRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudEVtaXR0ZXIyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9Db25uZWN0aW9uQ29udHJvbGxlciA9IHJlcXVpcmUoJy4vQ29ubmVjdGlvbkNvbnRyb2xsZXInKTsKCnZhciBfQ29ubmVjdGlvbkNvbnRyb2xsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29ubmVjdGlvbkNvbnRyb2xsZXIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSA/IGNhbGwgOiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKioNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKi8KCi8qIGpzaGludCB1bmRlZjogdHJ1ZSAqLwoKLy8gU2VydmljZSBGcmFtZXdvcmsKCgovLyBVdGlscwoKCi8vIEludGVybmFscwoKCi8qKg0KKiBIeXBlcnR5IENvbm5lY3RvcjsNCiogQGF1dGhvciBWaXRvciBTaWx2YSBbdml0b3ItdC1zaWx2YUB0ZWxlY29tLnB0XQ0KKiBAdmVyc2lvbiAwLjEuMA0KKi8KCnZhciBIeXBlcnR5Q29ubmVjdG9yID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHsKICBfaW5oZXJpdHMoSHlwZXJ0eUNvbm5lY3RvciwgX0V2ZW50RW1pdHRlcik7CgogIC8qKg0KICAqIENyZWF0ZSBhIG5ldyBIeXBlcnR5IENvbm5lY3Rvcg0KICAqIEBwYXJhbSAge1N5bmNoZXJ9IHN5bmNoZXIgLSBTeW5jaGVyIHByb3ZpZGVkIGZyb20gdGhlIHJ1bnRpbWUgY29yZQ0KICAqLwoKICBmdW5jdGlvbiBIeXBlcnR5Q29ubmVjdG9yKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbikgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEh5cGVydHlDb25uZWN0b3IpOwoKICAgIGlmICghaHlwZXJ0eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgaHlwZXJ0eVVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKICAgIGlmICghYnVzKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBNaW5pQnVzIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwogICAgaWYgKCFjb25maWd1cmF0aW9uKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb25maWd1cmF0aW9uIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwoKICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSHlwZXJ0eUNvbm5lY3RvcikuY2FsbCh0aGlzLCBoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24pKTsKCiAgICB2YXIgX3RoaXMgPSBfdGhpczI7CiAgICBfdGhpcy5faHlwZXJ0eVVSTCA9IGh5cGVydHlVUkw7CiAgICBfdGhpcy5fYnVzID0gYnVzOwogICAgX3RoaXMuX2NvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uOwogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShoeXBlcnR5VVJMKS5kb21haW47CgogICAgX3RoaXMuX29iamVjdERlc2NVUkwgPSAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly8nICsgX3RoaXMuX2RvbWFpbiArICcvLndlbGwta25vd24vZGF0YXNjaGVtYXMvRmFrZURhdGFTY2hlbWEnOwoKICAgIF90aGlzLl9jb250cm9sbGVycyA9IHt9OwoKICAgIF90aGlzLmh5cGVydHlEaXNjb3ZlcnkgPSBuZXcgX0h5cGVydHlEaXNjb3ZlcnkyLmRlZmF1bHQoaHlwZXJ0eVVSTCwgYnVzKTsKCiAgICB2YXIgc3luY2hlciA9IG5ldyBfU3luY2hlci5TeW5jaGVyKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbik7CiAgICBzeW5jaGVyLm9uTm90aWZpY2F0aW9uKGZ1bmN0aW9uIChldmVudCkgewogICAgICBfdGhpcy5fb25Ob3RpZmljYXRpb24oZXZlbnQpOwogICAgfSk7CgogICAgX3RoaXMuX3N5bmNoZXIgPSBzeW5jaGVyOwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogIF9jcmVhdGVDbGFzcyhIeXBlcnR5Q29ubmVjdG9yLCBbewogICAga2V5OiAnX29uTm90aWZpY2F0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Ob3RpZmljYXRpb24oZXZlbnQpIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLSBBY2tub3dsZWRnZXMgdGhlIFJlcG9ydGVyIC0tLS0tLS0tLS0tLSBcbicpOwogICAgICBldmVudC5hY2soKTsKICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gXG4nKTsKCiAgICAgIGlmIChfdGhpcy5fY29udHJvbGxlcnNbZXZlbnQuZnJvbV0pIHsKICAgICAgICBfdGhpcy5fYXV0b1N1YnNjcmliZShldmVudCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX3RoaXMuX2F1dG9BY2NlcHQoZXZlbnQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX2F1dG9TdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hdXRvU3Vic2NyaWJlKGV2ZW50KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBzeW5jaGVyID0gX3RoaXMuX3N5bmNoZXI7CgogICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0gU3luY2hlciBBdXRvIFN1YnNjcmliZSAtLS0tLS0tLS0tLS0tLS0tIFxuJyk7CiAgICAgIGNvbnNvbGUuaW5mbygnU3Vic2NyaWJlIFVSTCBPYmplY3QgJywgZXZlbnQsIHN5bmNoZXIpOwogICAgICBzeW5jaGVyLnN1YnNjcmliZShfdGhpcy5fb2JqZWN0RGVzY1VSTCwgZXZlbnQudXJsKS50aGVuKGZ1bmN0aW9uIChkYXRhT2JqZWN0T2JzZXJ2ZXIpIHsKICAgICAgICBjb25zb2xlLmluZm8oJzEuIFJldHVybiBTdWJzY3JpYmUgRGF0YSBPYmplY3QgT2JzZXJ2ZXInLCBkYXRhT2JqZWN0T2JzZXJ2ZXIpOwogICAgICAgIGNvbnNvbGUubG9nKF90aGlzLl9jb250cm9sbGVycyk7CiAgICAgICAgX3RoaXMuX2NvbnRyb2xsZXJzW2V2ZW50LmZyb21dLmRhdGFPYmplY3RPYnNlcnZlciA9IGRhdGFPYmplY3RPYnNlcnZlcjsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2F1dG9BY2NlcHQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hdXRvQWNjZXB0KGV2ZW50KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBzeW5jaGVyID0gX3RoaXMuX3N5bmNoZXI7CgogICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tIFN5bmNoZXIgU3Vic2NyaWJlIChBdXRvIEFjY2VwdCkgLS0tLS0tLS0tLS0tLSBcbicpOwogICAgICBjb25zb2xlLmluZm8oJ1N1YnNjcmliZSBVUkwgT2JqZWN0ICcsIGV2ZW50LCBzeW5jaGVyKTsKICAgICAgc3luY2hlci5zdWJzY3JpYmUoX3RoaXMuX29iamVjdERlc2NVUkwsIGV2ZW50LnVybCkudGhlbihmdW5jdGlvbiAoZGF0YU9iamVjdE9ic2VydmVyKSB7CiAgICAgICAgY29uc29sZS5pbmZvKCcxLiBSZXR1cm4gU3Vic2NyaWJlIERhdGEgT2JqZWN0IE9ic2VydmVyJywgZGF0YU9iamVjdE9ic2VydmVyKTsKCiAgICAgICAgdmFyIGNvbm5lY3Rpb25Db250cm9sbGVyID0gbmV3IF9Db25uZWN0aW9uQ29udHJvbGxlcjIuZGVmYXVsdChzeW5jaGVyLCBfdGhpcy5fZG9tYWluLCBfdGhpcy5fY29uZmlndXJhdGlvbik7CiAgICAgICAgY29ubmVjdGlvbkNvbnRyb2xsZXIucmVtb3RlUGVlckluZm9ybWF0aW9uID0gZXZlbnQ7CiAgICAgICAgY29ubmVjdGlvbkNvbnRyb2xsZXIuZGF0YU9iamVjdE9ic2VydmVyID0gZGF0YU9iamVjdE9ic2VydmVyOwoKICAgICAgICBfdGhpcy50cmlnZ2VyKCdjb25uZWN0b3I6Y29ubmVjdGVkJywgY29ubmVjdGlvbkNvbnRyb2xsZXIpOwogICAgICAgIF90aGlzLnRyaWdnZXIoJ2hhdmU6bm90aWZpY2F0aW9uJywgZXZlbnQpOwoKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcbicpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihyZWFzb24pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIEVzdGFibGlzaCBjb25uZWN0aW9uIHdpdGggb3RoZXIgY2xpZW50IGlkZW50aWZpZXINCiAgICAqIEBwYXJhbSAge0h5cGVydHlVUkx9IEh5cGVydHlVUkwgLSBEZWZpbmUgdGhlIGlkZW50aWZpZXIgb2YgdGhlIG90aGVyIGNvbXBvbmVudA0KICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIC0gT2JqZWN0IHdpdGggb3B0aW9ucyB0byBpbXByb3ZlIHRoZSBjb25uZWN0DQogICAgKi8KCiAgfSwgewogICAga2V5OiAnY29ubmVjdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdChoeXBlcnR5VVJMLCBzdHJlYW0pIHsKICAgICAgLy8gVE9ETzogUGFzcyBhcmd1bWVudCBvcHRpb25zIGFzIGEgc3RyZWFtLCBiZWNhdXNlIGlzIHNwZWNpZmljIG9mIGltcGxlbWVudGF0aW9uOwogICAgICAvLyBUT0RPOiBDSGFuZ2UgdGhlIGh5cGVydHlVUkwgZm9yIGEgbGlzdCBvZiBVUkxTCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBzeW5jaGVyID0gX3RoaXMuX3N5bmNoZXI7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgY29ubmVjdGlvbkNvbnRyb2xsZXIgPSB2b2lkIDA7CiAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU3luY2hlciBDcmVhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcbicpOwogICAgICAgIHN5bmNoZXIuY3JlYXRlKF90aGlzLl9vYmplY3REZXNjVVJMLCBbaHlwZXJ0eVVSTF0sIHt9KS50aGVuKGZ1bmN0aW9uIChkYXRhT2JqZWN0UmVwb3J0ZXIpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gUmV0dXJuIENyZWF0ZSBEYXRhIE9iamVjdCBSZXBvcnRlcicsIGRhdGFPYmplY3RSZXBvcnRlcik7CgogICAgICAgICAgY29ubmVjdGlvbkNvbnRyb2xsZXIgPSBuZXcgX0Nvbm5lY3Rpb25Db250cm9sbGVyMi5kZWZhdWx0KHN5bmNoZXIsIF90aGlzLl9kb21haW4sIF90aGlzLl9jb25maWd1cmF0aW9uKTsKICAgICAgICAgIGNvbm5lY3Rpb25Db250cm9sbGVyLnN0cmVhbSA9IHN0cmVhbTsKICAgICAgICAgIGNvbm5lY3Rpb25Db250cm9sbGVyLmRhdGFPYmplY3RSZXBvcnRlciA9IGRhdGFPYmplY3RSZXBvcnRlcjsKCiAgICAgICAgICBfdGhpcy5fY29udHJvbGxlcnNbaHlwZXJ0eVVSTF0gPSBjb25uZWN0aW9uQ29udHJvbGxlcjsKCiAgICAgICAgICByZXNvbHZlKGNvbm5lY3Rpb25Db250cm9sbGVyKTsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gXG4nKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSHlwZXJ0eUNvbm5lY3RvcjsKfShfRXZlbnRFbWl0dGVyMy5kZWZhdWx0KTsKCmZ1bmN0aW9uIGFjdGl2YXRlKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbikgewoKICByZXR1cm4gewogICAgbmFtZTogJ0h5cGVydHlDb25uZWN0b3InLAogICAgaW5zdGFuY2U6IG5ldyBIeXBlcnR5Q29ubmVjdG9yKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbikKICB9Owp9Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL3V0aWxzL0V2ZW50RW1pdHRlciI6OCwiLi4vdXRpbHMvdXRpbHMiOjksIi4vQ29ubmVjdGlvbkNvbnRyb2xsZXIiOjQsInNlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvSHlwZXJ0eURpc2NvdmVyeSI6MSwic2VydmljZS1mcmFtZXdvcmsvZGlzdC9TeW5jaGVyIjoyfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgdmFsdWU6IHRydWUKfSk7Ci8qKg0KKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0ENCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WDQoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQoqIENvcHlyaWdodCAyMDE2IEFwaXplZQ0KKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KKg0KKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCioNCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCioNCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCioqLwoKLy8gZGF0YU9iamVjdFJlcG9ydGVyLmRhdGEgPSB7Ci8vICAgIHN0YXR1cyA6ICJjb25uZWN0ZWQiLAovLyAgICBvd25lciA6ICJoeXBlcnR5Oi8vZXhhbXBsZS5jb20vYWxpY2VoeSIsCi8vICAgIHBlZXIgOiAiY29ubmVjdGlvbjovL2V4YW1wbGUuY29tL2FsaWNlL2JvYjI3MDEyMDE2IiwKLy8gICAgb3duZXJQZWVyIDogewovLyAgICAgICAgICBjb25uZWN0aW9uRGVzY3JpcHRpb246IHsKLy8gICAgICAgICAgICAgc2RwOiAnczRkZmFmMXNhM2YxYXNkNWY0c2RhZmEnLAovLyAgICAgICAgICAgICB0eXBlOiAnb2ZmZXInCi8vICAgICAgICAgIH0sCi8vICAgICAgICAgIGljZUNhbmRpZGF0ZXM6IFt7Ci8vICAgICAgICAgICAgICB0eXBlOiAnY2FuZGlkYXRlJywKLy8gICAgICAgICAgICAgIGNhbmRpZGF0ZTogZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSwKLy8gICAgICAgICAgICAgIHNkcE1pZDogZXZlbnQuY2FuZGlkYXRlLnNkcE1pZCwKLy8gICAgICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGV2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4Ci8vICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICB7Ci8vICAgICAgICAgICAgICB0eXBlOiAnY2FuZGlkYXRlJywKLy8gICAgICAgICAgICAgIGNhbmRpZGF0ZTogZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSwKLy8gICAgICAgICAgICAgIHNkcE1pZDogZXZlbnQuY2FuZGlkYXRlLnNkcE1pZCwKLy8gICAgICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGV2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4Ci8vICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAuLi4uLgovLyAgICAgICAgXQovLyAgICAgIH0KLy8gIH0KCnZhciBjb25uZWN0aW9uID0gewogICBuYW1lOiAnJywKICAgc3RhdHVzOiAiY29ubmVjdGVkIiwKICAgb3duZXI6ICJoeXBlcnR5Oi8vZXhhbXBsZS5jb20vYWxpY2VoeSIsCiAgIHBlZXI6ICJjb25uZWN0aW9uOi8vZXhhbXBsZS5jb20vYWxpY2UvYm9iMjcwMTIwMTYiLAogICBvd25lclBlZXI6IHsKICAgICAgY29ubmVjdGlvbkRlc2NyaXB0aW9uOiB7fSwKICAgICAgaWNlQ2FuZGlkYXRlczogW10KICAgfQp9OwoKZXhwb3J0cy5kZWZhdWx0ID0gY29ubmVjdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8KCnZhciBwZWVyID0gewogIG5hbWU6ICcnLAogIGNvbm5lY3Rpb25EZXNjcmlwdGlvbjoge30sCiAgaWNlQ2FuZGlkYXRlczogW10KfTsKCmV4cG9ydHMuZGVmYXVsdCA9IHBlZXI7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8KCi8qKg0KICogRXZlbnRFbWl0dGVyDQogKiBBbGwgY2xhc3NlcyB3aGljaCBleHRlbmRzIHRoaXMsIGNhbiBoYXZlIGFkZEV2ZW50TGlzdGVuZXIgYW5kIHRyaWdnZXIgZXZlbnRzOw0KICovCgp2YXIgRXZlbnRFbWl0dGVyID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudEVtaXR0ZXIpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEV2ZW50RW1pdHRlciwgW3sKICAgIGtleTogImFkZEV2ZW50TGlzdGVuZXIiLAoKCiAgICAvKioNCiAgICAgKiBhZGRFdmVudExpc3RlbmVyIGxpc3RlbiBmb3IgYW4gZXZlbnRUeXBlDQogICAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgIGV2ZW50VHlwZSAtIGxpc3RlbmluZyBmb3IgdGhpcyB0eXBlIG9mIGV2ZW50DQogICAgICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgIGNiICAgICAgICAtIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXQgaXMgaW52b2tlZA0KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpc1tldmVudFR5cGVdID0gY2I7CiAgICB9CgogICAgLyoqDQogICAgICogSW52b2tlIHRoZSBldmVudFR5cGUNCiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHdpbGwgYmUgaW52b2tlZA0KICAgICAqIEBwYXJhbSAge29iamVjdH0gcGFyYW1zIC0gcGFyYW1ldGVycyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgYWRkRXZlbnRMaXN0ZW5lcg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0cmlnZ2VyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50VHlwZSwgcGFyYW1zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoX3RoaXNbZXZlbnRUeXBlXSkgewogICAgICAgIF90aGlzW2V2ZW50VHlwZV0ocGFyYW1zKTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIEV2ZW50RW1pdHRlcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRFbWl0dGVyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0se31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGl2aWRlVVJMID0gZGl2aWRlVVJMOwpleHBvcnRzLmRlZXBDbG9uZSA9IGRlZXBDbG9uZTsKZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7CmV4cG9ydHMuZ2V0VXNlck1lZGlhID0gZ2V0VXNlck1lZGlhOwpleHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTsKZXhwb3J0cy5nZXRUZW1wbGF0ZSA9IGdldFRlbXBsYXRlOwovKioNCiAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiAqDQogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCiAqKi8KCi8vIGpzaGludCBicm93c2VyOnRydWUsIGpxdWVyeTogdHJ1ZQovLyBqc2hpbnQgdmFyc3RtdDogdHJ1ZQovKiBnbG9iYWwgSGFuZGxlYmFycyAqLwoKLyoqDQogKiBTdXBwb3J0IG1vZHVsZSB3aXRoIHNvbWUgZnVuY3Rpb25zIHdpbGwgYmUgdXNlZnVsDQogKiBAbW9kdWxlIHV0aWxzDQogKi8KCi8qKg0KICogQHR5cGVkZWYgZGl2aWRlVVJMDQogKiBAdHlwZSBPYmplY3QNCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTA0KICogQHByb3BlcnR5IHtzdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG9mIFVSTA0KICogQHByb3BlcnR5IHtzdHJpbmd9IGlkZW50aXR5IFRoZSBpZGVudGl0eSBvZiBVUkwNCiAqLwoKLyoqDQogKiBEaXZpZGUgYW4gdXJsIGluIHR5cGUsIGRvbWFpbiBhbmQgaWRlbnRpdHkNCiAqIEBwYXJhbSAge1VSTC5VUkx9IHVybCAtIHVybCBhZGRyZXNzDQogKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMDQogKi8KZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkgewoKICAvLyBsZXQgcmUgPSAvKFthLXpBLVotXSopPzpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fVwuW2Etel17Miw2fVxiKSooXC9bXC9cZFx3XC4tXSopKig/OltcP10pKiguKykqL2dpOwogIHZhciByZSA9IC8oW2EtekEtWi1dKik6XC9cLyg/OlwuKT8oWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpOwogIHZhciBzdWJzdCA9ICckMSwkMiwkMyc7CiAgdmFyIHBhcnRzID0gdXJsLnJlcGxhY2UocmUsIHN1YnN0KS5zcGxpdCgnLCcpOwoKICAvLyBJZiB0aGUgdXJsIGhhcyBubyBwcm90b2NvbCwgdGhlIGRlZmF1bHQgcHJvdG9jb2wgc2V0IGlzIGh0dHBzCiAgaWYgKHBhcnRzWzBdID09PSB1cmwpIHsKICAgIHBhcnRzWzBdID0gJ2h0dHBzJzsKICAgIHBhcnRzWzFdID0gdXJsOwogIH0KCiAgdmFyIHJlc3VsdCA9IHsKICAgIHR5cGU6IHBhcnRzWzBdLAogICAgZG9tYWluOiBwYXJ0c1sxXSwKICAgIGlkZW50aXR5OiBwYXJ0c1syXQogIH07CgogIHJldHVybiByZXN1bHQ7Cn0KCi8qKg0KICogTWFrZSBhIENPUFkgb2YgdGhlIG9yaWdpbmFsIGRhdGENCiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWQNCiAqIEByZXR1cm4ge09iamVjdH0NCiAqLwpmdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7CiAgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLgogIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpOwp9CgovKioNCiAqIEdldCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIGFuIGpzb24gZmlsZTsNCiAqIEBwYXJhbSAge0pTT05PYmplY3R9IGpzb25GaWxlDQogKiBAcmV0dXJuIHtvYmplY3R9DQogKi8KZnVuY3Rpb24gZ2V0Q29uZmlnKEpTT05PYmplY3QpIHsKICBjb25zb2xlLmxvZygnZGV2ZWxvcG1lbnQnKTsKICByZXR1cm4gSlNPTk9iamVjdFsnZGV2ZWxvcG1lbnQnXTsKfQoKLyoqDQogKiBHZXQgV2ViUlRDIEFQSSByZXNvdXJjZXMNCiAqIEBwYXJhbSAge09iamVjdH0gICAgIG9wdGlvbnMgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGluZm9ybWF0aW9uIHRoYXQgcmVzb3VyY2VzIHdpbGwgYmUgdXNlZCAoY2FtZXJhLCBtaWMsIHJlc29sdXRpb24sIGV0Yyk7DQogKiBAcmV0dXJuIHtQcm9taXNlfQ0KICovCmZ1bmN0aW9uIGdldFVzZXJNZWRpYShjb25zdHJhaW50cykgewoKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uIChtZWRpYVN0cmVhbSkgewogICAgICByZXNvbHZlKG1lZGlhU3RyZWFtKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICB9KTsKICB9KTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplKCkgewoKICAkLmZuLnNlcmlhbGl6ZU9iamVjdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBvID0ge307CiAgICB2YXIgYSA9IHRoaXMuc2VyaWFsaXplQXJyYXkoKTsKICAgICQuZWFjaChhLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChvW3RoaXMubmFtZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICghb1t0aGlzLm5hbWVdLnB1c2gpIHsKICAgICAgICAgIG9bdGhpcy5uYW1lXSA9IFtvW3RoaXMubmFtZV1dOwogICAgICAgIH0KCiAgICAgICAgb1t0aGlzLm5hbWVdLnB1c2godGhpcy52YWx1ZSB8fCAnJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb1t0aGlzLm5hbWVdID0gdGhpcy52YWx1ZSB8fCAnJzsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIG87CiAgfTsKCiAgJC5mbi5zZXJpYWxpemVPYmplY3RBcnJheSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBvID0ge307CiAgICB2YXIgYSA9IHRoaXMuc2VyaWFsaXplQXJyYXkoKTsKICAgICQuZWFjaChhLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChvW3RoaXMubmFtZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICghb1t0aGlzLm5hbWVdLnB1c2gpIHsKICAgICAgICAgIG9bdGhpcy5uYW1lXSA9IFtvW3RoaXMubmFtZV1dOwogICAgICAgIH0KCiAgICAgICAgb1t0aGlzLm5hbWVdLnB1c2godGhpcy52YWx1ZSB8fCAnJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKCFvW3RoaXMubmFtZV0pIG9bdGhpcy5uYW1lXSA9IFtdOwogICAgICAgIG9bdGhpcy5uYW1lXS5wdXNoKHRoaXMudmFsdWUgfHwgJycpOwogICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gbzsKICB9Owp9CgpmdW5jdGlvbiBnZXRUZW1wbGF0ZShwYXRoLCBzY3JpcHQpIHsKCiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICBpZiAoSGFuZGxlYmFycy50ZW1wbGF0ZXMgPT09IHVuZGVmaW5lZCB8fCBIYW5kbGViYXJzLnRlbXBsYXRlc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIEhhbmRsZWJhcnMudGVtcGxhdGVzID0ge307CiAgICB9IGVsc2UgewogICAgICByZXNvbHZlKEhhbmRsZWJhcnMudGVtcGxhdGVzW25hbWVdKTsKICAgIH0KCiAgICB2YXIgdGVtcGxhdGVGaWxlID0gJC5hamF4KHsKICAgICAgdXJsOiBwYXRoICsgJy5oYnMnLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHsKICAgICAgICBIYW5kbGViYXJzLnRlbXBsYXRlc1tuYW1lXSA9IEhhbmRsZWJhcnMuY29tcGlsZShkYXRhKTsKICAgICAgfSwKCiAgICAgIGZhaWw6IGZ1bmN0aW9uIGZhaWwocmVhc29uKSB7CiAgICAgICAgcmV0dXJuIHJlYXNvbjsKICAgICAgfQogICAgfSk7CgogICAgdmFyIHNjcmlwdEZpbGUgPSAkLmdldFNjcmlwdChzY3JpcHQpOwoKICAgIHZhciByZXF1ZXN0cyA9IFtdOwogICAgaWYgKHBhdGgpIHJlcXVlc3RzLnB1c2godGVtcGxhdGVGaWxlKTsKICAgIGlmIChzY3JpcHQpIHJlcXVlc3RzLnB1c2goc2NyaXB0RmlsZSk7CgogICAgUHJvbWlzZS5hbGwocmVxdWVzdHMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICByZXNvbHZlKEhhbmRsZWJhcnMudGVtcGxhdGVzW25hbWVdKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICB9KTsKICB9KTsKfQoKfSx7fV19LHt9LFs1XSkoNSkKfSk7",
      "sourceCodeClassname": "HypertyConnector",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10001,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HypertyConnector",
    "objectName": "HypertyConnector",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "HelloWorldObserver": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HelloWorldObserver",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10002,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HelloWorldObserver",
    "objectName": "HelloWorldObserver",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "HelloWorldReporter": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HelloWorldReporter",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10003,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HelloWorldReporter",
    "objectName": "HelloWorldReporter",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "HypertyChat": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HypertyChat",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10004,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HypertyChat",
    "objectName": "HypertyChat",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "GroupChatHyperty": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "GroupChatHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of GroupChatHyperty",
    "objectName": "GroupChatHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "LocationHyperty": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "LocationHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of LocationHyperty",
    "objectName": "LocationHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "FakeLocationObserverHyperty": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "FakeLocationObserverHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of FakeLocationObserverHyperty",
    "objectName": "FakeLocationObserverHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "ParticipantsHyperty": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCkuZGVmYXVsdH19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK28rIiciKTt0aHJvdyBmLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKLyoqCiogQ29yZSBIeXBlcnR5RGlzY292ZXJ5IGludGVyZmFjZQoqIENsYXNzIHRvIGFsbG93IGFwcGxpY2F0aW9ucyB0byBzZWFyY2ggZm9yIGh5cGVydGllcyB1c2luZyB0aGUgbWVzc2FnZSBidXMKKi8KCnZhciBIeXBlcnR5RGlzY292ZXJ5ID0gZnVuY3Rpb24gKCkgewoKICAvKioKICAqIFRvIGluaXRpYWxpc2UgdGhlIEh5cGVydHlEaXNjb3Zlciwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG8KICAqIHF1ZXJ5IHVzZXJzIHJlZ2lzdGVyZWQgaW4gb3V0c2lkZSB0aGUgaW50ZXJuYWwgY29yZS4KICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXMKICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMCiAgKi8KCiAgZnVuY3Rpb24gSHlwZXJ0eURpc2NvdmVyeShoeXBlcnR5VVJMLCBtc2dCdXMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIeXBlcnR5RGlzY292ZXJ5KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMubWVzc2FnZUJ1cyA9IG1zZ0J1czsKCiAgICBfdGhpcy5kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoaHlwZXJ0eVVSTCkuZG9tYWluOwogICAgX3RoaXMuZGlzY292ZXJ5VVJMID0gaHlwZXJ0eVVSTDsKICB9CgogIC8qKgogICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmQKICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbnN0YW5jZSAgdXJsLCBpZiBmb3VuZC4KICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIG5hbWUgIGRhdGFPYmplY3QgTmFtZQogICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpCiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlCiAgKi8KCgogIF9jcmVhdGVDbGFzcyhIeXBlcnR5RGlzY292ZXJ5LCBbewogICAga2V5OiAnZGlzY292ZXJEYXRhT2JqZWN0UGVyTmFtZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJEYXRhT2JqZWN0UGVyTmFtZShuYW1lLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiAnZGF0YU9iamVjdDovLycgKyBuYW1lIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCiAgICAgICAgICB2YXIgZGF0YU9iamVjdFVybCA9IHJlcGx5LmJvZHkudmFsdWUudXJsOwoKICAgICAgICAgIGlmIChkYXRhT2JqZWN0VXJsKSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdFVybCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3QgbmFtZSBkb2VzIG5vdCBleGlzdCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCB1c2VycyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kCiAgICAqIHJldHVybiB0aGUgbGFzdCBoeXBlcnR5IGluc3RhbmNlIHJlZ2lzdGVyZWQgYnkgdGhlIHVzZXIuCiAgICAqIEBwYXJhbSAge2VtYWlsfSAgICAgICAgICAgICAgZW1haWwKICAgICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UKICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVySHlwZXJ0eVBlclVzZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zdWJzdHJpbmcoZW1haWwuaW5kZXhPZignQCcpICsgMSwgZW1haWwubGVuZ3RoKSArICcvJyArIGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpOwoKICAgICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuCiAgICAgIHZhciBtZXNzYWdlID0gewogICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IGlkZW50aXR5VVJMIH0KICAgICAgfTsKCiAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTsKCiAgICAgIC8vY29uc29sZS5sb2coJ21lc3NhZ2UgUkVBRCcsIG1lc3NhZ2UpOwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgcmVwbHknLCByZXBseSk7CgogICAgICAgICAgdmFyIGh5cGVydHkgPSB2b2lkIDA7CiAgICAgICAgICB2YXIgbW9zdFJlY2VudCA9IHZvaWQgMDsKICAgICAgICAgIHZhciBsYXN0SHlwZXJ0eSA9IHZvaWQgMDsKICAgICAgICAgIHZhciB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQuZ2V0VGltZSgpIDwgaHlwZXJ0eURhdGUuZ2V0VGltZSgpKSB7CiAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBoeXBlcnR5RGF0ZTsKICAgICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGNvbnNvbGUubG9nKCdMYXN0IEh5cGVydHk6ICcsIGxhc3RIeXBlcnR5LCBtb3N0UmVjZW50KTsKCiAgICAgICAgICB2YXIgaHlwZXJ0eVVSTCA9IGxhc3RIeXBlcnR5OwoKICAgICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnVXNlciBIeXBlcnR5IG5vdCBmb3VuZCcpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpZFBhY2thZ2UgPSB7CiAgICAgICAgICAgIGlkOiBlbWFpbCwKICAgICAgICAgICAgZGVzY3JpcHRvcjogdmFsdWVbaHlwZXJ0eVVSTF0uZGVzY3JpcHRvciwKICAgICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTAogICAgICAgICAgfTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBoeXBlcnR5RGlzY292ZXJ5IG1lc3NhZ2VCdW5kbGU6ICcsIGlkUGFja2FnZSk7CiAgICAgICAgICByZXNvbHZlKGlkUGFja2FnZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmQKICAgICogcmV0dXJuIHRoZSBhbGwgdGhlIGh5cGVydGllcyByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyCiAgICAqIEBwYXJhbSAge2VtYWlsfSAgICAgICAgICAgICAgZW1haWwKICAgICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UKICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyKGVtYWlsLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTsKCiAgICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LgogICAgICB2YXIgbWVzc2FnZSA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTCB9CiAgICAgIH07CgogICAgICBjb25zb2xlLmxvZygnTWVzc2FnZSBkaXNjb3Zlckh5cGVydGllc1BlclVzZXI6ICcsIG1lc3NhZ2UsIGFjdGl2ZURvbWFpbiwgaWRlbnRpdHlVUkwpOwoKICAgICAgLy9jb25zb2xlLmxvZygnbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyIHJlcGx5JywgcmVwbHkpOwoKICAgICAgICAgIHZhciB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgICB9CgogICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEh5cGVydHlEaXNjb3Zlcnk7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IEh5cGVydHlEaXNjb3Zlcnk7Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjJ9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRpdmlkZVVSTCA9IGRpdmlkZVVSTDsKZXhwb3J0cy5kZWVwQ2xvbmUgPSBkZWVwQ2xvbmU7Ci8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKLyoqCiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWwKICogQG1vZHVsZSB1dGlscwogKi8KCi8qKgogKiBAdHlwZWRlZiBkaXZpZGVVUkwKICogQHR5cGUgT2JqZWN0CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTAogKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMCiAqLwoKLyoqCiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eQogKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzcwogKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMCiAqLwpmdW5jdGlvbiBkaXZpZGVVUkwodXJsKSB7CgogIC8vIGxldCByZSA9IC8oW2EtekEtWi1dKik/OlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9XC5bYS16XXsyLDZ9XGIpKihcL1tcL1xkXHdcLi1dKikqKD86W1w/XSkqKC4rKSovZ2k7CiAgdmFyIHJlID0gLyhbYS16QS1aLV0qKTpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1wrfiM9XC9dKikvZ2k7CiAgdmFyIHN1YnN0ID0gJyQxLCQyLCQzJzsKICB2YXIgcGFydHMgPSB1cmwucmVwbGFjZShyZSwgc3Vic3QpLnNwbGl0KCcsJyk7CgogIC8vIElmIHRoZSB1cmwgaGFzIG5vIHByb3RvY29sLCB0aGUgZGVmYXVsdCBwcm90b2NvbCBzZXQgaXMgaHR0cHMKICBpZiAocGFydHNbMF0gPT09IHVybCkgewogICAgcGFydHNbMF0gPSAnaHR0cHMnOwogICAgcGFydHNbMV0gPSB1cmw7CiAgfQoKICB2YXIgcmVzdWx0ID0gewogICAgdHlwZTogcGFydHNbMF0sCiAgICBkb21haW46IHBhcnRzWzFdLAogICAgaWRlbnRpdHk6IHBhcnRzWzJdCiAgfTsKCiAgcmV0dXJuIHJlc3VsdDsKfQoKLyoqCiAqIE1ha2UgYSBDT1BZIG9mIHRoZSBvcmlnaW5hbCBkYXRhCiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWQKICogQHJldHVybiB7T2JqZWN0fQogKi8KZnVuY3Rpb24gZGVlcENsb25lKG9iaikgewogIC8vVE9ETzogc2ltcGxlIGJ1dCBpbmVmZmljaWVudCBKU09OIGRlZXAgY2xvbmUuLi4KICBpZiAob2JqKSByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTsKfQoKfSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCi8qIQogKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzCiAqIElQdjYgU3VwcG9ydAogKgogKiBWZXJzaW9uOiAxLjE3LjEKICoKICogQXV0aG9yOiBSb2RuZXkgUmVobQogKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy8KICoKICogTGljZW5zZWQgdW5kZXIKICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlCiAqCiAqLwoKKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgJ3VzZSBzdHJpY3QnOwogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvcmV0dXJuRXhwb3J0cy5qcwoKICBpZiAoKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnKSB7CiAgICAvLyBOb2RlCiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLgogICAgZGVmaW5lKGZhY3RvcnkpOwogIH0gZWxzZSB7CiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KQogICAgcm9vdC5JUHY2ID0gZmFjdG9yeShyb290KTsKICB9Cn0pKHVuZGVmaW5lZCwgZnVuY3Rpb24gKHJvb3QpIHsKICAndXNlIHN0cmljdCc7CgogIC8qCiAgdmFyIF9pbiA9ICJmZTgwOjAwMDA6MDAwMDowMDAwOjAyMDQ6NjFmZjpmZTlkOmYxNTYiOwogIHZhciBfb3V0ID0gSVB2Ni5iZXN0KF9pbik7CiAgdmFyIF9leHBlY3RlZCA9ICJmZTgwOjoyMDQ6NjFmZjpmZTlkOmYxNTYiOwogICBjb25zb2xlLmxvZyhfaW4sIF9vdXQsIF9leHBlY3RlZCwgX291dCA9PT0gX2V4cGVjdGVkKTsKICAqLwoKICAvLyBzYXZlIGN1cnJlbnQgSVB2NiB2YXJpYWJsZSwgaWYgYW55CgogIHZhciBfSVB2NiA9IHJvb3QgJiYgcm9vdC5JUHY2OwoKICBmdW5jdGlvbiBiZXN0UHJlc2VudGF0aW9uKGFkZHJlc3MpIHsKICAgIC8vIGJhc2VkIG9uOgogICAgLy8gSmF2YXNjcmlwdCB0byB0ZXN0IGFuIElQdjYgYWRkcmVzcyBmb3IgcHJvcGVyIGZvcm1hdCwgYW5kIHRvCiAgICAvLyBwcmVzZW50IHRoZSAiYmVzdCB0ZXh0IHJlcHJlc2VudGF0aW9uIiBhY2NvcmRpbmcgdG8gSUVURiBEcmFmdCBSRkMgYXQKICAgIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtNm1hbi10ZXh0LWFkZHItcmVwcmVzZW50YXRpb24tMDQKICAgIC8vIDggRmViIDIwMTAgUmljaCBCcm93biwgRGFydHdhcmUsIExMQwogICAgLy8gUGxlYXNlIGZlZWwgZnJlZSB0byB1c2UgdGhpcyBjb2RlIGFzIGxvbmcgYXMgeW91IHByb3ZpZGUgYSBsaW5rIHRvCiAgICAvLyBodHRwOi8vd3d3LmludGVybWFwcGVyLmNvbQogICAgLy8gaHR0cDovL2ludGVybWFwcGVyLmNvbS9zdXBwb3J0L3Rvb2xzL0lQVjYtVmFsaWRhdG9yLmFzcHgKICAgIC8vIGh0dHA6Ly9kb3dubG9hZC5kYXJ0d2FyZS5jb20vdGhpcmRwYXJ0eS9pcHY2dmFsaWRhdG9yLmpzCgogICAgdmFyIF9hZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpOwogICAgdmFyIHNlZ21lbnRzID0gX2FkZHJlc3Muc3BsaXQoJzonKTsKICAgIHZhciBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7CiAgICB2YXIgdG90YWwgPSA4OwoKICAgIC8vIHRyaW0gY29sb25zICg6OiBvciA6OmE6Yjpj4oCmIG9yIOKApmE6YjpjOjopCiAgICBpZiAoc2VnbWVudHNbMF0gPT09ICcnICYmIHNlZ21lbnRzWzFdID09PSAnJyAmJiBzZWdtZW50c1syXSA9PT0gJycpIHsKICAgICAgLy8gbXVzdCBoYXZlIGJlZW4gOjoKICAgICAgLy8gcmVtb3ZlIGZpcnN0IHR3byBpdGVtcwogICAgICBzZWdtZW50cy5zaGlmdCgpOwogICAgICBzZWdtZW50cy5zaGlmdCgpOwogICAgfSBlbHNlIGlmIChzZWdtZW50c1swXSA9PT0gJycgJiYgc2VnbWVudHNbMV0gPT09ICcnKSB7CiAgICAgIC8vIG11c3QgaGF2ZSBiZWVuIDo6eHh4eAogICAgICAvLyByZW1vdmUgdGhlIGZpcnN0IGl0ZW0KICAgICAgc2VnbWVudHMuc2hpZnQoKTsKICAgIH0gZWxzZSBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0gPT09ICcnICYmIHNlZ21lbnRzW2xlbmd0aCAtIDJdID09PSAnJykgewogICAgICAvLyBtdXN0IGhhdmUgYmVlbiB4eHh4OjoKICAgICAgc2VnbWVudHMucG9wKCk7CiAgICB9CgogICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOwoKICAgIC8vIGFkanVzdCB0b3RhbCBzZWdtZW50cyBmb3IgSVB2NCB0cmFpbGVyCiAgICBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0uaW5kZXhPZignLicpICE9PSAtMSkgewogICAgICAvLyBmb3VuZCBhICIuIiB3aGljaCBtZWFucyBJUHY0CiAgICAgIHRvdGFsID0gNzsKICAgIH0KCiAgICAvLyBmaWxsIGVtcHR5IHNlZ21lbnRzIHRoZW0gd2l0aCAiMDAwMCIKICAgIHZhciBwb3M7CiAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHsKICAgICAgaWYgKHNlZ21lbnRzW3Bvc10gPT09ICcnKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBpZiAocG9zIDwgdG90YWwpIHsKICAgICAgc2VnbWVudHMuc3BsaWNlKHBvcywgMSwgJzAwMDAnKTsKICAgICAgd2hpbGUgKHNlZ21lbnRzLmxlbmd0aCA8IHRvdGFsKSB7CiAgICAgICAgc2VnbWVudHMuc3BsaWNlKHBvcywgMCwgJzAwMDAnKTsKICAgICAgfQoKICAgICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOwogICAgfQoKICAgIC8vIHN0cmlwIGxlYWRpbmcgemVyb3MKICAgIHZhciBfc2VnbWVudHM7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgX3NlZ21lbnRzID0gc2VnbWVudHNbaV0uc3BsaXQoJycpOwogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDM7IGorKykgewogICAgICAgIGlmIChfc2VnbWVudHNbMF0gPT09ICcwJyAmJiBfc2VnbWVudHMubGVuZ3RoID4gMSkgewogICAgICAgICAgX3NlZ21lbnRzLnNwbGljZSgwLCAxKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBzZWdtZW50c1tpXSA9IF9zZWdtZW50cy5qb2luKCcnKTsKICAgIH0KCiAgICAvLyBmaW5kIGxvbmdlc3Qgc2VxdWVuY2Ugb2YgemVyb2VzIGFuZCBjb2FsZXNjZSB0aGVtIGludG8gb25lIHNlZ21lbnQKICAgIHZhciBiZXN0ID0gLTE7CiAgICB2YXIgX2Jlc3QgPSAwOwogICAgdmFyIF9jdXJyZW50ID0gMDsKICAgIHZhciBjdXJyZW50ID0gLTE7CiAgICB2YXIgaW56ZXJvZXMgPSBmYWxzZTsKICAgIC8vIGk7IGFscmVhZHkgZGVjbGFyZWQKCiAgICBmb3IgKGkgPSAwOyBpIDwgdG90YWw7IGkrKykgewogICAgICBpZiAoaW56ZXJvZXMpIHsKICAgICAgICBpZiAoc2VnbWVudHNbaV0gPT09ICcwJykgewogICAgICAgICAgX2N1cnJlbnQgKz0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaW56ZXJvZXMgPSBmYWxzZTsKICAgICAgICAgIGlmIChfY3VycmVudCA+IF9iZXN0KSB7CiAgICAgICAgICAgIGJlc3QgPSBjdXJyZW50OwogICAgICAgICAgICBfYmVzdCA9IF9jdXJyZW50OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoc2VnbWVudHNbaV0gPT09ICcwJykgewogICAgICAgICAgaW56ZXJvZXMgPSB0cnVlOwogICAgICAgICAgY3VycmVudCA9IGk7CiAgICAgICAgICBfY3VycmVudCA9IDE7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKF9jdXJyZW50ID4gX2Jlc3QpIHsKICAgICAgYmVzdCA9IGN1cnJlbnQ7CiAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7CiAgICB9CgogICAgaWYgKF9iZXN0ID4gMSkgewogICAgICBzZWdtZW50cy5zcGxpY2UoYmVzdCwgX2Jlc3QsICcnKTsKICAgIH0KCiAgICBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7CgogICAgLy8gYXNzZW1ibGUgcmVtYWluaW5nIHNlZ21lbnRzCiAgICB2YXIgcmVzdWx0ID0gJyc7CiAgICBpZiAoc2VnbWVudHNbMF0gPT09ICcnKSB7CiAgICAgIHJlc3VsdCA9ICc6JzsKICAgIH0KCiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgcmVzdWx0ICs9IHNlZ21lbnRzW2ldOwogICAgICBpZiAoaSA9PT0gbGVuZ3RoIC0gMSkgewogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICByZXN1bHQgKz0gJzonOwogICAgfQoKICAgIGlmIChzZWdtZW50c1tsZW5ndGggLSAxXSA9PT0gJycpIHsKICAgICAgcmVzdWx0ICs9ICc6JzsKICAgIH0KCiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHsKICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqLwogICAgaWYgKHJvb3QuSVB2NiA9PT0gdGhpcykgewogICAgICByb290LklQdjYgPSBfSVB2NjsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9CgogIHJldHVybiB7CiAgICBiZXN0OiBiZXN0UHJlc2VudGF0aW9uLAogICAgbm9Db25mbGljdDogbm9Db25mbGljdAogIH07Cn0pOwoKfSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCi8qIQogKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzCiAqIFNlY29uZCBMZXZlbCBEb21haW4gKFNMRCkgU3VwcG9ydAogKgogKiBWZXJzaW9uOiAxLjE3LjEKICoKICogQXV0aG9yOiBSb2RuZXkgUmVobQogKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy8KICoKICogTGljZW5zZWQgdW5kZXIKICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlCiAqCiAqLwoKKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgJ3VzZSBzdHJpY3QnOwogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvcmV0dXJuRXhwb3J0cy5qcwoKICBpZiAoKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnKSB7CiAgICAvLyBOb2RlCiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLgogICAgZGVmaW5lKGZhY3RvcnkpOwogIH0gZWxzZSB7CiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KQogICAgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPSBmYWN0b3J5KHJvb3QpOwogIH0KfSkodW5kZWZpbmVkLCBmdW5jdGlvbiAocm9vdCkgewogICd1c2Ugc3RyaWN0JzsKCiAgLy8gc2F2ZSBjdXJyZW50IFNlY29uZExldmVsRG9tYWlucyB2YXJpYWJsZSwgaWYgYW55CgogIHZhciBfU2Vjb25kTGV2ZWxEb21haW5zID0gcm9vdCAmJiByb290LlNlY29uZExldmVsRG9tYWluczsKCiAgdmFyIFNMRCA9IHsKICAgIC8vIGxpc3Qgb2Yga25vd24gU2Vjb25kIExldmVsIERvbWFpbnMKICAgIC8vIGNvbnZlcnRlZCBsaXN0IG9mIFNMRHMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ2F2aW5nbWlsbGVyL3NlY29uZC1sZXZlbC1kb21haW5zCiAgICAvLyAtLS0tCiAgICAvLyBwdWJsaWNzdWZmaXgub3JnIGlzIG1vcmUgY3VycmVudCBhbmQgYWN0dWFsbHkgdXNlZCBieSBhIGNvdXBsZSBvZiBicm93c2VycyBpbnRlcm5hbGx5LgogICAgLy8gZG93bnNpZGUgaXMgaXQgYWxzbyBjb250YWlucyBkb21haW5zIGxpa2UgImR5bmRucy5vcmciIC0gd2hpY2ggaXMgZmluZSBmb3IgdGhlIHNlY3VyaXR5CiAgICAvLyBpc3N1ZXMgYnJvd3NlciBoYXZlIHRvIGRlYWwgd2l0aCAoU09QIGZvciBjb29raWVzLCBldGMpIC0gYnV0IGlzIHdheSBvdmVyYm9hcmQgZm9yIFVSSS5qcwogICAgLy8gLS0tLQogICAgbGlzdDogewogICAgICAnYWMnOiAnIGNvbSBnb3YgbWlsIG5ldCBvcmcgJywKICAgICAgJ2FlJzogJyBhYyBjbyBnb3YgbWlsIG5hbWUgbmV0IG9yZyBwcm8gc2NoICcsCiAgICAgICdhZic6ICcgY29tIGVkdSBnb3YgbmV0IG9yZyAnLAogICAgICAnYWwnOiAnIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsCiAgICAgICdhbyc6ICcgY28gZWQgZ3YgaXQgb2cgcGIgJywKICAgICAgJ2FyJzogJyBjb20gZWR1IGdvYiBnb3YgaW50IG1pbCBuZXQgb3JnIHR1ciAnLAogICAgICAnYXQnOiAnIGFjIGNvIGd2IG9yICcsCiAgICAgICdhdSc6ICcgYXNuIGNvbSBjc2lybyBlZHUgZ292IGlkIG5ldCBvcmcgJywKICAgICAgJ2JhJzogJyBjbyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyBycyB1bmJpIHVubW8gdW5zYSB1bnR6IHVuemUgJywKICAgICAgJ2JiJzogJyBiaXogY28gY29tIGVkdSBnb3YgaW5mbyBuZXQgb3JnIHN0b3JlIHR2ICcsCiAgICAgICdiaCc6ICcgYml6IGNjIGNvbSBlZHUgZ292IGluZm8gbmV0IG9yZyAnLAogICAgICAnYm4nOiAnIGNvbSBlZHUgZ292IG5ldCBvcmcgJywKICAgICAgJ2JvJzogJyBjb20gZWR1IGdvYiBnb3YgaW50IG1pbCBuZXQgb3JnIHR2ICcsCiAgICAgICdicic6ICcgYWRtIGFkdiBhZ3IgYW0gYXJxIGFydCBhdG8gYiBiaW8gYmxvZyBibWQgY2ltIGNuZyBjbnQgY29tIGNvb3AgZWNuIGVkdSBlbmcgZXNwIGV0YyBldGkgZmFyIGZsb2cgZm0gZm5kIGZvdCBmc3QgZzEyIGdnZiBnb3YgaW1iIGluZCBpbmYgam9yIGp1cyBsZWwgbWF0IG1lZCBtaWwgbXVzIG5ldCBub20gbm90IG50ciBvZG8gb3JnIHBwZyBwcm8gcHNjIHBzaSBxc2wgcmVjIHNsZyBzcnYgdG1wIHRyZCB0dXIgdHYgdmV0IHZsb2cgd2lraSB6bGcgJywKICAgICAgJ2JzJzogJyBjb20gZWR1IGdvdiBuZXQgb3JnICcsCiAgICAgICdieic6ICcgZHUgZXQgb20gb3YgcmcgJywKICAgICAgJ2NhJzogJyBhYiBiYyBtYiBuYiBuZiBubCBucyBudCBudSBvbiBwZSBxYyBzayB5ayAnLAogICAgICAnY2snOiAnIGJpeiBjbyBlZHUgZ2VuIGdvdiBpbmZvIG5ldCBvcmcgJywKICAgICAgJ2NuJzogJyBhYyBhaCBiaiBjb20gY3EgZWR1IGZqIGdkIGdvdiBncyBneCBneiBoYSBoYiBoZSBoaSBobCBobiBqbCBqcyBqeCBsbiBtaWwgbmV0IG5tIG54IG9yZyBxaCBzYyBzZCBzaCBzbiBzeCB0aiB0dyB4aiB4eiB5biB6aiAnLAogICAgICAnY28nOiAnIGNvbSBlZHUgZ292IG1pbCBuZXQgbm9tIG9yZyAnLAogICAgICAnY3InOiAnIGFjIGMgY28gZWQgZmkgZ28gb3Igc2EgJywKICAgICAgJ2N5JzogJyBhYyBiaXogY29tIGVrbG9nZXMgZ292IGx0ZCBuYW1lIG5ldCBvcmcgcGFybGlhbWVudCBwcmVzcyBwcm8gdG0gJywKICAgICAgJ2RvJzogJyBhcnQgY29tIGVkdSBnb2IgZ292IG1pbCBuZXQgb3JnIHNsZCB3ZWIgJywKICAgICAgJ2R6JzogJyBhcnQgYXNzbyBjb20gZWR1IGdvdiBuZXQgb3JnIHBvbCAnLAogICAgICAnZWMnOiAnIGNvbSBlZHUgZmluIGdvdiBpbmZvIG1lZCBtaWwgbmV0IG9yZyBwcm8gJywKICAgICAgJ2VnJzogJyBjb20gZWR1IGV1biBnb3YgbWlsIG5hbWUgbmV0IG9yZyBzY2kgJywKICAgICAgJ2VyJzogJyBjb20gZWR1IGdvdiBpbmQgbWlsIG5ldCBvcmcgcm9jaGVzdCB3ICcsCiAgICAgICdlcyc6ICcgY29tIGVkdSBnb2Igbm9tIG9yZyAnLAogICAgICAnZXQnOiAnIGJpeiBjb20gZWR1IGdvdiBpbmZvIG5hbWUgbmV0IG9yZyAnLAogICAgICAnZmonOiAnIGFjIGJpeiBjb20gaW5mbyBtaWwgbmFtZSBuZXQgb3JnIHBybyAnLAogICAgICAnZmsnOiAnIGFjIGNvIGdvdiBuZXQgbm9tIG9yZyAnLAogICAgICAnZnInOiAnIGFzc28gY29tIGYgZ291diBub20gcHJkIHByZXNzZSB0bSAnLAogICAgICAnZ2cnOiAnIGNvIG5ldCBvcmcgJywKICAgICAgJ2doJzogJyBjb20gZWR1IGdvdiBtaWwgb3JnICcsCiAgICAgICdnbic6ICcgYWMgY29tIGdvdiBuZXQgb3JnICcsCiAgICAgICdncic6ICcgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJywKICAgICAgJ2d0JzogJyBjb20gZWR1IGdvYiBpbmQgbWlsIG5ldCBvcmcgJywKICAgICAgJ2d1JzogJyBjb20gZWR1IGdvdiBuZXQgb3JnICcsCiAgICAgICdoayc6ICcgY29tIGVkdSBnb3YgaWR2IG5ldCBvcmcgJywKICAgICAgJ2h1JzogJyAyMDAwIGFncmFyIGJvbHQgY2FzaW5vIGNpdHkgY28gZXJvdGljYSBlcm90aWthIGZpbG0gZm9ydW0gZ2FtZXMgaG90ZWwgaW5mbyBpbmdhdGxhbiBqb2dhc3oga29ueXZlbG8gbGFrYXMgbWVkaWEgbmV3cyBvcmcgcHJpdiByZWtsYW0gc2V4IHNob3Agc3BvcnQgc3VsaSBzemV4IHRtIHRvenNkZSB1dGF6YXMgdmlkZW8gJywKICAgICAgJ2lkJzogJyBhYyBjbyBnbyBtaWwgbmV0IG9yIHNjaCB3ZWIgJywKICAgICAgJ2lsJzogJyBhYyBjbyBnb3YgaWRmIGsxMiBtdW5pIG5ldCBvcmcgJywKICAgICAgJ2luJzogJyBhYyBjbyBlZHUgZXJuZXQgZmlybSBnZW4gZ292IGkgaW5kIG1pbCBuZXQgbmljIG9yZyByZXMgJywKICAgICAgJ2lxJzogJyBjb20gZWR1IGdvdiBpIG1pbCBuZXQgb3JnICcsCiAgICAgICdpcic6ICcgYWMgY28gZG5zc2VjIGdvdiBpIGlkIG5ldCBvcmcgc2NoICcsCiAgICAgICdpdCc6ICcgZWR1IGdvdiAnLAogICAgICAnamUnOiAnIGNvIG5ldCBvcmcgJywKICAgICAgJ2pvJzogJyBjb20gZWR1IGdvdiBtaWwgbmFtZSBuZXQgb3JnIHNjaCAnLAogICAgICAnanAnOiAnIGFjIGFkIGNvIGVkIGdvIGdyIGxnIG5lIG9yICcsCiAgICAgICdrZSc6ICcgYWMgY28gZ28gaW5mbyBtZSBtb2JpIG5lIG9yIHNjICcsCiAgICAgICdraCc6ICcgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgcGVyICcsCiAgICAgICdraSc6ICcgYml6IGNvbSBkZSBlZHUgZ292IGluZm8gbW9iIG5ldCBvcmcgdGVsICcsCiAgICAgICdrbSc6ICcgYXNzbyBjb20gY29vcCBlZHUgZ291diBrIG1lZGVjaW4gbWlsIG5vbSBub3RhaXJlcyBwaGFybWFjaWVucyBwcmVzc2UgdG0gdmV0ZXJpbmFpcmUgJywKICAgICAgJ2tuJzogJyBlZHUgZ292IG5ldCBvcmcgJywKICAgICAgJ2tyJzogJyBhYyBidXNhbiBjaHVuZ2J1ayBjaHVuZ25hbSBjbyBkYWVndSBkYWVqZW9uIGVzIGdhbmd3b24gZ28gZ3dhbmdqdSBneWVvbmdidWsgZ3llb25nZ2kgZ3llb25nbmFtIGhzIGluY2hlb24gamVqdSBqZW9uYnVrIGplb25uYW0gayBrZyBtaWwgbXMgbmUgb3IgcGUgcmUgc2Mgc2VvdWwgdWxzYW4gJywKICAgICAgJ2t3JzogJyBjb20gZWR1IGdvdiBuZXQgb3JnICcsCiAgICAgICdreSc6ICcgY29tIGVkdSBnb3YgbmV0IG9yZyAnLAogICAgICAna3onOiAnIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsCiAgICAgICdsYic6ICcgY29tIGVkdSBnb3YgbmV0IG9yZyAnLAogICAgICAnbGsnOiAnIGFzc24gY29tIGVkdSBnb3YgZ3JwIGhvdGVsIGludCBsdGQgbmV0IG5nbyBvcmcgc2NoIHNvYyB3ZWIgJywKICAgICAgJ2xyJzogJyBjb20gZWR1IGdvdiBuZXQgb3JnICcsCiAgICAgICdsdic6ICcgYXNuIGNvbSBjb25mIGVkdSBnb3YgaWQgbWlsIG5ldCBvcmcgJywKICAgICAgJ2x5JzogJyBjb20gZWR1IGdvdiBpZCBtZWQgbmV0IG9yZyBwbGMgc2NoICcsCiAgICAgICdtYSc6ICcgYWMgY28gZ292IG0gbmV0IG9yZyBwcmVzcyAnLAogICAgICAnbWMnOiAnIGFzc28gdG0gJywKICAgICAgJ21lJzogJyBhYyBjbyBlZHUgZ292IGl0cyBuZXQgb3JnIHByaXYgJywKICAgICAgJ21nJzogJyBjb20gZWR1IGdvdiBtaWwgbm9tIG9yZyBwcmQgdG0gJywKICAgICAgJ21rJzogJyBjb20gZWR1IGdvdiBpbmYgbmFtZSBuZXQgb3JnIHBybyAnLAogICAgICAnbWwnOiAnIGNvbSBlZHUgZ292IG5ldCBvcmcgcHJlc3NlICcsCiAgICAgICdtbic6ICcgZWR1IGdvdiBvcmcgJywKICAgICAgJ21vJzogJyBjb20gZWR1IGdvdiBuZXQgb3JnICcsCiAgICAgICdtdCc6ICcgY29tIGVkdSBnb3YgbmV0IG9yZyAnLAogICAgICAnbXYnOiAnIGFlcm8gYml6IGNvbSBjb29wIGVkdSBnb3YgaW5mbyBpbnQgbWlsIG11c2V1bSBuYW1lIG5ldCBvcmcgcHJvICcsCiAgICAgICdtdyc6ICcgYWMgY28gY29tIGNvb3AgZWR1IGdvdiBpbnQgbXVzZXVtIG5ldCBvcmcgJywKICAgICAgJ214JzogJyBjb20gZWR1IGdvYiBuZXQgb3JnICcsCiAgICAgICdteSc6ICcgY29tIGVkdSBnb3YgbWlsIG5hbWUgbmV0IG9yZyBzY2ggJywKICAgICAgJ25mJzogJyBhcnRzIGNvbSBmaXJtIGluZm8gbmV0IG90aGVyIHBlciByZWMgc3RvcmUgd2ViICcsCiAgICAgICduZyc6ICcgYml6IGNvbSBlZHUgZ292IG1pbCBtb2JpIG5hbWUgbmV0IG9yZyBzY2ggJywKICAgICAgJ25pJzogJyBhYyBjbyBjb20gZWR1IGdvYiBtaWwgbmV0IG5vbSBvcmcgJywKICAgICAgJ25wJzogJyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLAogICAgICAnbnInOiAnIGJpeiBjb20gZWR1IGdvdiBpbmZvIG5ldCBvcmcgJywKICAgICAgJ29tJzogJyBhYyBiaXogY28gY29tIGVkdSBnb3YgbWVkIG1pbCBtdXNldW0gbmV0IG9yZyBwcm8gc2NoICcsCiAgICAgICdwZSc6ICcgY29tIGVkdSBnb2IgbWlsIG5ldCBub20gb3JnIHNsZCAnLAogICAgICAncGgnOiAnIGNvbSBlZHUgZ292IGkgbWlsIG5ldCBuZ28gb3JnICcsCiAgICAgICdwayc6ICcgYml6IGNvbSBlZHUgZmFtIGdvYiBnb2sgZ29uIGdvcCBnb3MgZ292IG5ldCBvcmcgd2ViICcsCiAgICAgICdwbCc6ICcgYXJ0IGJpYWx5c3RvayBiaXogY29tIGVkdSBnZGEgZ2RhbnNrIGdvcnpvdyBnb3YgaW5mbyBrYXRvd2ljZSBrcmFrb3cgbG9keiBsdWJsaW4gbWlsIG5ldCBuZ28gb2xzenR5biBvcmcgcG96bmFuIHB3ciByYWRvbSBzbHVwc2sgc3pjemVjaW4gdG9ydW4gd2Fyc3phd2Egd2F3IHdyb2Mgd3JvY2xhdyB6Z29yYSAnLAogICAgICAncHInOiAnIGFjIGJpeiBjb20gZWR1IGVzdCBnb3YgaW5mbyBpc2xhIG5hbWUgbmV0IG9yZyBwcm8gcHJvZiAnLAogICAgICAncHMnOiAnIGNvbSBlZHUgZ292IG5ldCBvcmcgcGxvIHNlYyAnLAogICAgICAncHcnOiAnIGJlbGF1IGNvIGVkIGdvIG5lIG9yICcsCiAgICAgICdybyc6ICcgYXJ0cyBjb20gZmlybSBpbmZvIG5vbSBudCBvcmcgcmVjIHN0b3JlIHRtIHd3dyAnLAogICAgICAncnMnOiAnIGFjIGNvIGVkdSBnb3YgaW4gb3JnICcsCiAgICAgICdzYic6ICcgY29tIGVkdSBnb3YgbmV0IG9yZyAnLAogICAgICAnc2MnOiAnIGNvbSBlZHUgZ292IG5ldCBvcmcgJywKICAgICAgJ3NoJzogJyBjbyBjb20gZWR1IGdvdiBuZXQgbm9tIG9yZyAnLAogICAgICAnc2wnOiAnIGNvbSBlZHUgZ292IG5ldCBvcmcgJywKICAgICAgJ3N0JzogJyBjbyBjb20gY29uc3VsYWRvIGVkdSBlbWJhaXhhZGEgZ292IG1pbCBuZXQgb3JnIHByaW5jaXBlIHNhb3RvbWUgc3RvcmUgJywKICAgICAgJ3N2JzogJyBjb20gZWR1IGdvYiBvcmcgcmVkICcsCiAgICAgICdzeic6ICcgYWMgY28gb3JnICcsCiAgICAgICd0cic6ICcgYXYgYmJzIGJlbCBiaXogY29tIGRyIGVkdSBnZW4gZ292IGluZm8gazEyIG5hbWUgbmV0IG9yZyBwb2wgdGVsIHRzayB0diB3ZWIgJywKICAgICAgJ3R0JzogJyBhZXJvIGJpeiBjYXQgY28gY29tIGNvb3AgZWR1IGdvdiBpbmZvIGludCBqb2JzIG1pbCBtb2JpIG11c2V1bSBuYW1lIG5ldCBvcmcgcHJvIHRlbCB0cmF2ZWwgJywKICAgICAgJ3R3JzogJyBjbHViIGNvbSBlYml6IGVkdSBnYW1lIGdvdiBpZHYgbWlsIG5ldCBvcmcgJywKICAgICAgJ211JzogJyBhYyBjbyBjb20gZ292IG5ldCBvciBvcmcgJywKICAgICAgJ216JzogJyBhYyBjbyBlZHUgZ292IG9yZyAnLAogICAgICAnbmEnOiAnIGNvIGNvbSAnLAogICAgICAnbnonOiAnIGFjIGNvIGNyaSBnZWVrIGdlbiBnb3Z0IGhlYWx0aCBpd2kgbWFvcmkgbWlsIG5ldCBvcmcgcGFybGlhbWVudCBzY2hvb2wgJywKICAgICAgJ3BhJzogJyBhYm8gYWMgY29tIGVkdSBnb2IgaW5nIG1lZCBuZXQgbm9tIG9yZyBzbGQgJywKICAgICAgJ3B0JzogJyBjb20gZWR1IGdvdiBpbnQgbmV0IG5vbWUgb3JnIHB1YmwgJywKICAgICAgJ3B5JzogJyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLAogICAgICAncWEnOiAnIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsCiAgICAgICdyZSc6ICcgYXNzbyBjb20gbm9tICcsCiAgICAgICdydSc6ICcgYWMgYWR5Z2V5YSBhbHRhaSBhbXVyIGFya2hhbmdlbHNrIGFzdHJha2hhbiBiYXNoa2lyaWEgYmVsZ29yb2QgYmlyIGJyeWFuc2sgYnVyeWF0aWEgY2JnIGNoZWwgY2hlbHlhYmluc2sgY2hpdGEgY2h1a290a2EgY2h1dmFzaGlhIGNvbSBkYWdlc3RhbiBlLWJ1cmcgZWR1IGdvdiBncm96bnkgaW50IGlya3V0c2sgaXZhbm92byBpemhldnNrIGphciBqb3Noa2FyLW9sYSBrYWxteWtpYSBrYWx1Z2Ega2FtY2hhdGthIGthcmVsaWEga2F6YW4ga2NociBrZW1lcm92byBraGFiYXJvdnNrIGtoYWthc3NpYSBraHYga2lyb3Yga29lbmlnIGtvbWkga29zdHJvbWEga3Jhbm95YXJzayBrdWJhbiBrdXJnYW4ga3Vyc2sgbGlwZXRzayBtYWdhZGFuIG1hcmkgbWFyaS1lbCBtYXJpbmUgbWlsIG1vcmRvdmlhIG1vc3JlZyBtc2sgbXVybWFuc2sgbmFsY2hpayBuZXQgbm5vdiBub3Ygbm92b3NpYmlyc2sgbnNrIG9tc2sgb3JlbmJ1cmcgb3JnIG9yeW9sIHBlbnphIHBlcm0gcHAgcHNrb3YgcHR6IHJuZCByeWF6YW4gc2FraGFsaW4gc2FtYXJhIHNhcmF0b3Ygc2ltYmlyc2sgc21vbGVuc2sgc3BiIHN0YXZyb3BvbCBzdHYgc3VyZ3V0IHRhbWJvdiB0YXRhcnN0YW4gdG9tIHRvbXNrIHRzYXJpdHN5biB0c2sgdHVsYSB0dXZhIHR2ZXIgdHl1bWVuIHVkbSB1ZG11cnRpYSB1bGFuLXVkZSB2bGFkaWthdmtheiB2bGFkaW1pciB2bGFkaXZvc3RvayB2b2xnb2dyYWQgdm9sb2dkYSB2b3JvbmV6aCB2cm4gdnlhdGthIHlha3V0aWEgeWFtYWwgeWVrYXRlcmluYnVyZyB5dXpobm8tc2FraGFsaW5zayAnLAogICAgICAncncnOiAnIGFjIGNvIGNvbSBlZHUgZ291diBnb3YgaW50IG1pbCBuZXQgJywKICAgICAgJ3NhJzogJyBjb20gZWR1IGdvdiBtZWQgbmV0IG9yZyBwdWIgc2NoICcsCiAgICAgICdzZCc6ICcgY29tIGVkdSBnb3YgaW5mbyBtZWQgbmV0IG9yZyB0diAnLAogICAgICAnc2UnOiAnIGEgYWMgYiBiZCBjIGQgZSBmIGcgaCBpIGsgbCBtIG4gbyBvcmcgcCBwYXJ0aSBwcCBwcmVzcyByIHMgdCB0bSB1IHcgeCB5IHogJywKICAgICAgJ3NnJzogJyBjb20gZWR1IGdvdiBpZG4gbmV0IG9yZyBwZXIgJywKICAgICAgJ3NuJzogJyBhcnQgY29tIGVkdSBnb3V2IG9yZyBwZXJzbyB1bml2ICcsCiAgICAgICdzeSc6ICcgY29tIGVkdSBnb3YgbWlsIG5ldCBuZXdzIG9yZyAnLAogICAgICAndGgnOiAnIGFjIGNvIGdvIGluIG1pIG5ldCBvciAnLAogICAgICAndGonOiAnIGFjIGJpeiBjbyBjb20gZWR1IGdvIGdvdiBpbmZvIGludCBtaWwgbmFtZSBuZXQgbmljIG9yZyB0ZXN0IHdlYiAnLAogICAgICAndG4nOiAnIGFncmluZXQgY29tIGRlZmVuc2UgZWR1bmV0IGVucyBmaW4gZ292IGluZCBpbmZvIGludGwgbWluY29tIG5hdCBuZXQgb3JnIHBlcnNvIHJucnQgcm5zIHJudSB0b3VyaXNtICcsCiAgICAgICd0eic6ICcgYWMgY28gZ28gbmUgb3IgJywKICAgICAgJ3VhJzogJyBiaXogY2hlcmthc3N5IGNoZXJuaWdvdiBjaGVybm92dHN5IGNrIGNuIGNvIGNvbSBjcmltZWEgY3YgZG4gZG5lcHJvcGV0cm92c2sgZG9uZXRzayBkcCBlZHUgZ292IGlmIGluIGl2YW5vLWZyYW5raXZzayBraCBraGFya292IGtoZXJzb24ga2htZWxuaXRza2l5IGtpZXYga2lyb3ZvZ3JhZCBrbSBrciBrcyBrdiBsZyBsdWdhbnNrIGx1dHNrIGx2aXYgbWUgbWsgbmV0IG5pa29sYWV2IG9kIG9kZXNzYSBvcmcgcGwgcG9sdGF2YSBwcCByb3ZubyBydiBzZWJhc3RvcG9sIHN1bXkgdGUgdGVybm9waWwgdXpoZ29yb2QgdmlubmljYSB2biB6YXBvcml6aHpoZSB6aGl0b21pciB6cCB6dCAnLAogICAgICAndWcnOiAnIGFjIGNvIGdvIG5lIG9yIG9yZyBzYyAnLAogICAgICAndWsnOiAnIGFjIGJsIGJyaXRpc2gtbGlicmFyeSBjbyBjeW0gZ292IGdvdnQgaWNuZXQgamV0IGxlYSBsdGQgbWUgbWlsIG1vZCBuYXRpb25hbC1saWJyYXJ5LXNjb3RsYW5kIG5lbCBuZXQgbmhzIG5pYyBubHMgb3JnIG9yZ24gcGFybGlhbWVudCBwbGMgcG9saWNlIHNjaCBzY290IHNvYyAnLAogICAgICAndXMnOiAnIGRuaSBmZWQgaXNhIGtpZHMgbnNuICcsCiAgICAgICd1eSc6ICcgY29tIGVkdSBndWIgbWlsIG5ldCBvcmcgJywKICAgICAgJ3ZlJzogJyBjbyBjb20gZWR1IGdvYiBpbmZvIG1pbCBuZXQgb3JnIHdlYiAnLAogICAgICAndmknOiAnIGNvIGNvbSBrMTIgbmV0IG9yZyAnLAogICAgICAndm4nOiAnIGFjIGJpeiBjb20gZWR1IGdvdiBoZWFsdGggaW5mbyBpbnQgbmFtZSBuZXQgb3JnIHBybyAnLAogICAgICAneWUnOiAnIGNvIGNvbSBnb3YgbHRkIG1lIG5ldCBvcmcgcGxjICcsCiAgICAgICd5dSc6ICcgYWMgY28gZWR1IGdvdiBvcmcgJywKICAgICAgJ3phJzogJyBhYyBhZ3JpYyBhbHQgYm91cnNlIGNpdHkgY28gY3liZXJuZXQgZGIgZWR1IGdvdiBncm9uZGFyIGlhY2Nlc3MgaW10IGluY2EgbGFuZGVzaWduIGxhdyBtaWwgbmV0IG5nbyBuaXMgbm9tIG9saXZldHRpIG9yZyBwaXggc2Nob29sIHRtIHdlYiAnLAogICAgICAnem0nOiAnIGFjIGNvIGNvbSBlZHUgZ292IG5ldCBvcmcgc2NoICcKICAgIH0sCiAgICAvLyBnb3JoaWxsIDIwMTMtMTAtMjU6IFVzaW5nIGluZGV4T2YoKSBpbnN0ZWFkIFJlZ2V4cCgpLiBTaWduaWZpY2FudCBib29zdAogICAgLy8gaW4gYm90aCBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5IGZvb3RwcmludC4gTm8gaW5pdGlhbGl6YXRpb24gcmVxdWlyZWQuCiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS91cmktanMtc2xkLXJlZ2V4LXZzLWJpbmFyeS1zZWFyY2gvNAogICAgLy8gRm9sbG93aW5nIG1ldGhvZHMgdXNlIGxhc3RJbmRleE9mKCkgcmF0aGVyIHRoYW4gYXJyYXkuc3BsaXQoKSBpbiBvcmRlcgogICAgLy8gdG8gYXZvaWQgYW55IG1lbW9yeSBhbGxvY2F0aW9ucy4KICAgIGhhczogZnVuY3Rpb24gaGFzKGRvbWFpbikgewogICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJyk7CiAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gZG9tYWluLmxlbmd0aCAtIDEpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgdmFyIHNsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicsIHRsZE9mZnNldCAtIDEpOwogICAgICBpZiAoc2xkT2Zmc2V0IDw9IDAgfHwgc2xkT2Zmc2V0ID49IHRsZE9mZnNldCAtIDEpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgdmFyIHNsZExpc3QgPSBTTEQubGlzdFtkb21haW4uc2xpY2UodGxkT2Zmc2V0ICsgMSldOwogICAgICBpZiAoIXNsZExpc3QpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHNsZExpc3QuaW5kZXhPZignICcgKyBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0ICsgMSwgdGxkT2Zmc2V0KSArICcgJykgPj0gMDsKICAgIH0sCiAgICBpczogZnVuY3Rpb24gaXMoZG9tYWluKSB7CiAgICAgIHZhciB0bGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nKTsKICAgICAgaWYgKHRsZE9mZnNldCA8PSAwIHx8IHRsZE9mZnNldCA+PSBkb21haW4ubGVuZ3RoIC0gMSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJywgdGxkT2Zmc2V0IC0gMSk7CiAgICAgIGlmIChzbGRPZmZzZXQgPj0gMCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB2YXIgc2xkTGlzdCA9IFNMRC5saXN0W2RvbWFpbi5zbGljZSh0bGRPZmZzZXQgKyAxKV07CiAgICAgIGlmICghc2xkTGlzdCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gc2xkTGlzdC5pbmRleE9mKCcgJyArIGRvbWFpbi5zbGljZSgwLCB0bGRPZmZzZXQpICsgJyAnKSA+PSAwOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KGRvbWFpbikgewogICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJyk7CiAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gZG9tYWluLmxlbmd0aCAtIDEpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJywgdGxkT2Zmc2V0IC0gMSk7CiAgICAgIGlmIChzbGRPZmZzZXQgPD0gMCB8fCBzbGRPZmZzZXQgPj0gdGxkT2Zmc2V0IC0gMSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCArIDEpXTsKICAgICAgaWYgKCFzbGRMaXN0KSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKHNsZExpc3QuaW5kZXhPZignICcgKyBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0ICsgMSwgdGxkT2Zmc2V0KSArICcgJykgPCAwKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIGRvbWFpbi5zbGljZShzbGRPZmZzZXQgKyAxKTsKICAgIH0sCiAgICBub0NvbmZsaWN0OiBmdW5jdGlvbiBub0NvbmZsaWN0KCkgewogICAgICBpZiAocm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPT09IHRoaXMpIHsKICAgICAgICByb290LlNlY29uZExldmVsRG9tYWlucyA9IF9TZWNvbmRMZXZlbERvbWFpbnM7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfTsKCiAgcmV0dXJuIFNMRDsKfSk7Cgp9LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OwoKLyohCiAqIFVSSS5qcyAtIE11dGF0aW5nIFVSTHMKICoKICogVmVyc2lvbjogMS4xNy4xCiAqCiAqIEF1dGhvcjogUm9kbmV5IFJlaG0KICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvCiAqCiAqIExpY2Vuc2VkIHVuZGVyCiAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZQogKgogKi8KKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgJ3VzZSBzdHJpY3QnOwogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvcmV0dXJuRXhwb3J0cy5qcwoKICBpZiAoKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnKSB7CiAgICAvLyBOb2RlCiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnLi9wdW55Y29kZScpLCByZXF1aXJlKCcuL0lQdjYnKSwgcmVxdWlyZSgnLi9TZWNvbmRMZXZlbERvbWFpbnMnKSk7CiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4KICAgIGRlZmluZShbJy4vcHVueWNvZGUnLCAnLi9JUHY2JywgJy4vU2Vjb25kTGV2ZWxEb21haW5zJ10sIGZhY3RvcnkpOwogIH0gZWxzZSB7CiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KQogICAgcm9vdC5VUkkgPSBmYWN0b3J5KHJvb3QucHVueWNvZGUsIHJvb3QuSVB2Niwgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMsIHJvb3QpOwogIH0KfSkodW5kZWZpbmVkLCBmdW5jdGlvbiAocHVueWNvZGUsIElQdjYsIFNMRCwgcm9vdCkgewogICd1c2Ugc3RyaWN0JzsKICAvKmdsb2JhbCBsb2NhdGlvbiwgZXNjYXBlLCB1bmVzY2FwZSAqLwogIC8vIEZJWE1FOiB2Mi4wLjAgcmVuYW1jZSBub24tY2FtZWxDYXNlIHByb3BlcnRpZXMgdG8gdXBwZXJjYXNlCiAgLypqc2hpbnQgY2FtZWxjYXNlOiBmYWxzZSAqLwoKICAvLyBzYXZlIGN1cnJlbnQgVVJJIHZhcmlhYmxlLCBpZiBhbnkKCiAgdmFyIF9VUkkgPSByb290ICYmIHJvb3QuVVJJOwoKICBmdW5jdGlvbiBVUkkodXJsLCBiYXNlKSB7CiAgICB2YXIgX3VybFN1cHBsaWVkID0gYXJndW1lbnRzLmxlbmd0aCA+PSAxOwogICAgdmFyIF9iYXNlU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7CgogICAgLy8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkCiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVVJJKSkgewogICAgICBpZiAoX3VybFN1cHBsaWVkKSB7CiAgICAgICAgaWYgKF9iYXNlU3VwcGxpZWQpIHsKICAgICAgICAgIHJldHVybiBuZXcgVVJJKHVybCwgYmFzZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IFVSSSh1cmwpOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IFVSSSgpOwogICAgfQoKICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoX3VybFN1cHBsaWVkKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5kZWZpbmVkIGlzIG5vdCBhIHZhbGlkIGFyZ3VtZW50IGZvciBVUkknKTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICB1cmwgPSBsb2NhdGlvbi5ocmVmICsgJyc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdXJsID0gJyc7CiAgICAgIH0KICAgIH0KCiAgICB0aGlzLmhyZWYodXJsKTsKCiAgICAvLyByZXNvbHZlIHRvIGJhc2UgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjY29uc3RydWN0b3IKICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIHRoaXMuYWJzb2x1dGVUbyhiYXNlKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9CgogIFVSSS52ZXJzaW9uID0gJzEuMTcuMSc7CgogIHZhciBwID0gVVJJLnByb3RvdHlwZTsKICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCiAgZnVuY3Rpb24gZXNjYXBlUmVnRXgoc3RyaW5nKSB7CiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9jb21taXQvODVhYzIxNzgzYzExZjhjY2FiMDYxMDZkYmE5NzM1YTMxYTg2OTI0ZCNjb21taXRjb21tZW50LTgyMTk2MwogICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xdXC9cXF0pL2csICdcXCQxJyk7CiAgfQoKICBmdW5jdGlvbiBnZXRUeXBlKHZhbHVlKSB7CiAgICAvLyBJRTggZG9lc24ndCByZXR1cm4gW09iamVjdCBVbmRlZmluZWRdIGJ1dCBbT2JqZWN0IE9iamVjdF0gZm9yIHVuZGVmaW5lZCB2YWx1ZQogICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuICdVbmRlZmluZWQnOwogICAgfQoKICAgIHJldHVybiBTdHJpbmcoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSkuc2xpY2UoOCwgLTEpOwogIH0KCiAgZnVuY3Rpb24gaXNBcnJheShvYmopIHsKICAgIHJldHVybiBnZXRUeXBlKG9iaikgPT09ICdBcnJheSc7CiAgfQoKICBmdW5jdGlvbiBmaWx0ZXJBcnJheVZhbHVlcyhkYXRhLCB2YWx1ZSkgewogICAgdmFyIGxvb2t1cCA9IHt9OwogICAgdmFyIGksIGxlbmd0aDsKCiAgICBpZiAoZ2V0VHlwZSh2YWx1ZSkgPT09ICdSZWdFeHAnKSB7CiAgICAgIGxvb2t1cCA9IG51bGw7CiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgbG9va3VwW3ZhbHVlW2ldXSA9IHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGxvb2t1cFt2YWx1ZV0gPSB0cnVlOwogICAgfQoKICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgLypqc2hpbnQgbGF4YnJlYWs6IHRydWUgKi8KICAgICAgdmFyIF9tYXRjaCA9IGxvb2t1cCAmJiBsb29rdXBbZGF0YVtpXV0gIT09IHVuZGVmaW5lZCB8fCAhbG9va3VwICYmIHZhbHVlLnRlc3QoZGF0YVtpXSk7CiAgICAgIC8qanNoaW50IGxheGJyZWFrOiBmYWxzZSAqLwogICAgICBpZiAoX21hdGNoKSB7CiAgICAgICAgZGF0YS5zcGxpY2UoaSwgMSk7CiAgICAgICAgbGVuZ3RoLS07CiAgICAgICAgaS0tOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGRhdGE7CiAgfQoKICBmdW5jdGlvbiBhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlKSB7CiAgICB2YXIgaSwgbGVuZ3RoOwoKICAgIC8vIHZhbHVlIG1heSBiZSBzdHJpbmcsIG51bWJlciwgYXJyYXksIHJlZ2V4cAogICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgIC8vIE5vdGU6IHRoaXMgY2FuIGJlIG9wdGltaXplZCB0byBPKG4pIChpbnN0ZWFkIG9mIGN1cnJlbnQgTyhtICogbikpCiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKCFhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlW2ldKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgdmFyIF90eXBlID0gZ2V0VHlwZSh2YWx1ZSk7CiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChfdHlwZSA9PT0gJ1JlZ0V4cCcpIHsKICAgICAgICBpZiAodHlwZW9mIGxpc3RbaV0gPT09ICdzdHJpbmcnICYmIGxpc3RbaV0ubWF0Y2godmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAobGlzdFtpXSA9PT0gdmFsdWUpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIGFycmF5c0VxdWFsKG9uZSwgdHdvKSB7CiAgICBpZiAoIWlzQXJyYXkob25lKSB8fCAhaXNBcnJheSh0d28pKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBhcnJheXMgY2FuJ3QgYmUgZXF1YWwgaWYgdGhleSBoYXZlIGRpZmZlcmVudCBhbW91bnQgb2YgY29udGVudAogICAgaWYgKG9uZS5sZW5ndGggIT09IHR3by5sZW5ndGgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIG9uZS5zb3J0KCk7CiAgICB0d28uc29ydCgpOwoKICAgIGZvciAodmFyIGkgPSAwLCBsID0gb25lLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBpZiAob25lW2ldICE9PSB0d29baV0pIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyaW1TbGFzaGVzKHRleHQpIHsKICAgIHZhciB0cmltX2V4cHJlc3Npb24gPSAvXlwvK3xcLyskL2c7CiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHRyaW1fZXhwcmVzc2lvbiwgJycpOwogIH0KCiAgVVJJLl9wYXJ0cyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB7CiAgICAgIHByb3RvY29sOiBudWxsLAogICAgICB1c2VybmFtZTogbnVsbCwKICAgICAgcGFzc3dvcmQ6IG51bGwsCiAgICAgIGhvc3RuYW1lOiBudWxsLAogICAgICB1cm46IG51bGwsCiAgICAgIHBvcnQ6IG51bGwsCiAgICAgIHBhdGg6IG51bGwsCiAgICAgIHF1ZXJ5OiBudWxsLAogICAgICBmcmFnbWVudDogbnVsbCwKICAgICAgLy8gc3RhdGUKICAgICAgZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzOiBVUkkuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLAogICAgICBlc2NhcGVRdWVyeVNwYWNlOiBVUkkuZXNjYXBlUXVlcnlTcGFjZQogICAgfTsKICB9OwogIC8vIHN0YXRlOiBhbGxvdyBkdXBsaWNhdGUgcXVlcnkgcGFyYW1ldGVycyAoYT0xJmE9MSkKICBVUkkuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gZmFsc2U7CiAgLy8gc3RhdGU6IHJlcGxhY2VzICsgd2l0aCAlMjAgKHNwYWNlIGluIHF1ZXJ5IHN0cmluZ3MpCiAgVVJJLmVzY2FwZVF1ZXJ5U3BhY2UgPSB0cnVlOwogIC8vIHN0YXRpYyBwcm9wZXJ0aWVzCiAgVVJJLnByb3RvY29sX2V4cHJlc3Npb24gPSAvXlthLXpdW2EtejAtOS4rLV0qJC9pOwogIFVSSS5pZG5fZXhwcmVzc2lvbiA9IC9bXmEtejAtOVwuLV0vaTsKICBVUkkucHVueWNvZGVfZXhwcmVzc2lvbiA9IC8oeG4tLSkvaTsKICAvLyB3ZWxsLCAzMzMuNDQ0LjU1NS42NjYgbWF0Y2hlcywgYnV0IGl0IHN1cmUgYWluJ3Qgbm8gSVB2NCAtIGRvIHdlIGNhcmU/CiAgVVJJLmlwNF9leHByZXNzaW9uID0gL15cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9JC87CiAgLy8gY3JlZGl0cyB0byBSaWNoIEJyb3duCiAgLy8gc291cmNlOiBodHRwOi8vZm9ydW1zLmludGVybWFwcGVyLmNvbS92aWV3dG9waWMucGhwP3A9MTA5NiMxMDk2CiAgLy8gc3BlY2lmaWNhdGlvbjogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDI5MS50eHQKICBVUkkuaXA2X2V4cHJlc3Npb24gPSAvXlxzKigoKFswLTlBLUZhLWZdezEsNH06KXs3fShbMC05QS1GYS1mXXsxLDR9fDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs2fSg6WzAtOUEtRmEtZl17MSw0fXwoKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezV9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsMn0pfDooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezR9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsM30pfCgoOlswLTlBLUZhLWZdezEsNH0pPzooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXszfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDR9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDJ9OigoMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkoXC4oMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezJ9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNX0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsM306KCgyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKShcLigyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7MX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw2fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw0fTooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSkpfDopKXwoOigoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDd9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDV9OigoMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkoXC4oMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkpezN9KSl8OikpKSglLispP1xzKiQvOwogIC8vIGV4cHJlc3Npb24gdXNlZCBpcyAiZ3J1YmVyIHJldmlzZWQiIChAZ3J1YmVyIHYyKSBkZXRlcm1pbmVkIHRvIGJlIHRoZQogIC8vIGJlc3Qgc29sdXRpb24gaW4gYSByZWdleC1nb2xmIHdlIGRpZCBhIGNvdXBsZSBvZiBhZ2VzIGFnbyBhdAogIC8vICogaHR0cDovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXgKICAvLyAqIGh0dHA6Ly9yb2RuZXlyZWhtLmRlL3QvdXJsLXJlZ2V4Lmh0bWwKICBVUkkuZmluZF91cmlfZXhwcmVzc2lvbiA9IC9cYigoPzpbYS16XVtcdy1dKzooPzpcL3sxLDN9fFthLXowLTklXSl8d3d3XGR7MCwzfVsuXXxbYS16MC05LlwtXStbLl1bYS16XXsyLDR9XC8pKD86W15ccygpPD5dK3xcKChbXlxzKCk8Pl0rfChcKFteXHMoKTw+XStcKSkpKlwpKSsoPzpcKChbXlxzKCk8Pl0rfChcKFteXHMoKTw+XStcKSkpKlwpfFteXHNgISgpXFtcXXt9OzonIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKS9pZzsKICBVUkkuZmluZFVyaSA9IHsKICAgIC8vIHZhbGlkICJzY2hlbWU6Ly8iIG9yICJ3d3cuIgogICAgc3RhcnQ6IC9cYig/OihbYS16XVthLXowLTkuKy1dKjpcL1wvKXx3d3dcLikvZ2ksCiAgICAvLyBldmVyeXRoaW5nIHVwIHRvIHRoZSBuZXh0IHdoaXRlc3BhY2UKICAgIGVuZDogL1tcc1xyXG5dfCQvLAogICAgLy8gdHJpbSB0cmFpbGluZyBwdW5jdHVhdGlvbiBjYXB0dXJlZCBieSBlbmQgUmVnRXhwCiAgICB0cmltOiAvW2AhKClcW1xde307OiciLiw8Pj/Cq8K74oCc4oCd4oCe4oCY4oCZXSskLwogIH07CiAgLy8gaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy5odG1sCiAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX1RDUF9hbmRfVURQX3BvcnRfbnVtYmVycyNXZWxsLWtub3duX3BvcnRzCiAgVVJJLmRlZmF1bHRQb3J0cyA9IHsKICAgIGh0dHA6ICc4MCcsCiAgICBodHRwczogJzQ0MycsCiAgICBmdHA6ICcyMScsCiAgICBnb3BoZXI6ICc3MCcsCiAgICB3czogJzgwJywKICAgIHdzczogJzQ0MycKICB9OwogIC8vIGFsbG93ZWQgaG9zdG5hbWUgY2hhcmFjdGVycyBhY2NvcmRpbmcgdG8gUkZDIDM5ODYKICAvLyBBTFBIQSBESUdJVCAiLSIgIi4iICJfIiAifiIgIiEiICIkIiAiJiIgIiciICIoIiAiKSIgIioiICIrIiAiLCIgIjsiICI9IiAlZW5jb2RlZAogIC8vIEkndmUgbmV2ZXIgc2VlbiBhIChub24tSUROKSBob3N0bmFtZSBvdGhlciB0aGFuOiBBTFBIQSBESUdJVCAuIC0KICBVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzID0gL1teYS16QS1aMC05XC4tXS87CiAgLy8gbWFwIERPTSBFbGVtZW50cyB0byB0aGVpciBVUkkgYXR0cmlidXRlCiAgVVJJLmRvbUF0dHJpYnV0ZXMgPSB7CiAgICAnYSc6ICdocmVmJywKICAgICdibG9ja3F1b3RlJzogJ2NpdGUnLAogICAgJ2xpbmsnOiAnaHJlZicsCiAgICAnYmFzZSc6ICdocmVmJywKICAgICdzY3JpcHQnOiAnc3JjJywKICAgICdmb3JtJzogJ2FjdGlvbicsCiAgICAnaW1nJzogJ3NyYycsCiAgICAnYXJlYSc6ICdocmVmJywKICAgICdpZnJhbWUnOiAnc3JjJywKICAgICdlbWJlZCc6ICdzcmMnLAogICAgJ3NvdXJjZSc6ICdzcmMnLAogICAgJ3RyYWNrJzogJ3NyYycsCiAgICAnaW5wdXQnOiAnc3JjJywgLy8gYnV0IG9ubHkgaWYgdHlwZT0iaW1hZ2UiCiAgICAnYXVkaW8nOiAnc3JjJywKICAgICd2aWRlbyc6ICdzcmMnCiAgfTsKICBVUkkuZ2V0RG9tQXR0cmlidXRlID0gZnVuY3Rpb24gKG5vZGUpIHsKICAgIGlmICghbm9kZSB8fCAhbm9kZS5ub2RlTmFtZSkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQoKICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgIC8vIDxpbnB1dD4gc2hvdWxkIG9ubHkgZXhwb3NlIHNyYyBmb3IgdHlwZT0iaW1hZ2UiCiAgICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgbm9kZS50eXBlICE9PSAnaW1hZ2UnKSB7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CgogICAgcmV0dXJuIFVSSS5kb21BdHRyaWJ1dGVzW25vZGVOYW1lXTsKICB9OwoKICBmdW5jdGlvbiBlc2NhcGVGb3JEdW1iRmlyZWZveDM2KHZhbHVlKSB7CiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTEKICAgIHJldHVybiBlc2NhcGUodmFsdWUpOwogIH0KCiAgLy8gZW5jb2RpbmcgLyBkZWNvZGluZyBhY2NvcmRpbmcgdG8gUkZDMzk4NgogIGZ1bmN0aW9uIHN0cmljdEVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpIHsKICAgIC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2VuY29kZVVSSUNvbXBvbmVudAogICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpLnJlcGxhY2UoL1shJygpKl0vZywgZXNjYXBlRm9yRHVtYkZpcmVmb3gzNikucmVwbGFjZSgvXCovZywgJyUyQScpOwogIH0KICBVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50OwogIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7CiAgVVJJLmlzbzg4NTkgPSBmdW5jdGlvbiAoKSB7CiAgICBVUkkuZW5jb2RlID0gZXNjYXBlOwogICAgVVJJLmRlY29kZSA9IHVuZXNjYXBlOwogIH07CiAgVVJJLnVuaWNvZGUgPSBmdW5jdGlvbiAoKSB7CiAgICBVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50OwogICAgVVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDsKICB9OwogIFVSSS5jaGFyYWN0ZXJzID0gewogICAgcGF0aG5hbWU6IHsKICAgICAgZW5jb2RlOiB7CiAgICAgICAgLy8gUkZDMzk4NiAyLjE6IEZvciBjb25zaXN0ZW5jeSwgVVJJIHByb2R1Y2VycyBhbmQgbm9ybWFsaXplcnMgc2hvdWxkCiAgICAgICAgLy8gdXNlIHVwcGVyY2FzZSBoZXhhZGVjaW1hbCBkaWdpdHMgZm9yIGFsbCBwZXJjZW50LWVuY29kaW5ncy4KICAgICAgICBleHByZXNzaW9uOiAvJSgyNHwyNnwyQnwyQ3wzQnwzRHwzQXw0MCkvaWcsCiAgICAgICAgbWFwOiB7CiAgICAgICAgICAvLyAtLl9+IScoKSoKICAgICAgICAgICclMjQnOiAnJCcsCiAgICAgICAgICAnJTI2JzogJyYnLAogICAgICAgICAgJyUyQic6ICcrJywKICAgICAgICAgICclMkMnOiAnLCcsCiAgICAgICAgICAnJTNCJzogJzsnLAogICAgICAgICAgJyUzRCc6ICc9JywKICAgICAgICAgICclM0EnOiAnOicsCiAgICAgICAgICAnJTQwJzogJ0AnCiAgICAgICAgfQogICAgICB9LAogICAgICBkZWNvZGU6IHsKICAgICAgICBleHByZXNzaW9uOiAvW1wvXD8jXS9nLAogICAgICAgIG1hcDogewogICAgICAgICAgJy8nOiAnJTJGJywKICAgICAgICAgICc/JzogJyUzRicsCiAgICAgICAgICAnIyc6ICclMjMnCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgcmVzZXJ2ZWQ6IHsKICAgICAgZW5jb2RlOiB7CiAgICAgICAgLy8gUkZDMzk4NiAyLjE6IEZvciBjb25zaXN0ZW5jeSwgVVJJIHByb2R1Y2VycyBhbmQgbm9ybWFsaXplcnMgc2hvdWxkCiAgICAgICAgLy8gdXNlIHVwcGVyY2FzZSBoZXhhZGVjaW1hbCBkaWdpdHMgZm9yIGFsbCBwZXJjZW50LWVuY29kaW5ncy4KICAgICAgICBleHByZXNzaW9uOiAvJSgyMXwyM3wyNHwyNnwyN3wyOHwyOXwyQXwyQnwyQ3wyRnwzQXwzQnwzRHwzRnw0MHw1Qnw1RCkvaWcsCiAgICAgICAgbWFwOiB7CiAgICAgICAgICAvLyBnZW4tZGVsaW1zCiAgICAgICAgICAnJTNBJzogJzonLAogICAgICAgICAgJyUyRic6ICcvJywKICAgICAgICAgICclM0YnOiAnPycsCiAgICAgICAgICAnJTIzJzogJyMnLAogICAgICAgICAgJyU1Qic6ICdbJywKICAgICAgICAgICclNUQnOiAnXScsCiAgICAgICAgICAnJTQwJzogJ0AnLAogICAgICAgICAgLy8gc3ViLWRlbGltcwogICAgICAgICAgJyUyMSc6ICchJywKICAgICAgICAgICclMjQnOiAnJCcsCiAgICAgICAgICAnJTI2JzogJyYnLAogICAgICAgICAgJyUyNyc6ICdcJycsCiAgICAgICAgICAnJTI4JzogJygnLAogICAgICAgICAgJyUyOSc6ICcpJywKICAgICAgICAgICclMkEnOiAnKicsCiAgICAgICAgICAnJTJCJzogJysnLAogICAgICAgICAgJyUyQyc6ICcsJywKICAgICAgICAgICclM0InOiAnOycsCiAgICAgICAgICAnJTNEJzogJz0nCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgdXJucGF0aDogewogICAgICAvLyBUaGUgY2hhcmFjdGVycyB1bmRlciBgZW5jb2RlYCBhcmUgdGhlIGNoYXJhY3RlcnMgY2FsbGVkIG91dCBieSBSRkMgMjE0MSBhcyBiZWluZyBhY2NlcHRhYmxlCiAgICAgIC8vIGZvciB1c2FnZSBpbiBhIFVSTi4gUkZDMjE0MSBhbHNvIGNhbGxzIG91dCAiLSIsICIuIiwgYW5kICJfIiBhcyBhY2NlcHRhYmxlIGNoYXJhY3RlcnMsIGJ1dAogICAgICAvLyB0aGVzZSBhcmVuJ3QgZW5jb2RlZCBieSBlbmNvZGVVUklDb21wb25lbnQsIHNvIHdlIGRvbid0IGhhdmUgdG8gY2FsbCB0aGVtIG91dCBoZXJlLiBBbHNvCiAgICAgIC8vIG5vdGUgdGhhdCB0aGUgY29sb24gY2hhcmFjdGVyIGlzIG5vdCBmZWF0dXJlZCBpbiB0aGUgZW5jb2RpbmcgbWFwOyB0aGlzIGlzIGJlY2F1c2UgVVJJLmpzCiAgICAgIC8vIGdpdmVzIHRoZSBjb2xvbnMgaW4gVVJOcyBzZW1hbnRpYyBtZWFuaW5nIGFzIHRoZSBkZWxpbWl0ZXJzIG9mIHBhdGggc2VnZW1lbnRzLCBhbmQgc28gaXQKICAgICAgLy8gc2hvdWxkIG5vdCBhcHBlYXIgdW5lbmNvZGVkIGluIGEgc2VnbWVudCBpdHNlbGYuCiAgICAgIC8vIFNlZSBhbHNvIHRoZSBub3RlIGFib3ZlIGFib3V0IFJGQzM5ODYgYW5kIGNhcGl0YWxhbGl6ZWQgaGV4IGRpZ2l0cy4KICAgICAgZW5jb2RlOiB7CiAgICAgICAgZXhwcmVzc2lvbjogLyUoMjF8MjR8Mjd8Mjh8Mjl8MkF8MkJ8MkN8M0J8M0R8NDApL2lnLAogICAgICAgIG1hcDogewogICAgICAgICAgJyUyMSc6ICchJywKICAgICAgICAgICclMjQnOiAnJCcsCiAgICAgICAgICAnJTI3JzogJ1wnJywKICAgICAgICAgICclMjgnOiAnKCcsCiAgICAgICAgICAnJTI5JzogJyknLAogICAgICAgICAgJyUyQSc6ICcqJywKICAgICAgICAgICclMkInOiAnKycsCiAgICAgICAgICAnJTJDJzogJywnLAogICAgICAgICAgJyUzQic6ICc7JywKICAgICAgICAgICclM0QnOiAnPScsCiAgICAgICAgICAnJTQwJzogJ0AnCiAgICAgICAgfQogICAgICB9LAogICAgICAvLyBUaGVzZSBjaGFyYWN0ZXJzIGFyZSB0aGUgY2hhcmFjdGVycyBjYWxsZWQgb3V0IGJ5IFJGQzIxNDEgYXMgInJlc2VydmVkIiBjaGFyYWN0ZXJzIHRoYXQKICAgICAgLy8gc2hvdWxkIG5ldmVyIGFwcGVhciBpbiBhIFVSTiwgcGx1cyB0aGUgY29sb24gY2hhcmFjdGVyIChzZWUgbm90ZSBhYm92ZSkuCiAgICAgIGRlY29kZTogewogICAgICAgIGV4cHJlc3Npb246IC9bXC9cPyM6XS9nLAogICAgICAgIG1hcDogewogICAgICAgICAgJy8nOiAnJTJGJywKICAgICAgICAgICc/JzogJyUzRicsCiAgICAgICAgICAnIyc6ICclMjMnLAogICAgICAgICAgJzonOiAnJTNBJwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CiAgVVJJLmVuY29kZVF1ZXJ5ID0gZnVuY3Rpb24gKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkgewogICAgdmFyIGVzY2FwZWQgPSBVUkkuZW5jb2RlKHN0cmluZyArICcnKTsKICAgIGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB1bmRlZmluZWQpIHsKICAgICAgZXNjYXBlUXVlcnlTcGFjZSA9IFVSSS5lc2NhcGVRdWVyeVNwYWNlOwogICAgfQoKICAgIHJldHVybiBlc2NhcGVRdWVyeVNwYWNlID8gZXNjYXBlZC5yZXBsYWNlKC8lMjAvZywgJysnKSA6IGVzY2FwZWQ7CiAgfTsKICBVUkkuZGVjb2RlUXVlcnkgPSBmdW5jdGlvbiAoc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7CiAgICBzdHJpbmcgKz0gJyc7CiAgICBpZiAoZXNjYXBlUXVlcnlTcGFjZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGVzY2FwZVF1ZXJ5U3BhY2UgPSBVUkkuZXNjYXBlUXVlcnlTcGFjZTsKICAgIH0KCiAgICB0cnkgewogICAgICByZXR1cm4gVVJJLmRlY29kZShlc2NhcGVRdWVyeVNwYWNlID8gc3RyaW5nLnJlcGxhY2UoL1wrL2csICclMjAnKSA6IHN0cmluZyk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIC8vIHdlJ3JlIG5vdCBnb2luZyB0byBtZXNzIHdpdGggd2VpcmQgZW5jb2RpbmdzLAogICAgICAvLyBnaXZlIHVwIGFuZCByZXR1cm4gdGhlIHVuZGVjb2RlZCBvcmlnaW5hbCBzdHJpbmcKICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy84NwogICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkyCiAgICAgIHJldHVybiBzdHJpbmc7CiAgICB9CiAgfTsKICAvLyBnZW5lcmF0ZSBlbmNvZGUvZGVjb2RlIHBhdGggZnVuY3Rpb25zCiAgdmFyIF9wYXJ0cyA9IHsgJ2VuY29kZSc6ICdlbmNvZGUnLCAnZGVjb2RlJzogJ2RlY29kZScgfTsKICB2YXIgX3BhcnQ7CiAgdmFyIGdlbmVyYXRlQWNjZXNzb3IgPSBmdW5jdGlvbiBnZW5lcmF0ZUFjY2Vzc29yKF9ncm91cCwgX3BhcnQpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIFVSSVtfcGFydF0oc3RyaW5nICsgJycpLnJlcGxhY2UoVVJJLmNoYXJhY3RlcnNbX2dyb3VwXVtfcGFydF0uZXhwcmVzc2lvbiwgZnVuY3Rpb24gKGMpIHsKICAgICAgICAgIHJldHVybiBVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0XS5tYXBbY107CiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvLyB3ZSdyZSBub3QgZ29pbmcgdG8gbWVzcyB3aXRoIHdlaXJkIGVuY29kaW5ncywKICAgICAgICAvLyBnaXZlIHVwIGFuZCByZXR1cm4gdGhlIHVuZGVjb2RlZCBvcmlnaW5hbCBzdHJpbmcKICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzg3CiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MgogICAgICAgIHJldHVybiBzdHJpbmc7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgZm9yIChfcGFydCBpbiBfcGFydHMpIHsKICAgIFVSSVtfcGFydCArICdQYXRoU2VnbWVudCddID0gZ2VuZXJhdGVBY2Nlc3NvcigncGF0aG5hbWUnLCBfcGFydHNbX3BhcnRdKTsKICAgIFVSSVtfcGFydCArICdVcm5QYXRoU2VnbWVudCddID0gZ2VuZXJhdGVBY2Nlc3NvcigndXJucGF0aCcsIF9wYXJ0c1tfcGFydF0pOwogIH0KCiAgdmFyIGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uID0gZnVuY3Rpb24gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oX3NlcCwgX2NvZGluZ0Z1bmNOYW1lLCBfaW5uZXJDb2RpbmdGdW5jTmFtZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHsKICAgICAgLy8gV2h5IHBhc3MgaW4gbmFtZXMgb2YgZnVuY3Rpb25zLCByYXRoZXIgdGhhbiB0aGUgZnVuY3Rpb24gb2JqZWN0cyB0aGVtc2VsdmVzPyBUaGUKICAgICAgLy8gZGVmaW5pdGlvbnMgb2Ygc29tZSBmdW5jdGlvbnMgKGJ1dCBpbiBwYXJ0aWN1bGFyLCBVUkkuZGVjb2RlKSB3aWxsIG9jY2FzaW9uYWxseSBjaGFuZ2UgZHVlCiAgICAgIC8vIHRvIFVSSS5qcyBoYXZpbmcgSVNPODg1OSBhbmQgVW5pY29kZSBtb2Rlcy4gUGFzc2luZyBpbiB0aGUgbmFtZSBhbmQgZ2V0dGluZyBpdCB3aWxsIGVuc3VyZQogICAgICAvLyB0aGF0IHRoZSBmdW5jdGlvbnMgd2UgdXNlIGhlcmUgYXJlICJmcmVzaCIuCiAgICAgIHZhciBhY3R1YWxDb2RpbmdGdW5jOwogICAgICBpZiAoIV9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7CiAgICAgICAgYWN0dWFsQ29kaW5nRnVuYyA9IFVSSVtfY29kaW5nRnVuY05hbWVdOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdHVhbENvZGluZ0Z1bmMgPSBmdW5jdGlvbiBhY3R1YWxDb2RpbmdGdW5jKHN0cmluZykgewogICAgICAgICAgcmV0dXJuIFVSSVtfY29kaW5nRnVuY05hbWVdKFVSSVtfaW5uZXJDb2RpbmdGdW5jTmFtZV0oc3RyaW5nKSk7CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIHNlZ21lbnRzID0gKHN0cmluZyArICcnKS5zcGxpdChfc2VwKTsKCiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIHNlZ21lbnRzW2ldID0gYWN0dWFsQ29kaW5nRnVuYyhzZWdtZW50c1tpXSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzZWdtZW50cy5qb2luKF9zZXApOwogICAgfTsKICB9OwoKICAvLyBUaGlzIHRha2VzIHBsYWNlIG91dHNpZGUgdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBkb24ndCB3YW50LCBlLmcuLCBlbmNvZGVVcm5QYXRoIGZ1bmN0aW9ucy4KICBVUkkuZGVjb2RlUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCcvJywgJ2RlY29kZVBhdGhTZWdtZW50Jyk7CiAgVVJJLmRlY29kZVVyblBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignOicsICdkZWNvZGVVcm5QYXRoU2VnbWVudCcpOwogIFVSSS5yZWNvZGVQYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oJy8nLCAnZW5jb2RlUGF0aFNlZ21lbnQnLCAnZGVjb2RlJyk7CiAgVVJJLnJlY29kZVVyblBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignOicsICdlbmNvZGVVcm5QYXRoU2VnbWVudCcsICdkZWNvZGUnKTsKCiAgVVJJLmVuY29kZVJlc2VydmVkID0gZ2VuZXJhdGVBY2Nlc3NvcigncmVzZXJ2ZWQnLCAnZW5jb2RlJyk7CgogIFVSSS5wYXJzZSA9IGZ1bmN0aW9uIChzdHJpbmcsIHBhcnRzKSB7CiAgICB2YXIgcG9zOwogICAgaWYgKCFwYXJ0cykgewogICAgICBwYXJ0cyA9IHt9OwogICAgfQogICAgLy8gW3Byb3RvY29sIjovLyJbdXNlcm5hbWVbIjoicGFzc3dvcmRdIkAiXWhvc3RuYW1lWyI6InBvcnRdIi8iP11bcGF0aF1bIj8icXVlcnlzdHJpbmddWyIjImZyYWdtZW50XQoKICAgIC8vIGV4dHJhY3QgZnJhZ21lbnQKICAgIHBvcyA9IHN0cmluZy5pbmRleE9mKCcjJyk7CiAgICBpZiAocG9zID4gLTEpIHsKICAgICAgLy8gZXNjYXBpbmc/CiAgICAgIHBhcnRzLmZyYWdtZW50ID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKSB8fCBudWxsOwogICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcyk7CiAgICB9CgogICAgLy8gZXh0cmFjdCBxdWVyeQogICAgcG9zID0gc3RyaW5nLmluZGV4T2YoJz8nKTsKICAgIGlmIChwb3MgPiAtMSkgewogICAgICAvLyBlc2NhcGluZz8KICAgICAgcGFydHMucXVlcnkgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7CiAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTsKICAgIH0KCiAgICAvLyBleHRyYWN0IHByb3RvY29sCiAgICBpZiAoc3RyaW5nLnN1YnN0cmluZygwLCAyKSA9PT0gJy8vJykgewogICAgICAvLyByZWxhdGl2ZS1zY2hlbWUKICAgICAgcGFydHMucHJvdG9jb2wgPSBudWxsOwogICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDIpOwogICAgICAvLyBleHRyYWN0ICJ1c2VyOnBhc3NAaG9zdDpwb3J0IgogICAgICBzdHJpbmcgPSBVUkkucGFyc2VBdXRob3JpdHkoc3RyaW5nLCBwYXJ0cyk7CiAgICB9IGVsc2UgewogICAgICBwb3MgPSBzdHJpbmcuaW5kZXhPZignOicpOwogICAgICBpZiAocG9zID4gLTEpIHsKICAgICAgICBwYXJ0cy5wcm90b2NvbCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsOwogICAgICAgIGlmIChwYXJ0cy5wcm90b2NvbCAmJiAhcGFydHMucHJvdG9jb2wubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7CiAgICAgICAgICAvLyA6IG1heSBiZSB3aXRoaW4gdGhlIHBhdGgKICAgICAgICAgIHBhcnRzLnByb3RvY29sID0gdW5kZWZpbmVkOwogICAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxLCBwb3MgKyAzKSA9PT0gJy8vJykgewogICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAzKTsKCiAgICAgICAgICAvLyBleHRyYWN0ICJ1c2VyOnBhc3NAaG9zdDpwb3J0IgogICAgICAgICAgc3RyaW5nID0gVVJJLnBhcnNlQXV0aG9yaXR5KHN0cmluZywgcGFydHMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpOwogICAgICAgICAgcGFydHMudXJuID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvLyB3aGF0J3MgbGVmdCBtdXN0IGJlIHRoZSBwYXRoCiAgICBwYXJ0cy5wYXRoID0gc3RyaW5nOwoKICAgIC8vIGFuZCB3ZSdyZSBkb25lCiAgICByZXR1cm4gcGFydHM7CiAgfTsKICBVUkkucGFyc2VIb3N0ID0gZnVuY3Rpb24gKHN0cmluZywgcGFydHMpIHsKICAgIC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLgogICAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzCiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9ibG9iLzM4NmZkMjRmNDliMGU5ZDFhOGEwNzY1OTJhNDA0MTY4ZmFlZWNjMzQvbGliL3VybC5qcyNMMTE1LUwxMjQKICAgIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2CiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9wdWxsLzIzMwogICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcL2csICcvJyk7CgogICAgLy8gZXh0cmFjdCBob3N0OnBvcnQKICAgIHZhciBwb3MgPSBzdHJpbmcuaW5kZXhPZignLycpOwogICAgdmFyIGJyYWNrZXRQb3M7CiAgICB2YXIgdDsKCiAgICBpZiAocG9zID09PSAtMSkgewogICAgICBwb3MgPSBzdHJpbmcubGVuZ3RoOwogICAgfQoKICAgIGlmIChzdHJpbmcuY2hhckF0KDApID09PSAnWycpIHsKICAgICAgLy8gSVB2NiBob3N0IC0gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi02bWFuLXRleHQtYWRkci1yZXByZXNlbnRhdGlvbi0wNCNzZWN0aW9uLTYKICAgICAgLy8gSSBjbGFpbSBtb3N0IGNsaWVudCBzb2Z0d2FyZSBicmVha3Mgb24gSVB2NiBhbnl3YXlzLiBUbyBzaW1wbGlmeSB0aGluZ3MsIFVSSSBvbmx5IGFjY2VwdHMKICAgICAgLy8gSVB2Nitwb3J0IGluIHRoZSBmb3JtYXQgWzIwMDE6ZGI4OjoxXTo4MCAoZm9yIHRoZSB0aW1lIGJlaW5nKQogICAgICBicmFja2V0UG9zID0gc3RyaW5nLmluZGV4T2YoJ10nKTsKICAgICAgcGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDEsIGJyYWNrZXRQb3MpIHx8IG51bGw7CiAgICAgIHBhcnRzLnBvcnQgPSBzdHJpbmcuc3Vic3RyaW5nKGJyYWNrZXRQb3MgKyAyLCBwb3MpIHx8IG51bGw7CiAgICAgIGlmIChwYXJ0cy5wb3J0ID09PSAnLycpIHsKICAgICAgICBwYXJ0cy5wb3J0ID0gbnVsbDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdmFyIGZpcnN0Q29sb24gPSBzdHJpbmcuaW5kZXhPZignOicpOwogICAgICB2YXIgZmlyc3RTbGFzaCA9IHN0cmluZy5pbmRleE9mKCcvJyk7CiAgICAgIHZhciBuZXh0Q29sb24gPSBzdHJpbmcuaW5kZXhPZignOicsIGZpcnN0Q29sb24gKyAxKTsKICAgICAgaWYgKG5leHRDb2xvbiAhPT0gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IG5leHRDb2xvbiA8IGZpcnN0U2xhc2gpKSB7CiAgICAgICAgLy8gSVB2NiBob3N0IGNvbnRhaW5zIG11bHRpcGxlIGNvbG9ucyAtIGJ1dCBubyBwb3J0CiAgICAgICAgLy8gdGhpcyBub3RhdGlvbiBpcyBhY3R1YWxseSBub3QgYWxsb3dlZCBieSBSRkMgMzk4NiwgYnV0IHdlJ3JlIGEgbGliZXJhbCBwYXJzZXIKICAgICAgICBwYXJ0cy5ob3N0bmFtZSA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsOwogICAgICAgIHBhcnRzLnBvcnQgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTsKICAgICAgICBwYXJ0cy5ob3N0bmFtZSA9IHRbMF0gfHwgbnVsbDsKICAgICAgICBwYXJ0cy5wb3J0ID0gdFsxXSB8fCBudWxsOwogICAgICB9CiAgICB9CgogICAgaWYgKHBhcnRzLmhvc3RuYW1lICYmIHN0cmluZy5zdWJzdHJpbmcocG9zKS5jaGFyQXQoMCkgIT09ICcvJykgewogICAgICBwb3MrKzsKICAgICAgc3RyaW5nID0gJy8nICsgc3RyaW5nOwogICAgfQoKICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKHBvcykgfHwgJy8nOwogIH07CiAgVVJJLnBhcnNlQXV0aG9yaXR5ID0gZnVuY3Rpb24gKHN0cmluZywgcGFydHMpIHsKICAgIHN0cmluZyA9IFVSSS5wYXJzZVVzZXJpbmZvKHN0cmluZywgcGFydHMpOwogICAgcmV0dXJuIFVSSS5wYXJzZUhvc3Qoc3RyaW5nLCBwYXJ0cyk7CiAgfTsKICBVUkkucGFyc2VVc2VyaW5mbyA9IGZ1bmN0aW9uIChzdHJpbmcsIHBhcnRzKSB7CiAgICAvLyBleHRyYWN0IHVzZXJuYW1lOnBhc3N3b3JkCiAgICB2YXIgZmlyc3RTbGFzaCA9IHN0cmluZy5pbmRleE9mKCcvJyk7CiAgICB2YXIgcG9zID0gc3RyaW5nLmxhc3RJbmRleE9mKCdAJywgZmlyc3RTbGFzaCA+IC0xID8gZmlyc3RTbGFzaCA6IHN0cmluZy5sZW5ndGggLSAxKTsKICAgIHZhciB0OwoKICAgIC8vIGF1dGhvcml0eUAgbXVzdCBjb21lIGJlZm9yZSAvcGF0aAogICAgaWYgKHBvcyA+IC0xICYmIChmaXJzdFNsYXNoID09PSAtMSB8fCBwb3MgPCBmaXJzdFNsYXNoKSkgewogICAgICB0ID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpLnNwbGl0KCc6Jyk7CiAgICAgIHBhcnRzLnVzZXJuYW1lID0gdFswXSA/IFVSSS5kZWNvZGUodFswXSkgOiBudWxsOwogICAgICB0LnNoaWZ0KCk7CiAgICAgIHBhcnRzLnBhc3N3b3JkID0gdFswXSA/IFVSSS5kZWNvZGUodC5qb2luKCc6JykpIDogbnVsbDsKICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgIH0gZWxzZSB7CiAgICAgIHBhcnRzLnVzZXJuYW1lID0gbnVsbDsKICAgICAgcGFydHMucGFzc3dvcmQgPSBudWxsOwogICAgfQoKICAgIHJldHVybiBzdHJpbmc7CiAgfTsKICBVUkkucGFyc2VRdWVyeSA9IGZ1bmN0aW9uIChzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHsKICAgIGlmICghc3RyaW5nKSB7CiAgICAgIHJldHVybiB7fTsKICAgIH0KCiAgICAvLyB0aHJvdyBvdXQgdGhlIGZ1bmt5IGJ1c2luZXNzIC0gIj8iW25hbWUiPSJ2YWx1ZSImIl0rCiAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvJisvZywgJyYnKS5yZXBsYWNlKC9eXD8qJip8JiskL2csICcnKTsKCiAgICBpZiAoIXN0cmluZykgewogICAgICByZXR1cm4ge307CiAgICB9CgogICAgdmFyIGl0ZW1zID0ge307CiAgICB2YXIgc3BsaXRzID0gc3RyaW5nLnNwbGl0KCcmJyk7CiAgICB2YXIgbGVuZ3RoID0gc3BsaXRzLmxlbmd0aDsKICAgIHZhciB2LCBuYW1lLCB2YWx1ZTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIHYgPSBzcGxpdHNbaV0uc3BsaXQoJz0nKTsKICAgICAgbmFtZSA9IFVSSS5kZWNvZGVRdWVyeSh2LnNoaWZ0KCksIGVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAvLyBubyAiPSIgaXMgbnVsbCBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzCiAgICAgIHZhbHVlID0gdi5sZW5ndGggPyBVUkkuZGVjb2RlUXVlcnkodi5qb2luKCc9JyksIGVzY2FwZVF1ZXJ5U3BhY2UpIDogbnVsbDsKCiAgICAgIGlmIChoYXNPd24uY2FsbChpdGVtcywgbmFtZSkpIHsKICAgICAgICBpZiAodHlwZW9mIGl0ZW1zW25hbWVdID09PSAnc3RyaW5nJyB8fCBpdGVtc1tuYW1lXSA9PT0gbnVsbCkgewogICAgICAgICAgaXRlbXNbbmFtZV0gPSBbaXRlbXNbbmFtZV1dOwogICAgICAgIH0KCiAgICAgICAgaXRlbXNbbmFtZV0ucHVzaCh2YWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaXRlbXNbbmFtZV0gPSB2YWx1ZTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBpdGVtczsKICB9OwoKICBVUkkuYnVpbGQgPSBmdW5jdGlvbiAocGFydHMpIHsKICAgIHZhciB0ID0gJyc7CgogICAgaWYgKHBhcnRzLnByb3RvY29sKSB7CiAgICAgIHQgKz0gcGFydHMucHJvdG9jb2wgKyAnOic7CiAgICB9CgogICAgaWYgKCFwYXJ0cy51cm4gJiYgKHQgfHwgcGFydHMuaG9zdG5hbWUpKSB7CiAgICAgIHQgKz0gJy8vJzsKICAgIH0KCiAgICB0ICs9IFVSSS5idWlsZEF1dGhvcml0eShwYXJ0cykgfHwgJyc7CgogICAgaWYgKHR5cGVvZiBwYXJ0cy5wYXRoID09PSAnc3RyaW5nJykgewogICAgICBpZiAocGFydHMucGF0aC5jaGFyQXQoMCkgIT09ICcvJyAmJiB0eXBlb2YgcGFydHMuaG9zdG5hbWUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgdCArPSAnLyc7CiAgICAgIH0KCiAgICAgIHQgKz0gcGFydHMucGF0aDsKICAgIH0KCiAgICBpZiAodHlwZW9mIHBhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJyAmJiBwYXJ0cy5xdWVyeSkgewogICAgICB0ICs9ICc/JyArIHBhcnRzLnF1ZXJ5OwogICAgfQoKICAgIGlmICh0eXBlb2YgcGFydHMuZnJhZ21lbnQgPT09ICdzdHJpbmcnICYmIHBhcnRzLmZyYWdtZW50KSB7CiAgICAgIHQgKz0gJyMnICsgcGFydHMuZnJhZ21lbnQ7CiAgICB9CiAgICByZXR1cm4gdDsKICB9OwogIFVSSS5idWlsZEhvc3QgPSBmdW5jdGlvbiAocGFydHMpIHsKICAgIHZhciB0ID0gJyc7CgogICAgaWYgKCFwYXJ0cy5ob3N0bmFtZSkgewogICAgICByZXR1cm4gJyc7CiAgICB9IGVsc2UgaWYgKFVSSS5pcDZfZXhwcmVzc2lvbi50ZXN0KHBhcnRzLmhvc3RuYW1lKSkgewogICAgICB0ICs9ICdbJyArIHBhcnRzLmhvc3RuYW1lICsgJ10nOwogICAgfSBlbHNlIHsKICAgICAgdCArPSBwYXJ0cy5ob3N0bmFtZTsKICAgIH0KCiAgICBpZiAocGFydHMucG9ydCkgewogICAgICB0ICs9ICc6JyArIHBhcnRzLnBvcnQ7CiAgICB9CgogICAgcmV0dXJuIHQ7CiAgfTsKICBVUkkuYnVpbGRBdXRob3JpdHkgPSBmdW5jdGlvbiAocGFydHMpIHsKICAgIHJldHVybiBVUkkuYnVpbGRVc2VyaW5mbyhwYXJ0cykgKyBVUkkuYnVpbGRIb3N0KHBhcnRzKTsKICB9OwogIFVSSS5idWlsZFVzZXJpbmZvID0gZnVuY3Rpb24gKHBhcnRzKSB7CiAgICB2YXIgdCA9ICcnOwoKICAgIGlmIChwYXJ0cy51c2VybmFtZSkgewogICAgICB0ICs9IFVSSS5lbmNvZGUocGFydHMudXNlcm5hbWUpOwoKICAgICAgaWYgKHBhcnRzLnBhc3N3b3JkKSB7CiAgICAgICAgdCArPSAnOicgKyBVUkkuZW5jb2RlKHBhcnRzLnBhc3N3b3JkKTsKICAgICAgfQoKICAgICAgdCArPSAnQCc7CiAgICB9CgogICAgcmV0dXJuIHQ7CiAgfTsKICBVUkkuYnVpbGRRdWVyeSA9IGZ1bmN0aW9uIChkYXRhLCBkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIGVzY2FwZVF1ZXJ5U3BhY2UpIHsKICAgIC8vIGFjY29yZGluZyB0byBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2IG9yIGh0dHA6Ly9sYWJzLmFwYWNoZS5vcmcvd2ViYXJjaC91cmkvcmZjL3JmYzM5ODYuaHRtbAogICAgLy8gYmVpbmcgwrstLl9+ISQmJygpKissOz06QC8/wqsgJUhFWCBhbmQgYWxudW0gYXJlIGFsbG93ZWQKICAgIC8vIHRoZSBSRkMgZXhwbGljaXRseSBzdGF0ZXMgPy9mb28gYmVpbmcgYSB2YWxpZCB1c2UgY2FzZSwgbm8gbWVudGlvbiBvZiBwYXJhbWV0ZXIgc3ludGF4IQogICAgLy8gVVJJLmpzIHRyZWF0cyB0aGUgcXVlcnkgc3RyaW5nIGFzIGJlaW5nIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZAogICAgLy8gc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAvaW50ZXJhY3QvZm9ybXMuaHRtbCNmb3JtLWNvbnRlbnQtdHlwZQoKICAgIHZhciB0ID0gJyc7CiAgICB2YXIgdW5pcXVlLCBrZXksIGksIGxlbmd0aDsKICAgIGZvciAoa2V5IGluIGRhdGEpIHsKICAgICAgaWYgKGhhc093bi5jYWxsKGRhdGEsIGtleSkgJiYga2V5KSB7CiAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtrZXldKSkgewogICAgICAgICAgdW5pcXVlID0ge307CiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBkYXRhW2tleV0ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGRhdGFba2V5XVtpXSAhPT0gdW5kZWZpbmVkICYmIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAnJ10gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHQgKz0gJyYnICsgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIoa2V5LCBkYXRhW2tleV1baV0sIGVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgICAgIGlmIChkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgIT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAnJ10gPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHQgKz0gJyYnICsgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIoa2V5LCBkYXRhW2tleV0sIGVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0LnN1YnN0cmluZygxKTsKICB9OwogIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSB7CiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwL2ludGVyYWN0L2Zvcm1zLmh0bWwjZm9ybS1jb250ZW50LXR5cGUgLS0gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkCiAgICAvLyBkb24ndCBhcHBlbmQgIj0iIGZvciBudWxsIHZhbHVlcywgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjdXJsLXBhcmFtZXRlci1zZXJpYWxpemF0aW9uCiAgICByZXR1cm4gVVJJLmVuY29kZVF1ZXJ5KG5hbWUsIGVzY2FwZVF1ZXJ5U3BhY2UpICsgKHZhbHVlICE9PSBudWxsID8gJz0nICsgVVJJLmVuY29kZVF1ZXJ5KHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSA6ICcnKTsKICB9OwoKICBVUkkuYWRkUXVlcnkgPSBmdW5jdGlvbiAoZGF0YSwgbmFtZSwgdmFsdWUpIHsKICAgIGlmICgodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG5hbWUpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHsKICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkgewogICAgICAgICAgVVJJLmFkZFF1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7CiAgICAgIGlmIChkYXRhW25hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBkYXRhW25hbWVdID0gdmFsdWU7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhW25hbWVdID09PSAnc3RyaW5nJykgewogICAgICAgIGRhdGFbbmFtZV0gPSBbZGF0YVtuYW1lXV07CiAgICAgIH0KCiAgICAgIGlmICghaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICB2YWx1ZSA9IFt2YWx1ZV07CiAgICAgIH0KCiAgICAgIGRhdGFbbmFtZV0gPSAoZGF0YVtuYW1lXSB8fCBbXSkuY29uY2F0KHZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7CiAgICB9CiAgfTsKICBVUkkucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbiAoZGF0YSwgbmFtZSwgdmFsdWUpIHsKICAgIHZhciBpLCBsZW5ndGgsIGtleTsKCiAgICBpZiAoaXNBcnJheShuYW1lKSkgewogICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBuYW1lLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgZGF0YVtuYW1lW2ldXSA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgfSBlbHNlIGlmIChnZXRUeXBlKG5hbWUpID09PSAnUmVnRXhwJykgewogICAgICBmb3IgKGtleSBpbiBkYXRhKSB7CiAgICAgICAgaWYgKG5hbWUudGVzdChrZXkpKSB7CiAgICAgICAgICBkYXRhW2tleV0gPSB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKCh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobmFtZSkpID09PSAnb2JqZWN0JykgewogICAgICBmb3IgKGtleSBpbiBuYW1lKSB7CiAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHsKICAgICAgICAgIFVSSS5yZW1vdmVRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykgewogICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChnZXRUeXBlKHZhbHVlKSA9PT0gJ1JlZ0V4cCcpIHsKICAgICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSAmJiB2YWx1ZS50ZXN0KGRhdGFbbmFtZV0pKSB7CiAgICAgICAgICAgIGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZGF0YVtuYW1lXSA9PT0gU3RyaW5nKHZhbHVlKSAmJiAoIWlzQXJyYXkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA9PT0gMSkpIHsKICAgICAgICAgIGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7CiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGFbbmFtZV0pKSB7CiAgICAgICAgICBkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBkYXRhW25hbWVdID0gdW5kZWZpbmVkOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkucmVtb3ZlUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nLCBSZWdFeHAgYXMgdGhlIGZpcnN0IHBhcmFtZXRlcicpOwogICAgfQogIH07CiAgVVJJLmhhc1F1ZXJ5ID0gZnVuY3Rpb24gKGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkgewogICAgc3dpdGNoIChnZXRUeXBlKG5hbWUpKSB7CiAgICAgIGNhc2UgJ1N0cmluZyc6CiAgICAgICAgLy8gTm90aGluZyB0byBkbyBoZXJlCiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICdSZWdFeHAnOgogICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7CiAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoZGF0YSwga2V5KSkgewogICAgICAgICAgICBpZiAobmFtZS50ZXN0KGtleSkgJiYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgVVJJLmhhc1F1ZXJ5KGRhdGEsIGtleSwgdmFsdWUpKSkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICBjYXNlICdPYmplY3QnOgogICAgICAgIGZvciAodmFyIF9rZXkgaW4gbmFtZSkgewogICAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIF9rZXkpKSB7CiAgICAgICAgICAgIGlmICghVVJJLmhhc1F1ZXJ5KGRhdGEsIF9rZXksIG5hbWVbX2tleV0pKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyBhIHN0cmluZywgcmVndWxhciBleHByZXNzaW9uIG9yIG9iamVjdCBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTsKICAgIH0KCiAgICBzd2l0Y2ggKGdldFR5cGUodmFsdWUpKSB7CiAgICAgIGNhc2UgJ1VuZGVmaW5lZCc6CiAgICAgICAgLy8gdHJ1ZSBpZiBleGlzdHMgKGJ1dCBtYXkgYmUgZW1wdHkpCiAgICAgICAgcmV0dXJuIG5hbWUgaW4gZGF0YTsgLy8gZGF0YVtuYW1lXSAhPT0gdW5kZWZpbmVkOwoKICAgICAgY2FzZSAnQm9vbGVhbic6CiAgICAgICAgLy8gdHJ1ZSBpZiBleGlzdHMgYW5kIG5vbi1lbXB0eQogICAgICAgIHZhciBfYm9vbHkgPSBCb29sZWFuKGlzQXJyYXkoZGF0YVtuYW1lXSkgPyBkYXRhW25hbWVdLmxlbmd0aCA6IGRhdGFbbmFtZV0pOwogICAgICAgIHJldHVybiB2YWx1ZSA9PT0gX2Jvb2x5OwoKICAgICAgY2FzZSAnRnVuY3Rpb24nOgogICAgICAgIC8vIGFsbG93IGNvbXBsZXggY29tcGFyaXNvbgogICAgICAgIHJldHVybiAhIXZhbHVlKGRhdGFbbmFtZV0sIG5hbWUsIGRhdGEpOwoKICAgICAgY2FzZSAnQXJyYXknOgogICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdmFyIG9wID0gd2l0aGluQXJyYXkgPyBhcnJheUNvbnRhaW5zIDogYXJyYXlzRXF1YWw7CiAgICAgICAgcmV0dXJuIG9wKGRhdGFbbmFtZV0sIHZhbHVlKTsKCiAgICAgIGNhc2UgJ1JlZ0V4cCc6CiAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7CiAgICAgICAgICByZXR1cm4gQm9vbGVhbihkYXRhW25hbWVdICYmIGRhdGFbbmFtZV0ubWF0Y2godmFsdWUpKTsKICAgICAgICB9CgogICAgICAgIGlmICghd2l0aGluQXJyYXkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBhcnJheUNvbnRhaW5zKGRhdGFbbmFtZV0sIHZhbHVlKTsKCiAgICAgIGNhc2UgJ051bWJlcic6CiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpOwogICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgIGNhc2UgJ1N0cmluZyc6CiAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7CiAgICAgICAgICByZXR1cm4gZGF0YVtuYW1lXSA9PT0gdmFsdWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXdpdGhpbkFycmF5KSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7CgogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5oYXNRdWVyeSgpIGFjY2VwdHMgdW5kZWZpbmVkLCBib29sZWFuLCBzdHJpbmcsIG51bWJlciwgUmVnRXhwLCBGdW5jdGlvbiBhcyB0aGUgdmFsdWUgcGFyYW1ldGVyJyk7CiAgICB9CiAgfTsKCiAgVVJJLmNvbW1vblBhdGggPSBmdW5jdGlvbiAob25lLCB0d28pIHsKICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihvbmUubGVuZ3RoLCB0d28ubGVuZ3RoKTsKICAgIHZhciBwb3M7CgogICAgLy8gZmluZCBmaXJzdCBub24tbWF0Y2hpbmcgY2hhcmFjdGVyCiAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHsKICAgICAgaWYgKG9uZS5jaGFyQXQocG9zKSAhPT0gdHdvLmNoYXJBdChwb3MpKSB7CiAgICAgICAgcG9zLS07CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBpZiAocG9zIDwgMSkgewogICAgICByZXR1cm4gb25lLmNoYXJBdCgwKSA9PT0gdHdvLmNoYXJBdCgwKSAmJiBvbmUuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJzsKICAgIH0KCiAgICAvLyByZXZlcnQgdG8gbGFzdCAvCiAgICBpZiAob25lLmNoYXJBdChwb3MpICE9PSAnLycgfHwgdHdvLmNoYXJBdChwb3MpICE9PSAnLycpIHsKICAgICAgcG9zID0gb25lLnN1YnN0cmluZygwLCBwb3MpLmxhc3RJbmRleE9mKCcvJyk7CiAgICB9CgogICAgcmV0dXJuIG9uZS5zdWJzdHJpbmcoMCwgcG9zICsgMSk7CiAgfTsKCiAgVVJJLndpdGhpblN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmcsIGNhbGxiYWNrLCBvcHRpb25zKSB7CiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgdmFyIF9zdGFydCA9IG9wdGlvbnMuc3RhcnQgfHwgVVJJLmZpbmRVcmkuc3RhcnQ7CiAgICB2YXIgX2VuZCA9IG9wdGlvbnMuZW5kIHx8IFVSSS5maW5kVXJpLmVuZDsKICAgIHZhciBfdHJpbSA9IG9wdGlvbnMudHJpbSB8fCBVUkkuZmluZFVyaS50cmltOwogICAgdmFyIF9hdHRyaWJ1dGVPcGVuID0gL1thLXowLTktXT1bIiddPyQvaTsKCiAgICBfc3RhcnQubGFzdEluZGV4ID0gMDsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIHZhciBtYXRjaCA9IF9zdGFydC5leGVjKHN0cmluZyk7CiAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgdmFyIHN0YXJ0ID0gbWF0Y2guaW5kZXg7CiAgICAgIGlmIChvcHRpb25zLmlnbm9yZUh0bWwpIHsKICAgICAgICAvLyBhdHRyaWJ1dChlPVsiJ10/JCkKICAgICAgICB2YXIgYXR0cmlidXRlT3BlbiA9IHN0cmluZy5zbGljZShNYXRoLm1heChzdGFydCAtIDMsIDApLCBzdGFydCk7CiAgICAgICAgaWYgKGF0dHJpYnV0ZU9wZW4gJiYgX2F0dHJpYnV0ZU9wZW4udGVzdChhdHRyaWJ1dGVPcGVuKSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgZW5kID0gc3RhcnQgKyBzdHJpbmcuc2xpY2Uoc3RhcnQpLnNlYXJjaChfZW5kKTsKICAgICAgdmFyIHNsaWNlID0gc3RyaW5nLnNsaWNlKHN0YXJ0LCBlbmQpLnJlcGxhY2UoX3RyaW0sICcnKTsKICAgICAgaWYgKG9wdGlvbnMuaWdub3JlICYmIG9wdGlvbnMuaWdub3JlLnRlc3Qoc2xpY2UpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGVuZCA9IHN0YXJ0ICsgc2xpY2UubGVuZ3RoOwogICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soc2xpY2UsIHN0YXJ0LCBlbmQsIHN0cmluZyk7CiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBzdGFydCkgKyByZXN1bHQgKyBzdHJpbmcuc2xpY2UoZW5kKTsKICAgICAgX3N0YXJ0Lmxhc3RJbmRleCA9IHN0YXJ0ICsgcmVzdWx0Lmxlbmd0aDsKICAgIH0KCiAgICBfc3RhcnQubGFzdEluZGV4ID0gMDsKICAgIHJldHVybiBzdHJpbmc7CiAgfTsKCiAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUgPSBmdW5jdGlvbiAodikgewogICAgLy8gVGhlb3JldGljYWxseSBVUklzIGFsbG93IHBlcmNlbnQtZW5jb2RpbmcgaW4gSG9zdG5hbWVzIChhY2NvcmRpbmcgdG8gUkZDIDM5ODYpCiAgICAvLyB0aGV5IGFyZSBub3QgcGFydCBvZiBETlMgYW5kIHRoZXJlZm9yZSBpZ25vcmVkIGJ5IFVSSS5qcwoKICAgIGlmICh2Lm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7CiAgICAgIC8vIHRlc3QgcHVueWNvZGUKICAgICAgaWYgKCFwdW55Y29kZSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lICInICsgdiArICciIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dIGFuZCBQdW55Y29kZS5qcyBpcyBub3QgYXZhaWxhYmxlJyk7CiAgICAgIH0KCiAgICAgIGlmIChwdW55Y29kZS50b0FTQ0lJKHYpLm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgIicgKyB2ICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTsKICAgICAgfQogICAgfQogIH07CgogIC8vIG5vQ29uZmxpY3QKICBVUkkubm9Db25mbGljdCA9IGZ1bmN0aW9uIChyZW1vdmVBbGwpIHsKICAgIGlmIChyZW1vdmVBbGwpIHsKICAgICAgdmFyIHVuY29uZmxpY3RlZCA9IHsKICAgICAgICBVUkk6IHRoaXMubm9Db25mbGljdCgpCiAgICAgIH07CgogICAgICBpZiAocm9vdC5VUklUZW1wbGF0ZSAmJiB0eXBlb2Ygcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdW5jb25mbGljdGVkLlVSSVRlbXBsYXRlID0gcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0KCk7CiAgICAgIH0KCiAgICAgIGlmIChyb290LklQdjYgJiYgdHlwZW9mIHJvb3QuSVB2Ni5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdW5jb25mbGljdGVkLklQdjYgPSByb290LklQdjYubm9Db25mbGljdCgpOwogICAgICB9CgogICAgICBpZiAocm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgJiYgdHlwZW9mIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB1bmNvbmZsaWN0ZWQuU2Vjb25kTGV2ZWxEb21haW5zID0gcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMubm9Db25mbGljdCgpOwogICAgICB9CgogICAgICByZXR1cm4gdW5jb25mbGljdGVkOwogICAgfSBlbHNlIGlmIChyb290LlVSSSA9PT0gdGhpcykgewogICAgICByb290LlVSSSA9IF9VUkk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgcC5idWlsZCA9IGZ1bmN0aW9uIChkZWZlckJ1aWxkKSB7CiAgICBpZiAoZGVmZXJCdWlsZCA9PT0gdHJ1ZSkgewogICAgICB0aGlzLl9kZWZlcnJlZF9idWlsZCA9IHRydWU7CiAgICB9IGVsc2UgaWYgKGRlZmVyQnVpbGQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9kZWZlcnJlZF9idWlsZCkgewogICAgICB0aGlzLl9zdHJpbmcgPSBVUkkuYnVpbGQodGhpcy5fcGFydHMpOwogICAgICB0aGlzLl9kZWZlcnJlZF9idWlsZCA9IGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07CgogIHAuY2xvbmUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gbmV3IFVSSSh0aGlzKTsKICB9OwoKICBwLnZhbHVlT2YgPSBwLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuYnVpbGQoZmFsc2UpLl9zdHJpbmc7CiAgfTsKCiAgZnVuY3Rpb24gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcihfcGFydCkgewogICAgcmV0dXJuIGZ1bmN0aW9uICh2LCBidWlsZCkgewogICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0XSB8fCAnJzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9wYXJ0c1tfcGFydF0gPSB2IHx8IG51bGw7CiAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcihfcGFydCwgX2tleSkgewogICAgcmV0dXJuIGZ1bmN0aW9uICh2LCBidWlsZCkgewogICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0XSB8fCAnJzsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodiAhPT0gbnVsbCkgewogICAgICAgICAgdiA9IHYgKyAnJzsKICAgICAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gX2tleSkgewogICAgICAgICAgICB2ID0gdi5zdWJzdHJpbmcoMSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9wYXJ0c1tfcGFydF0gPSB2OwogICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfTsKICB9CgogIHAucHJvdG9jb2wgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwcm90b2NvbCcpOwogIHAudXNlcm5hbWUgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCd1c2VybmFtZScpOwogIHAucGFzc3dvcmQgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwYXNzd29yZCcpOwogIHAuaG9zdG5hbWUgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdob3N0bmFtZScpOwogIHAucG9ydCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3BvcnQnKTsKICBwLnF1ZXJ5ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcigncXVlcnknLCAnPycpOwogIHAuZnJhZ21lbnQgPSBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKCdmcmFnbWVudCcsICcjJyk7CgogIHAuc2VhcmNoID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICB2YXIgdCA9IHRoaXMucXVlcnkodiwgYnVpbGQpOwogICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnc3RyaW5nJyAmJiB0Lmxlbmd0aCA/ICc/JyArIHQgOiB0OwogIH07CiAgcC5oYXNoID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICB2YXIgdCA9IHRoaXMuZnJhZ21lbnQodiwgYnVpbGQpOwogICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnc3RyaW5nJyAmJiB0Lmxlbmd0aCA/ICcjJyArIHQgOiB0OwogIH07CgogIHAucGF0aG5hbWUgPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkgewogICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aCB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAnLycgOiAnJyk7CiAgICAgIHJldHVybiB2ID8gKHRoaXMuX3BhcnRzLnVybiA/IFVSSS5kZWNvZGVVcm5QYXRoIDogVVJJLmRlY29kZVBhdGgpKHJlcykgOiByZXM7CiAgICB9IGVsc2UgewogICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHYgPyBVUkkucmVjb2RlVXJuUGF0aCh2KSA6ICcnOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB2ID8gVVJJLnJlY29kZVBhdGgodikgOiAnLyc7CiAgICAgIH0KICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9OwogIHAucGF0aCA9IHAucGF0aG5hbWU7CiAgcC5ocmVmID0gZnVuY3Rpb24gKGhyZWYsIGJ1aWxkKSB7CiAgICB2YXIga2V5OwoKICAgIGlmIChocmVmID09PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICAgIH0KCiAgICB0aGlzLl9zdHJpbmcgPSAnJzsKICAgIHRoaXMuX3BhcnRzID0gVVJJLl9wYXJ0cygpOwoKICAgIHZhciBfVVJJID0gaHJlZiBpbnN0YW5jZW9mIFVSSTsKICAgIHZhciBfb2JqZWN0ID0gKHR5cGVvZiBocmVmID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihocmVmKSkgPT09ICdvYmplY3QnICYmIChocmVmLmhvc3RuYW1lIHx8IGhyZWYucGF0aCB8fCBocmVmLnBhdGhuYW1lKTsKICAgIGlmIChocmVmLm5vZGVOYW1lKSB7CiAgICAgIHZhciBhdHRyaWJ1dGUgPSBVUkkuZ2V0RG9tQXR0cmlidXRlKGhyZWYpOwogICAgICBocmVmID0gaHJlZlthdHRyaWJ1dGVdIHx8ICcnOwogICAgICBfb2JqZWN0ID0gZmFsc2U7CiAgICB9CgogICAgLy8gd2luZG93LmxvY2F0aW9uIGlzIHJlcG9ydGVkIHRvIGJlIGFuIG9iamVjdCwgYnV0IGl0J3Mgbm90IHRoZSBzb3J0CiAgICAvLyBvZiBvYmplY3Qgd2UncmUgbG9va2luZyBmb3I6CiAgICAvLyAqIGxvY2F0aW9uLnByb3RvY29sIGVuZHMgd2l0aCBhIGNvbG9uCiAgICAvLyAqIGxvY2F0aW9uLnF1ZXJ5ICE9IG9iamVjdC5zZWFyY2gKICAgIC8vICogbG9jYXRpb24uaGFzaCAhPSBvYmplY3QuZnJhZ21lbnQKICAgIC8vIHNpbXBseSBzZXJpYWxpemluZyB0aGUgdW5rbm93biBvYmplY3Qgc2hvdWxkIGRvIHRoZSB0cmljawogICAgLy8gKGZvciBsb2NhdGlvbiwgbm90IGZvciBldmVyeXRoaW5nLi4uKQogICAgaWYgKCFfVVJJICYmIF9vYmplY3QgJiYgaHJlZi5wYXRobmFtZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGhyZWYgPSBocmVmLnRvU3RyaW5nKCk7CiAgICB9CgogICAgaWYgKHR5cGVvZiBocmVmID09PSAnc3RyaW5nJyB8fCBocmVmIGluc3RhbmNlb2YgU3RyaW5nKSB7CiAgICAgIHRoaXMuX3BhcnRzID0gVVJJLnBhcnNlKFN0cmluZyhocmVmKSwgdGhpcy5fcGFydHMpOwogICAgfSBlbHNlIGlmIChfVVJJIHx8IF9vYmplY3QpIHsKICAgICAgdmFyIHNyYyA9IF9VUkkgPyBocmVmLl9wYXJ0cyA6IGhyZWY7CiAgICAgIGZvciAoa2V5IGluIHNyYykgewogICAgICAgIGlmIChoYXNPd24uY2FsbCh0aGlzLl9wYXJ0cywga2V5KSkgewogICAgICAgICAgdGhpcy5fcGFydHNba2V5XSA9IHNyY1trZXldOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpbnB1dCcpOwogICAgfQoKICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIGlkZW50aWZpY2F0aW9uIGFjY2Vzc29ycwogIHAuaXMgPSBmdW5jdGlvbiAod2hhdCkgewogICAgdmFyIGlwID0gZmFsc2U7CiAgICB2YXIgaXA0ID0gZmFsc2U7CiAgICB2YXIgaXA2ID0gZmFsc2U7CiAgICB2YXIgbmFtZSA9IGZhbHNlOwogICAgdmFyIHNsZCA9IGZhbHNlOwogICAgdmFyIGlkbiA9IGZhbHNlOwogICAgdmFyIHB1bnljb2RlID0gZmFsc2U7CiAgICB2YXIgcmVsYXRpdmUgPSAhdGhpcy5fcGFydHMudXJuOwoKICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkgewogICAgICByZWxhdGl2ZSA9IGZhbHNlOwogICAgICBpcDQgPSBVUkkuaXA0X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgIGlwNiA9IFVSSS5pcDZfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgaXAgPSBpcDQgfHwgaXA2OwogICAgICBuYW1lID0gIWlwOwogICAgICBzbGQgPSBuYW1lICYmIFNMRCAmJiBTTEQuaGFzKHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgaWRuID0gbmFtZSAmJiBVUkkuaWRuX2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgIHB1bnljb2RlID0gbmFtZSAmJiBVUkkucHVueWNvZGVfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgIH0KCiAgICBzd2l0Y2ggKHdoYXQudG9Mb3dlckNhc2UoKSkgewogICAgICBjYXNlICdyZWxhdGl2ZSc6CiAgICAgICAgcmV0dXJuIHJlbGF0aXZlOwoKICAgICAgY2FzZSAnYWJzb2x1dGUnOgogICAgICAgIHJldHVybiAhcmVsYXRpdmU7CgogICAgICAvLyBob3N0bmFtZSBpZGVudGlmaWNhdGlvbgogICAgICBjYXNlICdkb21haW4nOgogICAgICBjYXNlICduYW1lJzoKICAgICAgICByZXR1cm4gbmFtZTsKCiAgICAgIGNhc2UgJ3NsZCc6CiAgICAgICAgcmV0dXJuIHNsZDsKCiAgICAgIGNhc2UgJ2lwJzoKICAgICAgICByZXR1cm4gaXA7CgogICAgICBjYXNlICdpcDQnOgogICAgICBjYXNlICdpcHY0JzoKICAgICAgY2FzZSAnaW5ldDQnOgogICAgICAgIHJldHVybiBpcDQ7CgogICAgICBjYXNlICdpcDYnOgogICAgICBjYXNlICdpcHY2JzoKICAgICAgY2FzZSAnaW5ldDYnOgogICAgICAgIHJldHVybiBpcDY7CgogICAgICBjYXNlICdpZG4nOgogICAgICAgIHJldHVybiBpZG47CgogICAgICBjYXNlICd1cmwnOgogICAgICAgIHJldHVybiAhdGhpcy5fcGFydHMudXJuOwoKICAgICAgY2FzZSAndXJuJzoKICAgICAgICByZXR1cm4gISF0aGlzLl9wYXJ0cy51cm47CgogICAgICBjYXNlICdwdW55Y29kZSc6CiAgICAgICAgcmV0dXJuIHB1bnljb2RlOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH07CgogIC8vIGNvbXBvbmVudCBzcGVjaWZpYyBpbnB1dCB2YWxpZGF0aW9uCiAgdmFyIF9wcm90b2NvbCA9IHAucHJvdG9jb2w7CiAgdmFyIF9wb3J0ID0gcC5wb3J0OwogIHZhciBfaG9zdG5hbWUgPSBwLmhvc3RuYW1lOwoKICBwLnByb3RvY29sID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmICh2KSB7CiAgICAgICAgLy8gYWNjZXB0IHRyYWlsaW5nIDovLwogICAgICAgIHYgPSB2LnJlcGxhY2UoLzooXC9cLyk/JC8sICcnKTsKCiAgICAgICAgaWYgKCF2Lm1hdGNoKFVSSS5wcm90b2NvbF9leHByZXNzaW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdG9jb2wgIicgKyB2ICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuKy1dIG9yIGRvZXNuXCd0IHN0YXJ0IHdpdGggW0EtWl0nKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBfcHJvdG9jb2wuY2FsbCh0aGlzLCB2LCBidWlsZCk7CiAgfTsKICBwLnNjaGVtZSA9IHAucHJvdG9jb2w7CiAgcC5wb3J0ID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7CiAgICB9CgogICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgewogICAgICBpZiAodiA9PT0gMCkgewogICAgICAgIHYgPSBudWxsOwogICAgICB9CgogICAgICBpZiAodikgewogICAgICAgIHYgKz0gJyc7CiAgICAgICAgaWYgKHYuY2hhckF0KDApID09PSAnOicpIHsKICAgICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTsKICAgICAgICB9CgogICAgICAgIGlmICh2Lm1hdGNoKC9bXjAtOV0vKSkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUG9ydCAiJyArIHYgKyAnIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gWzAtOV0nKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBfcG9ydC5jYWxsKHRoaXMsIHYsIGJ1aWxkKTsKICB9OwogIHAuaG9zdG5hbWUgPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpczsKICAgIH0KCiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHZhciB4ID0ge307CiAgICAgIHZhciByZXMgPSBVUkkucGFyc2VIb3N0KHYsIHgpOwogICAgICBpZiAocmVzICE9PSAnLycpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSAiJyArIHYgKyAnIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXScpOwogICAgICB9CgogICAgICB2ID0geC5ob3N0bmFtZTsKICAgIH0KICAgIHJldHVybiBfaG9zdG5hbWUuY2FsbCh0aGlzLCB2LCBidWlsZCk7CiAgfTsKCiAgLy8gY29tcG91bmQgYWNjZXNzb3JzCiAgcC5vcmlnaW4gPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpczsKICAgIH0KCiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2woKTsKICAgICAgdmFyIGF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5KCk7CiAgICAgIGlmICghYXV0aG9yaXR5KSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICByZXR1cm4gKHByb3RvY29sID8gcHJvdG9jb2wgKyAnOi8vJyA6ICcnKSArIHRoaXMuYXV0aG9yaXR5KCk7CiAgICB9IGVsc2UgewogICAgICB2YXIgb3JpZ2luID0gVVJJKHYpOwogICAgICB0aGlzLnByb3RvY29sKG9yaWdpbi5wcm90b2NvbCgpKS5hdXRob3JpdHkob3JpZ2luLmF1dGhvcml0eSgpKS5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9OwogIHAuaG9zdCA9IGZ1bmN0aW9uICh2LCBidWlsZCkgewogICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzOwogICAgfQoKICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gVVJJLmJ1aWxkSG9zdCh0aGlzLl9wYXJ0cykgOiAnJzsKICAgIH0gZWxzZSB7CiAgICAgIHZhciByZXMgPSBVUkkucGFyc2VIb3N0KHYsIHRoaXMuX3BhcnRzKTsKICAgICAgaWYgKHJlcyAhPT0gJy8nKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgIicgKyB2ICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTsKICAgICAgfQoKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9OwogIHAuYXV0aG9yaXR5ID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7CiAgICB9CgogICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRBdXRob3JpdHkodGhpcy5fcGFydHMpIDogJyc7CiAgICB9IGVsc2UgewogICAgICB2YXIgcmVzID0gVVJJLnBhcnNlQXV0aG9yaXR5KHYsIHRoaXMuX3BhcnRzKTsKICAgICAgaWYgKHJlcyAhPT0gJy8nKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgIicgKyB2ICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTsKICAgICAgfQoKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9OwogIHAudXNlcmluZm8gPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpczsKICAgIH0KCiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmICghdGhpcy5fcGFydHMudXNlcm5hbWUpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KCiAgICAgIHZhciB0ID0gVVJJLmJ1aWxkVXNlcmluZm8odGhpcy5fcGFydHMpOwogICAgICByZXR1cm4gdC5zdWJzdHJpbmcoMCwgdC5sZW5ndGggLSAxKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICh2W3YubGVuZ3RoIC0gMV0gIT09ICdAJykgewogICAgICAgIHYgKz0gJ0AnOwogICAgICB9CgogICAgICBVUkkucGFyc2VVc2VyaW5mbyh2LCB0aGlzLl9wYXJ0cyk7CiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfTsKICBwLnJlc291cmNlID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICB2YXIgcGFydHM7CgogICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gdGhpcy5wYXRoKCkgKyB0aGlzLnNlYXJjaCgpICsgdGhpcy5oYXNoKCk7CiAgICB9CgogICAgcGFydHMgPSBVUkkucGFyc2Uodik7CiAgICB0aGlzLl9wYXJ0cy5wYXRoID0gcGFydHMucGF0aDsKICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gcGFydHMucXVlcnk7CiAgICB0aGlzLl9wYXJ0cy5mcmFnbWVudCA9IHBhcnRzLmZyYWdtZW50OwogICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gZnJhY3Rpb24gYWNjZXNzb3JzCiAgcC5zdWJkb21haW4gPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpczsKICAgIH0KCiAgICAvLyBjb252ZW5pZW5jZSwgcmV0dXJuICJ3d3ciIGZyb20gInd3dy5leGFtcGxlLm9yZyIKICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHsKICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICAvLyBncmFiIGRvbWFpbiBhbmQgYWRkIGFub3RoZXIgc2VnbWVudAogICAgICB2YXIgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGggLSAxOwogICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGVuZCkgfHwgJyc7CiAgICB9IGVsc2UgewogICAgICB2YXIgZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMuZG9tYWluKCkubGVuZ3RoOwogICAgICB2YXIgc3ViID0gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGUpOwogICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgZXNjYXBlUmVnRXgoc3ViKSk7CgogICAgICBpZiAodiAmJiB2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpICE9PSAnLicpIHsKICAgICAgICB2ICs9ICcuJzsKICAgICAgfQoKICAgICAgaWYgKHYpIHsKICAgICAgICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2KTsKICAgICAgfQoKICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpOwogICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07CiAgcC5kb21haW4gPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpczsKICAgIH0KCiAgICBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykgewogICAgICBidWlsZCA9IHY7CiAgICAgIHYgPSB1bmRlZmluZWQ7CiAgICB9CgogICAgLy8gY29udmVuaWVuY2UsIHJldHVybiAiZXhhbXBsZS5vcmciIGZyb20gInd3dy5leGFtcGxlLm9yZyIKICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHsKICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICAvLyBpZiBob3N0bmFtZSBjb25zaXN0cyBvZiAxIG9yIDIgc2VnbWVudHMsIGl0IG11c3QgYmUgdGhlIGRvbWFpbgogICAgICB2YXIgdCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLm1hdGNoKC9cLi9nKTsKICAgICAgaWYgKHQgJiYgdC5sZW5ndGggPCAyKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lOwogICAgICB9CgogICAgICAvLyBncmFiIHRsZCBhbmQgYWRkIGFub3RoZXIgc2VnbWVudAogICAgICB2YXIgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy50bGQoYnVpbGQpLmxlbmd0aCAtIDE7CiAgICAgIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCcuJywgZW5kIC0gMSkgKyAxOwogICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKGVuZCkgfHwgJyc7CiAgICB9IGVsc2UgewogICAgICBpZiAoIXYpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IGRvbWFpbiBlbXB0eScpOwogICAgICB9CgogICAgICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2KTsKCiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkgewogICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdjsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5kb21haW4oKSkgKyAnJCcpOwogICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTsKICAgICAgfQoKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9OwogIHAudGxkID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7CiAgICB9CgogICAgaWYgKHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHsKICAgICAgYnVpbGQgPSB2OwogICAgICB2ID0gdW5kZWZpbmVkOwogICAgfQoKICAgIC8vIHJldHVybiAib3JnIiBmcm9tICJ3d3cuZXhhbXBsZS5vcmciCiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgdmFyIHBvcyA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCcuJyk7CiAgICAgIHZhciB0bGQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcocG9zICsgMSk7CgogICAgICBpZiAoYnVpbGQgIT09IHRydWUgJiYgU0xEICYmIFNMRC5saXN0W3RsZC50b0xvd2VyQ2FzZSgpXSkgewogICAgICAgIHJldHVybiBTTEQuZ2V0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB8fCB0bGQ7CiAgICAgIH0KCiAgICAgIHJldHVybiB0bGQ7CiAgICB9IGVsc2UgewogICAgICB2YXIgcmVwbGFjZTsKCiAgICAgIGlmICghdikgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgVExEIGVtcHR5Jyk7CiAgICAgIH0gZWxzZSBpZiAodi5tYXRjaCgvW15hLXpBLVowLTktXS8pKSB7CiAgICAgICAgaWYgKFNMRCAmJiBTTEQuaXModikpIHsKICAgICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgJyQnKTsKICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVExEICInICsgdiArICciIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05XScpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkgewogICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignY2Fubm90IHNldCBUTEQgb24gbm9uLWRvbWFpbiBob3N0Jyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy50bGQoKSkgKyAnJCcpOwogICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTsKICAgICAgfQoKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9OwogIHAuZGlyZWN0b3J5ID0gZnVuY3Rpb24gKHYsIGJ1aWxkKSB7CiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7CiAgICB9CgogICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7CiAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCAmJiAhdGhpcy5fcGFydHMuaG9zdG5hbWUpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHsKICAgICAgICByZXR1cm4gJy8nOwogICAgICB9CgogICAgICB2YXIgZW5kID0gdGhpcy5fcGFydHMucGF0aC5sZW5ndGggLSB0aGlzLmZpbGVuYW1lKCkubGVuZ3RoIC0gMTsKICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGVuZCkgfHwgKHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gJy8nIDogJycpOwoKICAgICAgcmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aChyZXMpIDogcmVzOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGUgPSB0aGlzLl9wYXJ0cy5wYXRoLmxlbmd0aCAtIHRoaXMuZmlsZW5hbWUoKS5sZW5ndGg7CiAgICAgIHZhciBkaXJlY3RvcnkgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygwLCBlKTsKICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIGVzY2FwZVJlZ0V4KGRpcmVjdG9yeSkpOwoKICAgICAgLy8gZnVsbHkgcXVhbGlmaWVyIGRpcmVjdG9yaWVzIGJlZ2luIHdpdGggYSBzbGFzaAogICAgICBpZiAoIXRoaXMuaXMoJ3JlbGF0aXZlJykpIHsKICAgICAgICBpZiAoIXYpIHsKICAgICAgICAgIHYgPSAnLyc7CiAgICAgICAgfQoKICAgICAgICBpZiAodi5jaGFyQXQoMCkgIT09ICcvJykgewogICAgICAgICAgdiA9ICcvJyArIHY7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBkaXJlY3RvcmllcyBhbHdheXMgZW5kIHdpdGggYSBzbGFzaAogICAgICBpZiAodiAmJiB2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpICE9PSAnLycpIHsKICAgICAgICB2ICs9ICcvJzsKICAgICAgfQoKICAgICAgdiA9IFVSSS5yZWNvZGVQYXRoKHYpOwogICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpOwogICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07CiAgcC5maWxlbmFtZSA9IGZ1bmN0aW9uICh2LCBidWlsZCkgewogICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzOwogICAgfQoKICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkgewogICAgICBpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICB2YXIgcG9zID0gdGhpcy5fcGFydHMucGF0aC5sYXN0SW5kZXhPZignLycpOwogICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcocG9zICsgMSk7CgogICAgICByZXR1cm4gdiA/IFVSSS5kZWNvZGVQYXRoU2VnbWVudChyZXMpIDogcmVzOwogICAgfSBlbHNlIHsKICAgICAgdmFyIG11dGF0ZWREaXJlY3RvcnkgPSBmYWxzZTsKCiAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gJy8nKSB7CiAgICAgICAgdiA9IHYuc3Vic3RyaW5nKDEpOwogICAgICB9CgogICAgICBpZiAodi5tYXRjaCgvXC4/XC8vKSkgewogICAgICAgIG11dGF0ZWREaXJlY3RvcnkgPSB0cnVlOwogICAgICB9CgogICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5maWxlbmFtZSgpKSArICckJyk7CiAgICAgIHYgPSBVUkkucmVjb2RlUGF0aCh2KTsKICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2KTsKCiAgICAgIGlmIChtdXRhdGVkRGlyZWN0b3J5KSB7CiAgICAgICAgdGhpcy5ub3JtYWxpemVQYXRoKGJ1aWxkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07CiAgcC5zdWZmaXggPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpczsKICAgIH0KCiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHsKICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgdmFyIGZpbGVuYW1lID0gdGhpcy5maWxlbmFtZSgpOwogICAgICB2YXIgcG9zID0gZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKTsKICAgICAgdmFyIHMsIHJlczsKCiAgICAgIGlmIChwb3MgPT09IC0xKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICAvLyBzdWZmaXggbWF5IG9ubHkgY29udGFpbiBhbG51bSBjaGFyYWN0ZXJzICh5dXAsIEkgbWFkZSB0aGlzIHVwLikKICAgICAgcyA9IGZpbGVuYW1lLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgICAgcmVzID0gL15bYS16MC05JV0rJC9pLnRlc3QocykgPyBzIDogJyc7CiAgICAgIHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7CiAgICB9IGVsc2UgewogICAgICBpZiAodi5jaGFyQXQoMCkgPT09ICcuJykgewogICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTsKICAgICAgfQoKICAgICAgdmFyIHN1ZmZpeCA9IHRoaXMuc3VmZml4KCk7CiAgICAgIHZhciByZXBsYWNlOwoKICAgICAgaWYgKCFzdWZmaXgpIHsKICAgICAgICBpZiAoIXYpIHsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fcGFydHMucGF0aCArPSAnLicgKyBVUkkucmVjb2RlUGF0aCh2KTsKICAgICAgfSBlbHNlIGlmICghdikgewogICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KCcuJyArIHN1ZmZpeCkgKyAnJCcpOwogICAgICB9IGVsc2UgewogICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHN1ZmZpeCkgKyAnJCcpOwogICAgICB9CgogICAgICBpZiAocmVwbGFjZSkgewogICAgICAgIHYgPSBVUkkucmVjb2RlUGF0aCh2KTsKICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpOwogICAgICB9CgogICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07CiAgcC5zZWdtZW50ID0gZnVuY3Rpb24gKHNlZ21lbnQsIHYsIGJ1aWxkKSB7CiAgICB2YXIgc2VwYXJhdG9yID0gdGhpcy5fcGFydHMudXJuID8gJzonIDogJy8nOwogICAgdmFyIHBhdGggPSB0aGlzLnBhdGgoKTsKICAgIHZhciBhYnNvbHV0ZSA9IHBhdGguc3Vic3RyaW5nKDAsIDEpID09PSAnLyc7CiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KHNlcGFyYXRvcik7CgogICAgaWYgKHNlZ21lbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc2VnbWVudCAhPT0gJ251bWJlcicpIHsKICAgICAgYnVpbGQgPSB2OwogICAgICB2ID0gc2VnbWVudDsKICAgICAgc2VnbWVudCA9IHVuZGVmaW5lZDsKICAgIH0KCiAgICBpZiAoc2VnbWVudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBzZWdtZW50ICInICsgc2VnbWVudCArICciLCBtdXN0IGJlIDAtYmFzZWQgaW50ZWdlcicpOwogICAgfQoKICAgIGlmIChhYnNvbHV0ZSkgewogICAgICBzZWdtZW50cy5zaGlmdCgpOwogICAgfQoKICAgIGlmIChzZWdtZW50IDwgMCkgewogICAgICAvLyBhbGxvdyBuZWdhdGl2ZSBpbmRleGVzIHRvIGFkZHJlc3MgZnJvbSB0aGUgZW5kCiAgICAgIHNlZ21lbnQgPSBNYXRoLm1heChzZWdtZW50cy5sZW5ndGggKyBzZWdtZW50LCAwKTsKICAgIH0KCiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIC8qanNoaW50IGxheGJyZWFrOiB0cnVlICovCiAgICAgIHJldHVybiBzZWdtZW50ID09PSB1bmRlZmluZWQgPyBzZWdtZW50cyA6IHNlZ21lbnRzW3NlZ21lbnRdOwogICAgICAvKmpzaGludCBsYXhicmVhazogZmFsc2UgKi8KICAgIH0gZWxzZSBpZiAoc2VnbWVudCA9PT0gbnVsbCB8fCBzZWdtZW50c1tzZWdtZW50XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGlzQXJyYXkodikpIHsKICAgICAgICAgIHNlZ21lbnRzID0gW107CiAgICAgICAgICAvLyBjb2xsYXBzZSBlbXB0eSBlbGVtZW50cyB3aXRoaW4gYXJyYXkKICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdi5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgaWYgKCF2W2ldLmxlbmd0aCAmJiAoIXNlZ21lbnRzLmxlbmd0aCB8fCAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0ubGVuZ3RoKSkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoICYmICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXS5sZW5ndGgpIHsKICAgICAgICAgICAgICBzZWdtZW50cy5wb3AoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2VnbWVudHMucHVzaCh0cmltU2xhc2hlcyh2W2ldKSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh2IHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJykgewogICAgICAgICAgdiA9IHRyaW1TbGFzaGVzKHYpOwogICAgICAgICAgaWYgKHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdID09PSAnJykgewogICAgICAgICAgICAvLyBlbXB0eSB0cmFpbGluZyBlbGVtZW50cyBoYXZlIHRvIGJlIG92ZXJ3cml0dGVuCiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgcmVzdWx0cyBzdWNoIGFzIC9mb28vL2JhcgogICAgICAgICAgICBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSA9IHY7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWdtZW50cy5wdXNoKHYpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodikgewogICAgICAgICAgc2VnbWVudHNbc2VnbWVudF0gPSB0cmltU2xhc2hlcyh2KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VnbWVudHMuc3BsaWNlKHNlZ21lbnQsIDEpOwogICAgICAgIH0KICAgICAgfQoKICAgIGlmIChhYnNvbHV0ZSkgewogICAgICBzZWdtZW50cy51bnNoaWZ0KCcnKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5wYXRoKHNlZ21lbnRzLmpvaW4oc2VwYXJhdG9yKSwgYnVpbGQpOwogIH07CiAgcC5zZWdtZW50Q29kZWQgPSBmdW5jdGlvbiAoc2VnbWVudCwgdiwgYnVpbGQpIHsKICAgIHZhciBzZWdtZW50cywgaSwgbDsKCiAgICBpZiAodHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7CiAgICAgIGJ1aWxkID0gdjsKICAgICAgdiA9IHNlZ21lbnQ7CiAgICAgIHNlZ21lbnQgPSB1bmRlZmluZWQ7CiAgICB9CgogICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgewogICAgICBzZWdtZW50cyA9IHRoaXMuc2VnbWVudChzZWdtZW50LCB2LCBidWlsZCk7CiAgICAgIGlmICghaXNBcnJheShzZWdtZW50cykpIHsKICAgICAgICBzZWdtZW50cyA9IHNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBVUkkuZGVjb2RlKHNlZ21lbnRzKSA6IHVuZGVmaW5lZDsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb3IgKGkgPSAwLCBsID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICBzZWdtZW50c1tpXSA9IFVSSS5kZWNvZGUoc2VnbWVudHNbaV0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHNlZ21lbnRzOwogICAgfQoKICAgIGlmICghaXNBcnJheSh2KSkgewogICAgICB2ID0gdHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8IHYgaW5zdGFuY2VvZiBTdHJpbmcgPyBVUkkuZW5jb2RlKHYpIDogdjsKICAgIH0gZWxzZSB7CiAgICAgIGZvciAoaSA9IDAsIGwgPSB2Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZbaV0gPSBVUkkuZW5jb2RlKHZbaV0pOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRoaXMuc2VnbWVudChzZWdtZW50LCB2LCBidWlsZCk7CiAgfTsKCiAgLy8gbXV0YXRpbmcgcXVlcnkgc3RyaW5nCiAgdmFyIHEgPSBwLnF1ZXJ5OwogIHAucXVlcnkgPSBmdW5jdGlvbiAodiwgYnVpbGQpIHsKICAgIGlmICh2ID09PSB0cnVlKSB7CiAgICAgIHJldHVybiBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICB2YXIgcmVzdWx0ID0gdi5jYWxsKHRoaXMsIGRhdGEpOwogICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHJlc3VsdCB8fCBkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIGlmICh2ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7CiAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkodiwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBxLmNhbGwodGhpcywgdiwgYnVpbGQpOwogICAgfQogIH07CiAgcC5zZXRRdWVyeSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgYnVpbGQpIHsKICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwoKICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgbmFtZSBpbnN0YW5jZW9mIFN0cmluZykgewogICAgICBkYXRhW25hbWVdID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogbnVsbDsKICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuYW1lKSkgPT09ICdvYmplY3QnKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7CiAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHsKICAgICAgICAgIGRhdGFba2V5XSA9IG5hbWVba2V5XTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7CiAgICB9CgogICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgewogICAgICBidWlsZCA9IHZhbHVlOwogICAgfQoKICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIHJldHVybiB0aGlzOwogIH07CiAgcC5hZGRRdWVyeSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgYnVpbGQpIHsKICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgVVJJLmFkZFF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWUpOwogICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgewogICAgICBidWlsZCA9IHZhbHVlOwogICAgfQoKICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIHJldHVybiB0aGlzOwogIH07CiAgcC5yZW1vdmVRdWVyeSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgYnVpbGQpIHsKICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgVVJJLnJlbW92ZVF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlKTsKICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHsKICAgICAgYnVpbGQgPSB2YWx1ZTsKICAgIH0KCiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICByZXR1cm4gdGhpczsKICB9OwogIHAuaGFzUXVlcnkgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KSB7CiAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgIHJldHVybiBVUkkuaGFzUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KTsKICB9OwogIHAuc2V0U2VhcmNoID0gcC5zZXRRdWVyeTsKICBwLmFkZFNlYXJjaCA9IHAuYWRkUXVlcnk7CiAgcC5yZW1vdmVTZWFyY2ggPSBwLnJlbW92ZVF1ZXJ5OwogIHAuaGFzU2VhcmNoID0gcC5oYXNRdWVyeTsKCiAgLy8gc2FuaXRpemluZyBVUkxzCiAgcC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKS5ub3JtYWxpemVQYXRoKGZhbHNlKS5ub3JtYWxpemVRdWVyeShmYWxzZSkubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpLmJ1aWxkKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpLm5vcm1hbGl6ZUhvc3RuYW1lKGZhbHNlKS5ub3JtYWxpemVQb3J0KGZhbHNlKS5ub3JtYWxpemVQYXRoKGZhbHNlKS5ub3JtYWxpemVRdWVyeShmYWxzZSkubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpLmJ1aWxkKCk7CiAgfTsKICBwLm5vcm1hbGl6ZVByb3RvY29sID0gZnVuY3Rpb24gKGJ1aWxkKSB7CiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJykgewogICAgICB0aGlzLl9wYXJ0cy5wcm90b2NvbCA9IHRoaXMuX3BhcnRzLnByb3RvY29sLnRvTG93ZXJDYXNlKCk7CiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9OwogIHAubm9ybWFsaXplSG9zdG5hbWUgPSBmdW5jdGlvbiAoYnVpbGQpIHsKICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkgewogICAgICBpZiAodGhpcy5pcygnSUROJykgJiYgcHVueWNvZGUpIHsKICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaXMoJ0lQdjYnKSAmJiBJUHY2KSB7CiAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSBJUHY2LmJlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICB9CgogICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9OwogIHAubm9ybWFsaXplUG9ydCA9IGZ1bmN0aW9uIChidWlsZCkgewogICAgLy8gcmVtb3ZlIHBvcnQgb2YgaXQncyB0aGUgcHJvdG9jb2wncyBkZWZhdWx0CiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJyAmJiB0aGlzLl9wYXJ0cy5wb3J0ID09PSBVUkkuZGVmYXVsdFBvcnRzW3RoaXMuX3BhcnRzLnByb3RvY29sXSkgewogICAgICB0aGlzLl9wYXJ0cy5wb3J0ID0gbnVsbDsKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07CiAgcC5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24gKGJ1aWxkKSB7CiAgICB2YXIgX3BhdGggPSB0aGlzLl9wYXJ0cy5wYXRoOwogICAgaWYgKCFfcGF0aCkgewogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSBVUkkucmVjb2RlVXJuUGF0aCh0aGlzLl9wYXJ0cy5wYXRoKTsKICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBpZiAodGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIF9wYXRoID0gVVJJLnJlY29kZVBhdGgoX3BhdGgpOwoKICAgIHZhciBfd2FzX3JlbGF0aXZlOwogICAgdmFyIF9sZWFkaW5nUGFyZW50cyA9ICcnOwogICAgdmFyIF9wYXJlbnQsIF9wb3M7CgogICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzCiAgICBpZiAoX3BhdGguY2hhckF0KDApICE9PSAnLycpIHsKICAgICAgX3dhc19yZWxhdGl2ZSA9IHRydWU7CiAgICAgIF9wYXRoID0gJy8nICsgX3BhdGg7CiAgICB9CgogICAgLy8gaGFuZGxlIHJlbGF0aXZlIGZpbGVzIChhcyBvcHBvc2VkIHRvIGRpcmVjdG9yaWVzKQogICAgaWYgKF9wYXRoLnNsaWNlKC0zKSA9PT0gJy8uLicgfHwgX3BhdGguc2xpY2UoLTIpID09PSAnLy4nKSB7CiAgICAgIF9wYXRoICs9ICcvJzsKICAgIH0KCiAgICAvLyByZXNvbHZlIHNpbXBsZXMKICAgIF9wYXRoID0gX3BhdGgucmVwbGFjZSgvKFwvKFwuXC8pKyl8KFwvXC4kKS9nLCAnLycpLnJlcGxhY2UoL1wvezIsfS9nLCAnLycpOwoKICAgIC8vIHJlbWVtYmVyIGxlYWRpbmcgcGFyZW50cwogICAgaWYgKF93YXNfcmVsYXRpdmUpIHsKICAgICAgX2xlYWRpbmdQYXJlbnRzID0gX3BhdGguc3Vic3RyaW5nKDEpLm1hdGNoKC9eKFwuXC5cLykrLykgfHwgJyc7CiAgICAgIGlmIChfbGVhZGluZ1BhcmVudHMpIHsKICAgICAgICBfbGVhZGluZ1BhcmVudHMgPSBfbGVhZGluZ1BhcmVudHNbMF07CiAgICAgIH0KICAgIH0KCiAgICAvLyByZXNvbHZlIHBhcmVudHMKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIF9wYXJlbnQgPSBfcGF0aC5zZWFyY2goL1wvXC5cLihcL3wkKS8pOwogICAgICBpZiAoX3BhcmVudCA9PT0gLTEpIHsKICAgICAgICAvLyBubyBtb3JlIC4uLyB0byByZXNvbHZlCiAgICAgICAgYnJlYWs7CiAgICAgIH0gZWxzZSBpZiAoX3BhcmVudCA9PT0gMCkgewogICAgICAgIC8vIHRvcCBsZXZlbCBjYW5ub3QgYmUgcmVsYXRpdmUsIHNraXAgaXQKICAgICAgICBfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygzKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgX3BvcyA9IF9wYXRoLnN1YnN0cmluZygwLCBfcGFyZW50KS5sYXN0SW5kZXhPZignLycpOwogICAgICBpZiAoX3BvcyA9PT0gLTEpIHsKICAgICAgICBfcG9zID0gX3BhcmVudDsKICAgICAgfQogICAgICBfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygwLCBfcG9zKSArIF9wYXRoLnN1YnN0cmluZyhfcGFyZW50ICsgMyk7CiAgICB9CgogICAgLy8gcmV2ZXJ0IHRvIHJlbGF0aXZlCiAgICBpZiAoX3dhc19yZWxhdGl2ZSAmJiB0aGlzLmlzKCdyZWxhdGl2ZScpKSB7CiAgICAgIF9wYXRoID0gX2xlYWRpbmdQYXJlbnRzICsgX3BhdGguc3Vic3RyaW5nKDEpOwogICAgfQoKICAgIHRoaXMuX3BhcnRzLnBhdGggPSBfcGF0aDsKICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIHJldHVybiB0aGlzOwogIH07CiAgcC5ub3JtYWxpemVQYXRobmFtZSA9IHAubm9ybWFsaXplUGF0aDsKICBwLm5vcm1hbGl6ZVF1ZXJ5ID0gZnVuY3Rpb24gKGJ1aWxkKSB7CiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJykgewogICAgICBpZiAoIXRoaXMuX3BhcnRzLnF1ZXJ5Lmxlbmd0aCkgewogICAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnF1ZXJ5KFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKSk7CiAgICAgIH0KCiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9OwogIHAubm9ybWFsaXplRnJhZ21lbnQgPSBmdW5jdGlvbiAoYnVpbGQpIHsKICAgIGlmICghdGhpcy5fcGFydHMuZnJhZ21lbnQpIHsKICAgICAgdGhpcy5fcGFydHMuZnJhZ21lbnQgPSBudWxsOwogICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKICBwLm5vcm1hbGl6ZVNlYXJjaCA9IHAubm9ybWFsaXplUXVlcnk7CiAgcC5ub3JtYWxpemVIYXNoID0gcC5ub3JtYWxpemVGcmFnbWVudDsKCiAgcC5pc284ODU5ID0gZnVuY3Rpb24gKCkgewogICAgLy8gZXhwZWN0IHVuaWNvZGUgaW5wdXQsIGlzbzg4NTkgb3V0cHV0CiAgICB2YXIgZSA9IFVSSS5lbmNvZGU7CiAgICB2YXIgZCA9IFVSSS5kZWNvZGU7CgogICAgVVJJLmVuY29kZSA9IGVzY2FwZTsKICAgIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7CiAgICB0cnkgewogICAgICB0aGlzLm5vcm1hbGl6ZSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgVVJJLmVuY29kZSA9IGU7CiAgICAgIFVSSS5kZWNvZGUgPSBkOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgcC51bmljb2RlID0gZnVuY3Rpb24gKCkgewogICAgLy8gZXhwZWN0IGlzbzg4NTkgaW5wdXQsIHVuaWNvZGUgb3V0cHV0CiAgICB2YXIgZSA9IFVSSS5lbmNvZGU7CiAgICB2YXIgZCA9IFVSSS5kZWNvZGU7CgogICAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDsKICAgIFVSSS5kZWNvZGUgPSB1bmVzY2FwZTsKICAgIHRyeSB7CiAgICAgIHRoaXMubm9ybWFsaXplKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBVUkkuZW5jb2RlID0gZTsKICAgICAgVVJJLmRlY29kZSA9IGQ7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9OwoKICBwLnJlYWRhYmxlID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHVyaSA9IHRoaXMuY2xvbmUoKTsKICAgIC8vIHJlbW92aW5nIHVzZXJuYW1lLCBwYXNzd29yZCwgYmVjYXVzZSB0aGV5IHNob3VsZG4ndCBiZSBkaXNwbGF5ZWQgYWNjb3JkaW5nIHRvIFJGQyAzOTg2CiAgICB1cmkudXNlcm5hbWUoJycpLnBhc3N3b3JkKCcnKS5ub3JtYWxpemUoKTsKICAgIHZhciB0ID0gJyc7CiAgICBpZiAodXJpLl9wYXJ0cy5wcm90b2NvbCkgewogICAgICB0ICs9IHVyaS5fcGFydHMucHJvdG9jb2wgKyAnOi8vJzsKICAgIH0KCiAgICBpZiAodXJpLl9wYXJ0cy5ob3N0bmFtZSkgewogICAgICBpZiAodXJpLmlzKCdwdW55Y29kZScpICYmIHB1bnljb2RlKSB7CiAgICAgICAgdCArPSBwdW55Y29kZS50b1VuaWNvZGUodXJpLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgICAgaWYgKHVyaS5fcGFydHMucG9ydCkgewogICAgICAgICAgdCArPSAnOicgKyB1cmkuX3BhcnRzLnBvcnQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHQgKz0gdXJpLmhvc3QoKTsKICAgICAgfQogICAgfQoKICAgIGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lICYmIHVyaS5fcGFydHMucGF0aCAmJiB1cmkuX3BhcnRzLnBhdGguY2hhckF0KDApICE9PSAnLycpIHsKICAgICAgdCArPSAnLyc7CiAgICB9CgogICAgdCArPSB1cmkucGF0aCh0cnVlKTsKICAgIGlmICh1cmkuX3BhcnRzLnF1ZXJ5KSB7CiAgICAgIHZhciBxID0gJyc7CiAgICAgIGZvciAodmFyIGkgPSAwLCBxcCA9IHVyaS5fcGFydHMucXVlcnkuc3BsaXQoJyYnKSwgbCA9IHFwLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBrdiA9IChxcFtpXSB8fCAnJykuc3BsaXQoJz0nKTsKICAgICAgICBxICs9ICcmJyArIFVSSS5kZWNvZGVRdWVyeShrdlswXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSkucmVwbGFjZSgvJi9nLCAnJTI2Jyk7CgogICAgICAgIGlmIChrdlsxXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBxICs9ICc9JyArIFVSSS5kZWNvZGVRdWVyeShrdlsxXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSkucmVwbGFjZSgvJi9nLCAnJTI2Jyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHQgKz0gJz8nICsgcS5zdWJzdHJpbmcoMSk7CiAgICB9CgogICAgdCArPSBVUkkuZGVjb2RlUXVlcnkodXJpLmhhc2goKSwgdHJ1ZSk7CiAgICByZXR1cm4gdDsKICB9OwoKICAvLyByZXNvbHZpbmcgcmVsYXRpdmUgYW5kIGFic29sdXRlIFVSTHMKICBwLmFic29sdXRlVG8gPSBmdW5jdGlvbiAoYmFzZSkgewogICAgdmFyIHJlc29sdmVkID0gdGhpcy5jbG9uZSgpOwogICAgdmFyIHByb3BlcnRpZXMgPSBbJ3Byb3RvY29sJywgJ3VzZXJuYW1lJywgJ3Bhc3N3b3JkJywgJ2hvc3RuYW1lJywgJ3BvcnQnXTsKICAgIHZhciBiYXNlZGlyLCBpLCBwOwoKICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cycpOwogICAgfQoKICAgIGlmICghKGJhc2UgaW5zdGFuY2VvZiBVUkkpKSB7CiAgICAgIGJhc2UgPSBuZXcgVVJJKGJhc2UpOwogICAgfQoKICAgIGlmICghcmVzb2x2ZWQuX3BhcnRzLnByb3RvY29sKSB7CiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCA9IGJhc2UuX3BhcnRzLnByb3RvY29sOwogICAgfQoKICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkgewogICAgICByZXR1cm4gcmVzb2x2ZWQ7CiAgICB9CgogICAgZm9yIChpID0gMDsgcCA9IHByb3BlcnRpZXNbaV07IGkrKykgewogICAgICByZXNvbHZlZC5fcGFydHNbcF0gPSBiYXNlLl9wYXJ0c1twXTsKICAgIH0KCiAgICBpZiAoIXJlc29sdmVkLl9wYXJ0cy5wYXRoKSB7CiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gYmFzZS5fcGFydHMucGF0aDsKICAgICAgaWYgKCFyZXNvbHZlZC5fcGFydHMucXVlcnkpIHsKICAgICAgICByZXNvbHZlZC5fcGFydHMucXVlcnkgPSBiYXNlLl9wYXJ0cy5xdWVyeTsKICAgICAgfQogICAgfSBlbHNlIGlmIChyZXNvbHZlZC5fcGFydHMucGF0aC5zdWJzdHJpbmcoLTIpID09PSAnLi4nKSB7CiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoICs9ICcvJzsKICAgIH0KCiAgICBpZiAocmVzb2x2ZWQucGF0aCgpLmNoYXJBdCgwKSAhPT0gJy8nKSB7CiAgICAgIGJhc2VkaXIgPSBiYXNlLmRpcmVjdG9yeSgpOwogICAgICBiYXNlZGlyID0gYmFzZWRpciA/IGJhc2VkaXIgOiBiYXNlLnBhdGgoKS5pbmRleE9mKCcvJykgPT09IDAgPyAnLycgOiAnJzsKICAgICAgcmVzb2x2ZWQuX3BhcnRzLnBhdGggPSAoYmFzZWRpciA/IGJhc2VkaXIgKyAnLycgOiAnJykgKyByZXNvbHZlZC5fcGFydHMucGF0aDsKICAgICAgcmVzb2x2ZWQubm9ybWFsaXplUGF0aCgpOwogICAgfQoKICAgIHJlc29sdmVkLmJ1aWxkKCk7CiAgICByZXR1cm4gcmVzb2x2ZWQ7CiAgfTsKICBwLnJlbGF0aXZlVG8gPSBmdW5jdGlvbiAoYmFzZSkgewogICAgdmFyIHJlbGF0aXZlID0gdGhpcy5jbG9uZSgpLm5vcm1hbGl6ZSgpOwogICAgdmFyIHJlbGF0aXZlUGFydHMsIGJhc2VQYXJ0cywgY29tbW9uLCByZWxhdGl2ZVBhdGgsIGJhc2VQYXRoOwoKICAgIGlmIChyZWxhdGl2ZS5fcGFydHMudXJuKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMnKTsKICAgIH0KCiAgICBiYXNlID0gbmV3IFVSSShiYXNlKS5ub3JtYWxpemUoKTsKICAgIHJlbGF0aXZlUGFydHMgPSByZWxhdGl2ZS5fcGFydHM7CiAgICBiYXNlUGFydHMgPSBiYXNlLl9wYXJ0czsKICAgIHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlLnBhdGgoKTsKICAgIGJhc2VQYXRoID0gYmFzZS5wYXRoKCk7CgogICAgaWYgKHJlbGF0aXZlUGF0aC5jaGFyQXQoMCkgIT09ICcvJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VSSSBpcyBhbHJlYWR5IHJlbGF0aXZlJyk7CiAgICB9CgogICAgaWYgKGJhc2VQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNhbGN1bGF0ZSBhIFVSSSByZWxhdGl2ZSB0byBhbm90aGVyIHJlbGF0aXZlIFVSSScpOwogICAgfQoKICAgIGlmIChyZWxhdGl2ZVBhcnRzLnByb3RvY29sID09PSBiYXNlUGFydHMucHJvdG9jb2wpIHsKICAgICAgcmVsYXRpdmVQYXJ0cy5wcm90b2NvbCA9IG51bGw7CiAgICB9CgogICAgaWYgKHJlbGF0aXZlUGFydHMudXNlcm5hbWUgIT09IGJhc2VQYXJ0cy51c2VybmFtZSB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBiYXNlUGFydHMucGFzc3dvcmQpIHsKICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICB9CgogICAgaWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgIT09IG51bGwgfHwgcmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBudWxsKSB7CiAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpOwogICAgfQoKICAgIGlmIChyZWxhdGl2ZVBhcnRzLmhvc3RuYW1lID09PSBiYXNlUGFydHMuaG9zdG5hbWUgJiYgcmVsYXRpdmVQYXJ0cy5wb3J0ID09PSBiYXNlUGFydHMucG9ydCkgewogICAgICByZWxhdGl2ZVBhcnRzLmhvc3RuYW1lID0gbnVsbDsKICAgICAgcmVsYXRpdmVQYXJ0cy5wb3J0ID0gbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpOwogICAgfQoKICAgIGlmIChyZWxhdGl2ZVBhdGggPT09IGJhc2VQYXRoKSB7CiAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9ICcnOwogICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTsKICAgIH0KCiAgICAvLyBkZXRlcm1pbmUgY29tbW9uIHN1YiBwYXRoCiAgICBjb21tb24gPSBVUkkuY29tbW9uUGF0aChyZWxhdGl2ZVBhdGgsIGJhc2VQYXRoKTsKCiAgICAvLyBJZiB0aGUgcGF0aHMgaGF2ZSBub3RoaW5nIGluIGNvbW1vbiwgcmV0dXJuIGEgcmVsYXRpdmUgVVJMIHdpdGggdGhlIGFic29sdXRlIHBhdGguCiAgICBpZiAoIWNvbW1vbikgewogICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTsKICAgIH0KCiAgICB2YXIgcGFyZW50cyA9IGJhc2VQYXJ0cy5wYXRoLnN1YnN0cmluZyhjb21tb24ubGVuZ3RoKS5yZXBsYWNlKC9bXlwvXSokLywgJycpLnJlcGxhY2UoLy4qP1wvL2csICcuLi8nKTsKCiAgICByZWxhdGl2ZVBhcnRzLnBhdGggPSBwYXJlbnRzICsgcmVsYXRpdmVQYXJ0cy5wYXRoLnN1YnN0cmluZyhjb21tb24ubGVuZ3RoKSB8fCAnLi8nOwoKICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpOwogIH07CgogIC8vIGNvbXBhcmluZyBVUklzCiAgcC5lcXVhbHMgPSBmdW5jdGlvbiAodXJpKSB7CiAgICB2YXIgb25lID0gdGhpcy5jbG9uZSgpOwogICAgdmFyIHR3byA9IG5ldyBVUkkodXJpKTsKICAgIHZhciBvbmVfbWFwID0ge307CiAgICB2YXIgdHdvX21hcCA9IHt9OwogICAgdmFyIGNoZWNrZWQgPSB7fTsKICAgIHZhciBvbmVfcXVlcnksIHR3b19xdWVyeSwga2V5OwoKICAgIG9uZS5ub3JtYWxpemUoKTsKICAgIHR3by5ub3JtYWxpemUoKTsKCiAgICAvLyBleGFjdCBtYXRjaAogICAgaWYgKG9uZS50b1N0cmluZygpID09PSB0d28udG9TdHJpbmcoKSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLyBleHRyYWN0IHF1ZXJ5IHN0cmluZwogICAgb25lX3F1ZXJ5ID0gb25lLnF1ZXJ5KCk7CiAgICB0d29fcXVlcnkgPSB0d28ucXVlcnkoKTsKICAgIG9uZS5xdWVyeSgnJyk7CiAgICB0d28ucXVlcnkoJycpOwoKICAgIC8vIGRlZmluaXRlbHkgbm90IGVxdWFsIGlmIG5vdCBldmVuIG5vbi1xdWVyeSBwYXJ0cyBtYXRjaAogICAgaWYgKG9uZS50b1N0cmluZygpICE9PSB0d28udG9TdHJpbmcoKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy8gcXVlcnkgcGFyYW1ldGVycyBoYXZlIHRoZSBzYW1lIGxlbmd0aCwgZXZlbiBpZiB0aGV5J3JlIHBlcm11dGVkCiAgICBpZiAob25lX3F1ZXJ5Lmxlbmd0aCAhPT0gdHdvX3F1ZXJ5Lmxlbmd0aCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgb25lX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KG9uZV9xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICB0d29fbWFwID0gVVJJLnBhcnNlUXVlcnkodHdvX3F1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKCiAgICBmb3IgKGtleSBpbiBvbmVfbWFwKSB7CiAgICAgIGlmIChoYXNPd24uY2FsbChvbmVfbWFwLCBrZXkpKSB7CiAgICAgICAgaWYgKCFpc0FycmF5KG9uZV9tYXBba2V5XSkpIHsKICAgICAgICAgIGlmIChvbmVfbWFwW2tleV0gIT09IHR3b19tYXBba2V5XSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICghYXJyYXlzRXF1YWwob25lX21hcFtrZXldLCB0d29fbWFwW2tleV0pKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBjaGVja2VkW2tleV0gPSB0cnVlOwogICAgICB9CiAgICB9CgogICAgZm9yIChrZXkgaW4gdHdvX21hcCkgewogICAgICBpZiAoaGFzT3duLmNhbGwodHdvX21hcCwga2V5KSkgewogICAgICAgIGlmICghY2hlY2tlZFtrZXldKSB7CiAgICAgICAgICAvLyB0d28gY29udGFpbnMgYSBwYXJhbWV0ZXIgbm90IHByZXNlbnQgaW4gb25lCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRydWU7CiAgfTsKCiAgLy8gc3RhdGUKICBwLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uICh2KSB7CiAgICB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSAhIXY7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICBwLmVzY2FwZVF1ZXJ5U3BhY2UgPSBmdW5jdGlvbiAodikgewogICAgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSA9ICEhdjsKICAgIHJldHVybiB0aGlzOwogIH07CgogIHJldHVybiBVUkk7Cn0pOwoKfSx7Ii4vSVB2NiI6MywiLi9TZWNvbmRMZXZlbERvbWFpbnMiOjQsIi4vcHVueWNvZGUiOjZ9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewondXNlIHN0cmljdCc7Cgp2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgovKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMCBieSBAbWF0aGlhcyAqLwo7KGZ1bmN0aW9uIChyb290KSB7CgoJLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqLwoJdmFyIGZyZWVFeHBvcnRzID0gKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzOwoJdmFyIGZyZWVNb2R1bGUgPSAodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobW9kdWxlKSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlOwoJdmFyIGZyZWVHbG9iYWwgPSAodHlwZW9mIGdsb2JhbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZ2xvYmFsKSkgPT0gJ29iamVjdCcgJiYgZ2xvYmFsOwoJaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbCkgewoJCXJvb3QgPSBmcmVlR2xvYmFsOwoJfQoKCS8qKgogICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LgogICogQG5hbWUgcHVueWNvZGUKICAqIEB0eXBlIE9iamVjdAogICovCgl2YXIgcHVueWNvZGUsCgoKCS8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi8KCW1heEludCA9IDIxNDc0ODM2NDcsCgkgICAgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMQoKCS8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi8KCWJhc2UgPSAzNiwKCSAgICB0TWluID0gMSwKCSAgICB0TWF4ID0gMjYsCgkgICAgc2tldyA9IDM4LAoJICAgIGRhbXAgPSA3MDAsCgkgICAgaW5pdGlhbEJpYXMgPSA3MiwKCSAgICBpbml0aWFsTiA9IDEyOCwKCSAgICAvLyAweDgwCglkZWxpbWl0ZXIgPSAnLScsCgkgICAgLy8gJ1x4MkQnCgoJLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi8KCXJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLAoJICAgIHJlZ2V4Tm9uQVNDSUkgPSAvW15ceDIwLVx4N0VdLywKCSAgICAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFycwoJcmVnZXhTZXBhcmF0b3JzID0gL1tceDJFXHUzMDAyXHVGRjBFXHVGRjYxXS9nLAoJICAgIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnMKCgkvKiogRXJyb3IgbWVzc2FnZXMgKi8KCWVycm9ycyA9IHsKCQknb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLAoJCSdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsCgkJJ2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCcKCX0sCgoKCS8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi8KCWJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbiwKCSAgICBmbG9vciA9IE1hdGguZmxvb3IsCgkgICAgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSwKCgoJLyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqLwoJa2V5OwoKCS8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCS8qKgogICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uCiAgKiBAcHJpdmF0ZQogICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuCiAgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuCiAgKi8KCWZ1bmN0aW9uIGVycm9yKHR5cGUpIHsKCQl0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pOwoJfQoKCS8qKgogICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uCiAgKiBAcHJpdmF0ZQogICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci4KICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheQogICogaXRlbS4KICAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi4KICAqLwoJZnVuY3Rpb24gbWFwKGFycmF5LCBmbikgewoJCXZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7CgkJdmFyIHJlc3VsdCA9IFtdOwoJCXdoaWxlIChsZW5ndGgtLSkgewoJCQlyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pOwoJCX0KCQlyZXR1cm4gcmVzdWx0OwoJfQoKCS8qKgogICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsCiAgKiBhZGRyZXNzZXMuCiAgKiBAcHJpdmF0ZQogICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy4KICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeQogICogY2hhcmFjdGVyLgogICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sKICAqIGZ1bmN0aW9uLgogICovCglmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikgewoJCXZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpOwoJCXZhciByZXN1bHQgPSAnJzsKCQlpZiAocGFydHMubGVuZ3RoID4gMSkgewoJCQkvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlCgkJCS8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuCgkJCXJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnOwoJCQlzdHJpbmcgPSBwYXJ0c1sxXTsKCQl9CgkJLy8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LgoJCXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1x4MkUnKTsKCQl2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7CgkJdmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpOwoJCXJldHVybiByZXN1bHQgKyBlbmNvZGVkOwoJfQoKCS8qKgogICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZQogICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LAogICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2gKICAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LAogICogbWF0Y2hpbmcgVVRGLTE2LgogICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgCiAgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz4KICAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyCiAgKiBAbmFtZSBkZWNvZGUKICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuCiAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuCiAgKi8KCWZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7CgkJdmFyIG91dHB1dCA9IFtdLAoJCSAgICBjb3VudGVyID0gMCwKCQkgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCwKCQkgICAgdmFsdWUsCgkJICAgIGV4dHJhOwoJCXdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7CgkJCXZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTsKCQkJaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkgewoJCQkJLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyCgkJCQlleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7CgkJCQlpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsKCQkJCQkvLyBsb3cgc3Vycm9nYXRlCgkJCQkJb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHQKCQkJCQkvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIKCQkJCQlvdXRwdXQucHVzaCh2YWx1ZSk7CgkJCQkJY291bnRlci0tOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJb3V0cHV0LnB1c2godmFsdWUpOwoJCQl9CgkJfQoJCXJldHVybiBvdXRwdXQ7Cgl9CgoJLyoqCiAgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuCiAgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWAKICAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyCiAgKiBAbmFtZSBlbmNvZGUKICAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuCiAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuCiAgKi8KCWZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHsKCQlyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbiAodmFsdWUpIHsKCQkJdmFyIG91dHB1dCA9ICcnOwoJCQlpZiAodmFsdWUgPiAweEZGRkYpIHsKCQkJCXZhbHVlIC09IDB4MTAwMDA7CgkJCQlvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTsKCQkJCXZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjsKCQkJfQoJCQlvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTsKCQkJcmV0dXJuIG91dHB1dDsKCQl9KS5qb2luKCcnKTsKCX0KCgkvKioKICAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci4KICAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYAogICogQHByaXZhdGUKICAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS4KICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpbgogICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZgogICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuCiAgKi8KCWZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHsKCQlpZiAoY29kZVBvaW50IC0gNDggPCAxMCkgewoJCQlyZXR1cm4gY29kZVBvaW50IC0gMjI7CgkJfQoJCWlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7CgkJCXJldHVybiBjb2RlUG9pbnQgLSA2NTsKCQl9CgkJaWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHsKCQkJcmV0dXJuIGNvZGVQb2ludCAtIDk3OwoJCX0KCQlyZXR1cm4gYmFzZTsKCX0KCgkvKioKICAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC4KICAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYAogICogQHByaXZhdGUKICAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuCiAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvcgogICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2UKICAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpcwogICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWQKICAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uCiAgKi8KCWZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykgewoJCS8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aCgkJLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45CgkJcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTsKCX0KCgkvKioKICAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuCiAgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNAogICogQHByaXZhdGUKICAqLwoJZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7CgkJdmFyIGsgPSAwOwoJCWRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7CgkJZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpOwoJCWZvciAoOyAvKiBubyBpbml0aWFsaXphdGlvbiAqL2RlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7CgkJCWRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTsKCQl9CgkJcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7Cgl9CgoJLyoqCiAgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZQogICogc3ltYm9scy4KICAqIEBtZW1iZXJPZiBwdW55Y29kZQogICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLgogICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLgogICovCglmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHsKCQkvLyBEb24ndCB1c2UgVUNTLTIKCQl2YXIgb3V0cHV0ID0gW10sCgkJICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLAoJCSAgICBvdXQsCgkJICAgIGkgPSAwLAoJCSAgICBuID0gaW5pdGlhbE4sCgkJICAgIGJpYXMgPSBpbml0aWFsQmlhcywKCQkgICAgYmFzaWMsCgkJICAgIGosCgkJICAgIGluZGV4LAoJCSAgICBvbGRpLAoJCSAgICB3LAoJCSAgICBrLAoJCSAgICBkaWdpdCwKCQkgICAgdCwKCgkJLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovCgkJYmFzZU1pbnVzVDsKCgkJLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlCgkJLy8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHkKCQkvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC4KCgkJYmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpOwoJCWlmIChiYXNpYyA8IDApIHsKCQkJYmFzaWMgPSAwOwoJCX0KCgkJZm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHsKCQkJLy8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50CgkJCWlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHsKCQkJCWVycm9yKCdub3QtYmFzaWMnKTsKCQkJfQoJCQlvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTsKCQl9CgoJCS8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGUKCQkvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLgoKCQlmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDspIC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi97CgoJCQkvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuCgkJCS8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCwKCQkJLy8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXIKCQkJLy8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmcKCQkJLy8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC4KCQkJZm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOzsgLyogbm8gY29uZGl0aW9uICovayArPSBiYXNlKSB7CgoJCQkJaWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7CgkJCQkJZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTsKCQkJCX0KCgkJCQlkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTsKCgkJCQlpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7CgkJCQkJZXJyb3IoJ292ZXJmbG93Jyk7CgkJCQl9CgoJCQkJaSArPSBkaWdpdCAqIHc7CgkJCQl0ID0gayA8PSBiaWFzID8gdE1pbiA6IGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXM7CgoJCQkJaWYgKGRpZ2l0IDwgdCkgewoJCQkJCWJyZWFrOwoJCQkJfQoKCQkJCWJhc2VNaW51c1QgPSBiYXNlIC0gdDsKCQkJCWlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHsKCQkJCQllcnJvcignb3ZlcmZsb3cnKTsKCQkJCX0KCgkJCQl3ICo9IGJhc2VNaW51c1Q7CgkJCX0KCgkJCW91dCA9IG91dHB1dC5sZW5ndGggKyAxOwoJCQliaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTsKCgkJCS8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsCgkJCS8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6CgkJCWlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHsKCQkJCWVycm9yKCdvdmVyZmxvdycpOwoJCQl9CgoJCQluICs9IGZsb29yKGkgLyBvdXQpOwoJCQlpICU9IG91dDsKCgkJCS8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXQKCQkJb3V0cHV0LnNwbGljZShpKyssIDAsIG4pOwoJCX0KCgkJcmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTsKCX0KCgkvKioKICAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhCiAgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLgogICogQG1lbWJlck9mIHB1bnljb2RlCiAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuCiAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuCiAgKi8KCWZ1bmN0aW9uIGVuY29kZShpbnB1dCkgewoJCXZhciBuLAoJCSAgICBkZWx0YSwKCQkgICAgaGFuZGxlZENQQ291bnQsCgkJICAgIGJhc2ljTGVuZ3RoLAoJCSAgICBiaWFzLAoJCSAgICBqLAoJCSAgICBtLAoJCSAgICBxLAoJCSAgICBrLAoJCSAgICB0LAoJCSAgICBjdXJyZW50VmFsdWUsCgkJICAgIG91dHB1dCA9IFtdLAoKCQkvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqLwoJCWlucHV0TGVuZ3RoLAoKCQkvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi8KCQloYW5kbGVkQ1BDb3VudFBsdXNPbmUsCgkJICAgIGJhc2VNaW51c1QsCgkJICAgIHFNaW51c1Q7CgoJCS8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGUKCQlpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpOwoKCQkvLyBDYWNoZSB0aGUgbGVuZ3RoCgkJaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7CgoJCS8vIEluaXRpYWxpemUgdGhlIHN0YXRlCgkJbiA9IGluaXRpYWxOOwoJCWRlbHRhID0gMDsKCQliaWFzID0gaW5pdGlhbEJpYXM7CgoJCS8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMKCQlmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikgewoJCQljdXJyZW50VmFsdWUgPSBpbnB1dFtqXTsKCQkJaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHsKCQkJCW91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTsKCQkJfQoJCX0KCgkJaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7CgoJCS8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkOwoJCS8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy4KCgkJLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyCgkJaWYgKGJhc2ljTGVuZ3RoKSB7CgkJCW91dHB1dC5wdXNoKGRlbGltaXRlcik7CgkJfQoKCQkvLyBNYWluIGVuY29kaW5nIGxvb3A6CgkJd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHsKCgkJCS8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHQKCQkJLy8gbGFyZ2VyIG9uZToKCQkJZm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHsKCQkJCWN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdOwoJCQkJaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHsKCQkJCQltID0gY3VycmVudFZhbHVlOwoJCQkJfQoJCQl9CgoJCQkvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sCgkJCS8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93CgkJCWhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTsKCQkJaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHsKCQkJCWVycm9yKCdvdmVyZmxvdycpOwoJCQl9CgoJCQlkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lOwoJCQluID0gbTsKCgkJCWZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CgkJCQljdXJyZW50VmFsdWUgPSBpbnB1dFtqXTsKCgkJCQlpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7CgkJCQkJZXJyb3IoJ292ZXJmbG93Jyk7CgkJCQl9CgoJCQkJaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7CgkJCQkJLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIKCQkJCQlmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7OyAvKiBubyBjb25kaXRpb24gKi9rICs9IGJhc2UpIHsKCQkJCQkJdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiBrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzOwoJCQkJCQlpZiAocSA8IHQpIHsKCQkJCQkJCWJyZWFrOwoJCQkJCQl9CgkJCQkJCXFNaW51c1QgPSBxIC0gdDsKCQkJCQkJYmFzZU1pbnVzVCA9IGJhc2UgLSB0OwoJCQkJCQlvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpKTsKCQkJCQkJcSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTsKCQkJCQl9CgoJCQkJCW91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTsKCQkJCQliaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpOwoJCQkJCWRlbHRhID0gMDsKCQkJCQkrK2hhbmRsZWRDUENvdW50OwoJCQkJfQoJCQl9CgoJCQkrK2RlbHRhOwoJCQkrK247CgkJfQoJCXJldHVybiBvdXRwdXQuam9pbignJyk7Cgl9CgoJLyoqCiAgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzCiAgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuCiAgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW4KICAqIGNvbnZlcnRlZCB0byBVbmljb2RlLgogICogQG1lbWJlck9mIHB1bnljb2RlCiAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvCiAgKiBjb252ZXJ0IHRvIFVuaWNvZGUuCiAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGUKICAqIHN0cmluZy4KICAqLwoJZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7CgkJcmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24gKHN0cmluZykgewoJCQlyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZykgPyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpIDogc3RyaW5nOwoJCX0pOwoJfQoKCS8qKgogICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvCiAgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCwKICAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpbgogICogQVNDSUkuCiAgKiBAbWVtYmVyT2YgcHVueWNvZGUKICAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhCiAgKiBVbmljb2RlIHN0cmluZy4KICAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3IKICAqIGVtYWlsIGFkZHJlc3MuCiAgKi8KCWZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHsKCQlyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbiAoc3RyaW5nKSB7CgkJCXJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKSA/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpIDogc3RyaW5nOwoJCX0pOwoJfQoKCS8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCS8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi8KCXB1bnljb2RlID0gewoJCS8qKgogICAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci4KICAgKiBAbWVtYmVyT2YgcHVueWNvZGUKICAgKiBAdHlwZSBTdHJpbmcKICAgKi8KCQkndmVyc2lvbic6ICcxLjMuMicsCgkJLyoqCiAgICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXIKICAgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLgogICAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPgogICAqIEBtZW1iZXJPZiBwdW55Y29kZQogICAqIEB0eXBlIE9iamVjdAogICAqLwoJCSd1Y3MyJzogewoJCQknZGVjb2RlJzogdWNzMmRlY29kZSwKCQkJJ2VuY29kZSc6IHVjczJlbmNvZGUKCQl9LAoJCSdkZWNvZGUnOiBkZWNvZGUsCgkJJ2VuY29kZSc6IGVuY29kZSwKCQkndG9BU0NJSSc6IHRvQVNDSUksCgkJJ3RvVW5pY29kZSc6IHRvVW5pY29kZQoJfTsKCgkvKiogRXhwb3NlIGBwdW55Y29kZWAgKi8KCS8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJucwoJLy8gbGlrZSB0aGUgZm9sbG93aW5nOgoJaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBfdHlwZW9mKGRlZmluZS5hbWQpID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHsKCQlkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gcHVueWNvZGU7CgkJfSk7Cgl9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHsKCQlpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHsKCQkJLy8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wKwoJCQlmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTsKCQl9IGVsc2UgewoJCQkvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLQoJCQlmb3IgKGtleSBpbiBwdW55Y29kZSkgewoJCQkJcHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pOwoJCQl9CgkJfQoJfSBlbHNlIHsKCQkvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyCgkJcm9vdC5wdW55Y29kZSA9IHB1bnljb2RlOwoJfQp9KSh1bmRlZmluZWQpOwoKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0se31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZhdGU7Cgp2YXIgX0h5cGVydHlEaXNjb3ZlcnkgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9zcmMvaHlwZXJ0eS1kaXNjb3ZlcnkvSHlwZXJ0eURpc2NvdmVyeScpOwoKdmFyIF9IeXBlcnR5RGlzY292ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0h5cGVydHlEaXNjb3ZlcnkpOwoKdmFyIF91cmlqcyA9IHJlcXVpcmUoJ3VyaWpzJyk7Cgp2YXIgX3VyaWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VyaWpzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUGFydGljaXBhbnRzSHlwZXJ0eSA9IHsKICAgIGdldFBhcnRpY2lwYW50czogZnVuY3Rpb24gZ2V0UGFydGljaXBhbnRzKCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHZhciB1c2VycyA9IFsnb3BlbmlkdGVzdDEwQGdtYWlsLmNvbScsICdvcGVuaWR0ZXN0MjBAZ21haWwuY29tJywgJ29wZW5pZHRlc3QzMEBnbWFpbC5jb20nXTsKCiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHVzZXJzLm1hcChmdW5jdGlvbiAocCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygidGFjaGFuIik7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzKTsKICAgICAgICAgICAgcmV0dXJuIFBhcnRpY2lwYW50c0h5cGVydHkuaHlwZXJ0eURpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHlQZXJVc2VyKHAsIFBhcnRpY2lwYW50c0h5cGVydHkuZG9tYWluKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4geyBlbWFpbDogcCwgb25saW5lOiB0cnVlIH07CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgcmV0dXJuIHsgZW1haWw6IHAsIG9ubGluZTogZmFsc2UgfTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkpOwogICAgfQp9OwoKdmFyIFBhcnRpY2lwYW50c0h5cGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gUGFydGljaXBhbnRzSHlwZXJ0eUZhY3RvcnkoaHlwZXJ0eVVSTCwgYnVzLCBjb25maWcpIHsKICAgIFBhcnRpY2lwYW50c0h5cGVydHkuZG9tYWluID0gbmV3IF91cmlqczIuZGVmYXVsdChoeXBlcnR5VVJMKS5ob3N0bmFtZSgpOwogICAgUGFydGljaXBhbnRzSHlwZXJ0eS5oeXBlcnR5RGlzY292ZXJ5ID0gbmV3IF9IeXBlcnR5RGlzY292ZXJ5Mi5kZWZhdWx0KGh5cGVydHlVUkwsIGJ1cyk7CgogICAgcmV0dXJuIFBhcnRpY2lwYW50c0h5cGVydHk7Cn07CgpmdW5jdGlvbiBhY3RpdmF0ZShoeXBlcnR5VVJMLCBidXMsIGNvbmZpZykgewogICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiAnUGFydGljaXBhbnRzSHlwZXJ0eScsCiAgICAgICAgaW5zdGFuY2U6IFBhcnRpY2lwYW50c0h5cGVydHlGYWN0b3J5KGh5cGVydHlVUkwsIGJ1cywgY29uZmlnKQogICAgfTsKfQoKfSx7InNlcnZpY2UtZnJhbWV3b3JrL3NyYy9oeXBlcnR5LWRpc2NvdmVyeS9IeXBlcnR5RGlzY292ZXJ5IjoxLCJ1cmlqcyI6NX1dfSx7fSxbN10pKDcpCn0pOw==",
      "sourceCodeClassname": "ParticipantsHyperty",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of ParticipantsHyperty",
    "objectName": "ParticipantsHyperty",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}